{"ast":null,"code":"import { amplifyUuid } from '../../../utils/amplifyUuid/index.mjs';\nimport { getClientInfo } from '../../../utils/getClientInfo/getClientInfo.mjs';\nimport '../../../utils/retry/retry.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport '../../../awsClients/pinpoint/base.mjs';\nimport '../../../awsClients/pinpoint/errorHelpers.mjs';\nimport { updateEndpoint as updateEndpoint$1 } from '../../../awsClients/pinpoint/updateEndpoint.mjs';\nimport { cacheEndpointId } from '../utils/cacheEndpointId.mjs';\nimport { getEndpointId } from '../utils/getEndpointId.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nconst updateEndpoint = async ({\n  address,\n  appId,\n  category,\n  channelType,\n  credentials,\n  identityId,\n  optOut,\n  region,\n  userAttributes,\n  userId,\n  userProfile,\n  userAgentValue\n}) => {\n  const endpointId = await getEndpointId(appId, category);\n  // only generate a new endpoint id if one was not found in cache\n  const createdEndpointId = !endpointId ? amplifyUuid() : undefined;\n  const {\n    customProperties,\n    demographic,\n    email,\n    location,\n    metrics,\n    name,\n    plan\n  } = userProfile ?? {};\n  const clientInfo = getClientInfo();\n  const mergedDemographic = {\n    appVersion: clientInfo.appVersion,\n    make: clientInfo.make,\n    model: clientInfo.model,\n    modelVersion: clientInfo.version,\n    platform: clientInfo.platform,\n    ...demographic\n  };\n  const shouldAddAttributes = email || customProperties || name || plan;\n  const attributes = {\n    ...(email && {\n      email: [email]\n    }),\n    ...(name && {\n      name: [name]\n    }),\n    ...(plan && {\n      plan: [plan]\n    }),\n    ...customProperties\n  };\n  const input = {\n    ApplicationId: appId,\n    EndpointId: endpointId ?? createdEndpointId,\n    EndpointRequest: {\n      RequestId: amplifyUuid(),\n      EffectiveDate: new Date().toISOString(),\n      ChannelType: channelType,\n      Address: address,\n      Attributes: shouldAddAttributes ? attributes : undefined,\n      Demographic: {\n        AppVersion: mergedDemographic.appVersion,\n        Locale: mergedDemographic.locale,\n        Make: mergedDemographic.make,\n        Model: mergedDemographic.model,\n        ModelVersion: mergedDemographic.modelVersion,\n        Platform: mergedDemographic.platform,\n        PlatformVersion: mergedDemographic.platformVersion,\n        Timezone: mergedDemographic.timezone\n      },\n      Location: {\n        City: location?.city,\n        Country: location?.country,\n        Latitude: location?.latitude,\n        Longitude: location?.longitude,\n        PostalCode: location?.postalCode,\n        Region: location?.region\n      },\n      Metrics: metrics,\n      OptOut: optOut,\n      User: {\n        UserId: userId ?? identityId,\n        UserAttributes: userAttributes\n      }\n    }\n  };\n  await updateEndpoint$1({\n    credentials,\n    region,\n    userAgentValue\n  }, input);\n  // if we had to create an endpoint id, we need to now cache it\n  if (createdEndpointId) {\n    return cacheEndpointId(appId, category, createdEndpointId);\n  }\n};\nexport { updateEndpoint };","map":{"version":3,"names":["updateEndpoint","address","appId","category","channelType","credentials","identityId","optOut","region","userAttributes","userId","userProfile","userAgentValue","endpointId","getEndpointId","createdEndpointId","amplifyUuid","undefined","customProperties","demographic","email","location","metrics","name","plan","clientInfo","getClientInfo","mergedDemographic","appVersion","make","model","modelVersion","version","platform","shouldAddAttributes","attributes","input","ApplicationId","EndpointId","EndpointRequest","RequestId","EffectiveDate","Date","toISOString","ChannelType","Address","Attributes","Demographic","AppVersion","Locale","locale","Make","Model","ModelVersion","Platform","PlatformVersion","platformVersion","Timezone","timezone","Location","City","city","Country","country","Latitude","latitude","Longitude","longitude","PostalCode","postalCode","Region","Metrics","OptOut","User","UserId","UserAttributes","updateEndpoint$1","cacheEndpointId"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\providers\\pinpoint\\apis\\updateEndpoint.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { amplifyUuid } from '../../../utils/amplifyUuid';\nimport { getClientInfo } from '../../../utils/getClientInfo';\nimport { updateEndpoint as clientUpdateEndpoint, } from '../../../awsClients/pinpoint';\nimport { cacheEndpointId } from '../utils/cacheEndpointId';\nimport { getEndpointId } from '../utils/getEndpointId';\n/**\n * @internal\n */\nexport const updateEndpoint = async ({ address, appId, category, channelType, credentials, identityId, optOut, region, userAttributes, userId, userProfile, userAgentValue, }) => {\n    const endpointId = await getEndpointId(appId, category);\n    // only generate a new endpoint id if one was not found in cache\n    const createdEndpointId = !endpointId ? amplifyUuid() : undefined;\n    const { customProperties, demographic, email, location, metrics, name, plan, } = userProfile ?? {};\n    const clientInfo = getClientInfo();\n    const mergedDemographic = {\n        appVersion: clientInfo.appVersion,\n        make: clientInfo.make,\n        model: clientInfo.model,\n        modelVersion: clientInfo.version,\n        platform: clientInfo.platform,\n        ...demographic,\n    };\n    const shouldAddAttributes = email || customProperties || name || plan;\n    const attributes = {\n        ...(email && { email: [email] }),\n        ...(name && { name: [name] }),\n        ...(plan && { plan: [plan] }),\n        ...customProperties,\n    };\n    const input = {\n        ApplicationId: appId,\n        EndpointId: endpointId ?? createdEndpointId,\n        EndpointRequest: {\n            RequestId: amplifyUuid(),\n            EffectiveDate: new Date().toISOString(),\n            ChannelType: channelType,\n            Address: address,\n            Attributes: shouldAddAttributes ? attributes : undefined,\n            Demographic: {\n                AppVersion: mergedDemographic.appVersion,\n                Locale: mergedDemographic.locale,\n                Make: mergedDemographic.make,\n                Model: mergedDemographic.model,\n                ModelVersion: mergedDemographic.modelVersion,\n                Platform: mergedDemographic.platform,\n                PlatformVersion: mergedDemographic.platformVersion,\n                Timezone: mergedDemographic.timezone,\n            },\n            Location: {\n                City: location?.city,\n                Country: location?.country,\n                Latitude: location?.latitude,\n                Longitude: location?.longitude,\n                PostalCode: location?.postalCode,\n                Region: location?.region,\n            },\n            Metrics: metrics,\n            OptOut: optOut,\n            User: {\n                UserId: userId ?? identityId,\n                UserAttributes: userAttributes,\n            },\n        },\n    };\n    await clientUpdateEndpoint({ credentials, region, userAgentValue }, input);\n    // if we had to create an endpoint id, we need to now cache it\n    if (createdEndpointId) {\n        return cacheEndpointId(appId, category, createdEndpointId);\n    }\n};\n"],"mappings":";;;;;;;;;;;AAAA;AACA;AAMA;AACA;AACA;AACY,MAACA,cAAc,GAAG,MAAAA,CAAO;EAAEC,OAAO;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,WAAW;EAAEC,WAAW;EAAEC,UAAU;EAAEC,MAAM;EAAEC,MAAM;EAAEC,cAAc;EAAEC,MAAM;EAAEC,WAAW;EAAEC;AAAc,CAAG,KAAK;EAC9K,MAAMC,UAAU,GAAG,MAAMC,aAAa,CAACZ,KAAK,EAAEC,QAAQ,CAAC;EAC3D;EACI,MAAMY,iBAAiB,GAAG,CAACF,UAAU,GAAGG,WAAW,EAAE,GAAGC,SAAS;EACjE,MAAM;IAAEC,gBAAgB;IAAEC,WAAW;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,IAAI;IAAEC;EAAI,CAAG,GAAGb,WAAW,IAAI,EAAE;EAClG,MAAMc,UAAU,GAAGC,aAAa,EAAE;EAClC,MAAMC,iBAAiB,GAAG;IACtBC,UAAU,EAAEH,UAAU,CAACG,UAAU;IACjCC,IAAI,EAAEJ,UAAU,CAACI,IAAI;IACrBC,KAAK,EAAEL,UAAU,CAACK,KAAK;IACvBC,YAAY,EAAEN,UAAU,CAACO,OAAO;IAChCC,QAAQ,EAAER,UAAU,CAACQ,QAAQ;IAC7B,GAAGd;EACX,CAAK;EACD,MAAMe,mBAAmB,GAAGd,KAAK,IAAIF,gBAAgB,IAAIK,IAAI,IAAIC,IAAI;EACrE,MAAMW,UAAU,GAAG;IACf,IAAIf,KAAK,IAAI;MAAEA,KAAK,EAAE,CAACA,KAAK;IAAC,CAAE;IAC/B,IAAIG,IAAI,IAAI;MAAEA,IAAI,EAAE,CAACA,IAAI;IAAC,CAAE;IAC5B,IAAIC,IAAI,IAAI;MAAEA,IAAI,EAAE,CAACA,IAAI;IAAC,CAAE;IAC5B,GAAGN;EACX,CAAK;EACD,MAAMkB,KAAK,GAAG;IACVC,aAAa,EAAEnC,KAAK;IACpBoC,UAAU,EAAEzB,UAAU,IAAIE,iBAAiB;IAC3CwB,eAAe,EAAE;MACbC,SAAS,EAAExB,WAAW,EAAE;MACxByB,aAAa,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MACvCC,WAAW,EAAExC,WAAW;MACxByC,OAAO,EAAE5C,OAAO;MAChB6C,UAAU,EAAEZ,mBAAmB,GAAGC,UAAU,GAAGlB,SAAS;MACxD8B,WAAW,EAAE;QACTC,UAAU,EAAErB,iBAAiB,CAACC,UAAU;QACxCqB,MAAM,EAAEtB,iBAAiB,CAACuB,MAAM;QAChCC,IAAI,EAAExB,iBAAiB,CAACE,IAAI;QAC5BuB,KAAK,EAAEzB,iBAAiB,CAACG,KAAK;QAC9BuB,YAAY,EAAE1B,iBAAiB,CAACI,YAAY;QAC5CuB,QAAQ,EAAE3B,iBAAiB,CAACM,QAAQ;QACpCsB,eAAe,EAAE5B,iBAAiB,CAAC6B,eAAe;QAClDC,QAAQ,EAAE9B,iBAAiB,CAAC+B;MAC5C,CAAa;MACDC,QAAQ,EAAE;QACNC,IAAI,EAAEvC,QAAQ,EAAEwC,IAAI;QACpBC,OAAO,EAAEzC,QAAQ,EAAE0C,OAAO;QAC1BC,QAAQ,EAAE3C,QAAQ,EAAE4C,QAAQ;QAC5BC,SAAS,EAAE7C,QAAQ,EAAE8C,SAAS;QAC9BC,UAAU,EAAE/C,QAAQ,EAAEgD,UAAU;QAChCC,MAAM,EAAEjD,QAAQ,EAAEb;MAClC,CAAa;MACD+D,OAAO,EAAEjD,OAAO;MAChBkD,MAAM,EAAEjE,MAAM;MACdkE,IAAI,EAAE;QACFC,MAAM,EAAEhE,MAAM,IAAIJ,UAAU;QAC5BqE,cAAc,EAAElE;MAChC;IACA;EACA,CAAK;EACD,MAAMmE,gBAAoB,CAAC;IAAEvE,WAAW;IAAEG,MAAM;IAAEI;EAAc,CAAE,EAAEwB,KAAK,CAAC;EAC9E;EACI,IAAIrB,iBAAiB,EAAE;IACnB,OAAO8D,eAAe,CAAC3E,KAAK,EAAEC,QAAQ,EAAEY,iBAAiB,CAAC;EAClE;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}