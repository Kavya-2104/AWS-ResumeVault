{"ast":null,"code":"import { actions } from 'xstate';\nimport 'aws-amplify/utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport '../../types/authenticator/user.mjs';\nimport '../../types/authenticator/attributes.mjs';\nimport { trimValues } from '../../helpers/authenticator/utils.mjs';\nimport '../../helpers/accountSettings/utils.mjs';\nimport 'aws-amplify';\nimport { sanitizePhoneNumber, getUsernameSignUp } from './utils.mjs';\nconst {\n  assign\n} = actions;\nconst clearActorDoneData = assign({\n  actorDoneData: undefined\n});\nconst clearChallengeName = assign({\n  challengeName: undefined\n});\nconst clearMissingAttributes = assign({\n  missingAttributes: undefined\n});\nconst clearError = assign({\n  remoteError: undefined\n});\nconst clearFormValues = assign({\n  formValues: {}\n});\nconst clearTouched = assign({\n  touched: {}\n});\nconst clearUser = assign({\n  user: undefined\n});\nconst clearValidationError = assign({\n  validationError: {}\n});\n/**\n * \"set\" actions\n */\nconst setTotpSecretCode = assign({\n  totpSecretCode: (_, {\n    data\n  }) => {\n    const {\n      sharedSecret\n    } = data.nextStep?.totpSetupDetails ?? {};\n    return sharedSecret;\n  }\n});\nconst setSignInStep = assign({\n  step: 'SIGN_IN'\n});\nconst setShouldVerifyUserAttributeStep = assign({\n  step: 'SHOULD_CONFIRM_USER_ATTRIBUTE'\n});\nconst setConfirmAttributeCompleteStep = assign({\n  step: 'CONFIRM_ATTRIBUTE_COMPLETE'\n});\n// map v6 `signInStep` to v5 `challengeName`\nconst setChallengeName = assign({\n  challengeName: (_, {\n    data\n  }) => {\n    const {\n      signInStep\n    } = data.nextStep;\n    return signInStep === 'CONFIRM_SIGN_IN_WITH_SMS_CODE' ? 'SMS_MFA' : signInStep === 'CONFIRM_SIGN_IN_WITH_TOTP_CODE' ? 'SOFTWARE_TOKEN_MFA' : undefined;\n  }\n});\nconst setUsernameForgotPassword = assign({\n  username: ({\n    formValues,\n    loginMechanisms\n  }) => {\n    const loginMechanism = loginMechanisms[0];\n    const {\n      username,\n      country_code\n    } = formValues;\n    if (loginMechanism === 'phone_number') {\n      // forgot password `formValues` uses `username` for base phone number value\n      // prefix `country_code` for full `username`\n      return sanitizePhoneNumber(country_code, username);\n    }\n    // default username field for loginMechanism === 'email' is \"username\" for SignIn\n    return username;\n  }\n});\nconst setUsernameSignUp = assign({\n  username: getUsernameSignUp\n});\nconst setUsernameSignIn = assign({\n  username: ({\n    formValues,\n    loginMechanisms\n  }) => {\n    const loginMechanism = loginMechanisms[0];\n    const {\n      username,\n      country_code\n    } = formValues;\n    if (loginMechanism === 'phone_number') {\n      // sign in `formValues` uses `username` for base phone number value\n      // prefix `country_code` for full `username`\n      return sanitizePhoneNumber(country_code, username);\n    }\n    // return `email` and `username`\n    return username;\n  }\n});\nconst setNextSignInStep = assign({\n  step: (_, {\n    data\n  }) => data.nextStep.signInStep === 'DONE' ? 'SIGN_IN_COMPLETE' : data.nextStep.signInStep\n});\nconst setNextSignUpStep = assign({\n  step: (_, {\n    data\n  }) => data.nextStep.signUpStep === 'DONE' ? 'SIGN_UP_COMPLETE' : data.nextStep.signUpStep\n});\nconst setNextResetPasswordStep = assign({\n  step: (_, {\n    data\n  }) => data.nextStep.resetPasswordStep === 'DONE' ? 'RESET_PASSWORD_COMPLETE' : data.nextStep.resetPasswordStep\n});\nconst setMissingAttributes = assign({\n  missingAttributes: (_, {\n    data\n  }) => data.nextStep?.missingAttributes\n});\nconst setFieldErrors = assign({\n  validationError: (_, {\n    data\n  }) => data\n});\nconst setRemoteError = assign({\n  remoteError: (_, {\n    data\n  }) => {\n    if (data.name === 'NoUserPoolError') {\n      return `Configuration error (see console) â€“ please contact the administrator`;\n    }\n    return data?.message || data;\n  }\n});\nconst setUser = assign({\n  user: (_, {\n    data\n  }) => data\n});\nconst resolveCodeDeliveryDetails = details => ({\n  Destination: details.destination,\n  DeliveryMedium: details.deliveryMedium,\n  AttributeName: details.attributName\n});\nconst setCodeDeliveryDetails = assign({\n  codeDeliveryDetails: (_, {\n    data\n  }) => {\n    if (data?.nextStep?.codeDeliveryDetails) {\n      return resolveCodeDeliveryDetails(data.nextStep.codeDeliveryDetails);\n    }\n    return resolveCodeDeliveryDetails(data);\n  }\n});\nconst handleInput = assign({\n  formValues: (context, {\n    data\n  }) => {\n    const {\n      name,\n      value\n    } = data;\n    return {\n      ...context['formValues'],\n      [name]: value\n    };\n  }\n});\nconst handleSubmit = assign({\n  formValues: (context, {\n    data\n  }) =>\n  // do not trim password\n  trimValues({\n    ...context['formValues'],\n    ...data\n  }, 'password')\n});\nconst handleBlur = assign({\n  touched: (context, {\n    data\n  }) => ({\n    ...context['touched'],\n    [data.name]: true\n  })\n});\nconst setUnverifiedUserAttributes = assign({\n  unverifiedUserAttributes: (_, {\n    data\n  }) => {\n    const {\n      email,\n      phone_number\n    } = data;\n    const unverifiedUserAttributes = {\n      ...(email && {\n        email\n      }),\n      ...(phone_number && {\n        phone_number\n      })\n    };\n    return unverifiedUserAttributes;\n  }\n});\nconst clearSelectedUserAttribute = assign({\n  selectedUserAttribute: undefined\n});\nconst setSelectedUserAttribute = assign({\n  selectedUserAttribute: context => context.formValues?.unverifiedAttr\n});\n// Maps to unexposed `ConfirmSignUpSignUpStep`\nconst setConfirmSignUpSignUpStep = assign({\n  step: 'CONFIRM_SIGN_UP'\n});\nconst ACTIONS = {\n  clearActorDoneData,\n  clearChallengeName,\n  clearError,\n  clearFormValues,\n  clearMissingAttributes,\n  clearSelectedUserAttribute,\n  clearTouched,\n  clearUser,\n  clearValidationError,\n  handleBlur,\n  handleInput,\n  handleSubmit,\n  setChallengeName,\n  setCodeDeliveryDetails,\n  setFieldErrors,\n  setMissingAttributes,\n  setNextResetPasswordStep,\n  setNextSignInStep,\n  setNextSignUpStep,\n  setRemoteError,\n  setConfirmAttributeCompleteStep,\n  setConfirmSignUpSignUpStep,\n  setShouldVerifyUserAttributeStep,\n  setSelectedUserAttribute,\n  setSignInStep,\n  setTotpSecretCode,\n  setUser,\n  setUnverifiedUserAttributes,\n  setUsernameForgotPassword,\n  setUsernameSignIn,\n  setUsernameSignUp\n};\nexport { ACTIONS as default };","map":{"version":3,"names":["actions","trimValues","sanitizePhoneNumber","getUsernameSignUp","assign","clearActorDoneData","actorDoneData","undefined","clearChallengeName","challengeName","clearMissingAttributes","missingAttributes","clearError","remoteError","clearFormValues","formValues","clearTouched","touched","clearUser","user","clearValidationError","validationError","setTotpSecretCode","totpSecretCode","_","data","sharedSecret","nextStep","totpSetupDetails","setSignInStep","step","setShouldVerifyUserAttributeStep","setConfirmAttributeCompleteStep","setChallengeName","signInStep","setUsernameForgotPassword","username","loginMechanisms","loginMechanism","country_code","setUsernameSignUp","setUsernameSignIn","setNextSignInStep","setNextSignUpStep","signUpStep","setNextResetPasswordStep","resetPasswordStep","setMissingAttributes","setFieldErrors","setRemoteError","name","message","setUser","resolveCodeDeliveryDetails","details","Destination","destination","DeliveryMedium","deliveryMedium","AttributeName","attributName","setCodeDeliveryDetails","codeDeliveryDetails","handleInput","context","value","handleSubmit","handleBlur","setUnverifiedUserAttributes","unverifiedUserAttributes","email","phone_number","clearSelectedUserAttribute","selectedUserAttribute","setSelectedUserAttribute","unverifiedAttr","setConfirmSignUpSignUpStep","ACTIONS","default"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actions.mjs"],"sourcesContent":["import { actions } from 'xstate';\nimport 'aws-amplify/utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport '../../types/authenticator/user.mjs';\nimport '../../types/authenticator/attributes.mjs';\nimport { trimValues } from '../../helpers/authenticator/utils.mjs';\nimport '../../helpers/accountSettings/utils.mjs';\nimport 'aws-amplify';\nimport { sanitizePhoneNumber, getUsernameSignUp } from './utils.mjs';\n\nconst { assign } = actions;\nconst clearActorDoneData = assign({ actorDoneData: undefined });\nconst clearChallengeName = assign({ challengeName: undefined });\nconst clearMissingAttributes = assign({ missingAttributes: undefined });\nconst clearError = assign({ remoteError: undefined });\nconst clearFormValues = assign({ formValues: {} });\nconst clearTouched = assign({ touched: {} });\nconst clearUser = assign({ user: undefined });\nconst clearValidationError = assign({ validationError: {} });\n/**\n * \"set\" actions\n */\nconst setTotpSecretCode = assign({\n    totpSecretCode: (_, { data }) => {\n        const { sharedSecret } = (data.nextStep?.totpSetupDetails ??\n            {});\n        return sharedSecret;\n    },\n});\nconst setSignInStep = assign({ step: 'SIGN_IN' });\nconst setShouldVerifyUserAttributeStep = assign({\n    step: 'SHOULD_CONFIRM_USER_ATTRIBUTE',\n});\nconst setConfirmAttributeCompleteStep = assign({\n    step: 'CONFIRM_ATTRIBUTE_COMPLETE',\n});\n// map v6 `signInStep` to v5 `challengeName`\nconst setChallengeName = assign({\n    challengeName: (_, { data }) => {\n        const { signInStep } = data.nextStep;\n        return signInStep === 'CONFIRM_SIGN_IN_WITH_SMS_CODE'\n            ? 'SMS_MFA'\n            : signInStep === 'CONFIRM_SIGN_IN_WITH_TOTP_CODE'\n                ? 'SOFTWARE_TOKEN_MFA'\n                : undefined;\n    },\n});\nconst setUsernameForgotPassword = assign({\n    username: ({ formValues, loginMechanisms }) => {\n        const loginMechanism = loginMechanisms[0];\n        const { username, country_code } = formValues;\n        if (loginMechanism === 'phone_number') {\n            // forgot password `formValues` uses `username` for base phone number value\n            // prefix `country_code` for full `username`\n            return sanitizePhoneNumber(country_code, username);\n        }\n        // default username field for loginMechanism === 'email' is \"username\" for SignIn\n        return username;\n    },\n});\nconst setUsernameSignUp = assign({ username: getUsernameSignUp });\nconst setUsernameSignIn = assign({\n    username: ({ formValues, loginMechanisms }) => {\n        const loginMechanism = loginMechanisms[0];\n        const { username, country_code } = formValues;\n        if (loginMechanism === 'phone_number') {\n            // sign in `formValues` uses `username` for base phone number value\n            // prefix `country_code` for full `username`\n            return sanitizePhoneNumber(country_code, username);\n        }\n        // return `email` and `username`\n        return username;\n    },\n});\nconst setNextSignInStep = assign({\n    step: (_, { data }) => data.nextStep.signInStep === 'DONE'\n        ? 'SIGN_IN_COMPLETE'\n        : data.nextStep.signInStep,\n});\nconst setNextSignUpStep = assign({\n    step: (_, { data }) => data.nextStep.signUpStep === 'DONE'\n        ? 'SIGN_UP_COMPLETE'\n        : data.nextStep.signUpStep,\n});\nconst setNextResetPasswordStep = assign({\n    step: (_, { data }) => data.nextStep.resetPasswordStep === 'DONE'\n        ? 'RESET_PASSWORD_COMPLETE'\n        : data.nextStep.resetPasswordStep,\n});\nconst setMissingAttributes = assign({\n    missingAttributes: (_, { data }) => data.nextStep?.missingAttributes,\n});\nconst setFieldErrors = assign({\n    validationError: (_, { data }) => data,\n});\nconst setRemoteError = assign({\n    remoteError: (_, { data }) => {\n        if (data.name === 'NoUserPoolError') {\n            return `Configuration error (see console) â€“ please contact the administrator`;\n        }\n        return data?.message || data;\n    },\n});\nconst setUser = assign({ user: (_, { data }) => data });\nconst resolveCodeDeliveryDetails = (details) => ({\n    Destination: details.destination,\n    DeliveryMedium: details.deliveryMedium,\n    AttributeName: details.attributName,\n});\nconst setCodeDeliveryDetails = assign({\n    codeDeliveryDetails: (_, { data }) => {\n        if (data\n            ?.nextStep?.codeDeliveryDetails) {\n            return resolveCodeDeliveryDetails(data\n                .nextStep.codeDeliveryDetails);\n        }\n        return resolveCodeDeliveryDetails(data);\n    },\n});\nconst handleInput = assign({\n    formValues: (context, { data }) => {\n        const { name, value } = data;\n        return { ...context['formValues'], [name]: value };\n    },\n});\nconst handleSubmit = assign({\n    formValues: (context, { data }) => \n    // do not trim password\n    trimValues({ ...context['formValues'], ...data }, 'password'),\n});\nconst handleBlur = assign({\n    touched: (context, { data }) => ({\n        ...context['touched'],\n        [data.name]: true,\n    }),\n});\nconst setUnverifiedUserAttributes = assign({\n    unverifiedUserAttributes: (_, { data }) => {\n        const { email, phone_number } = data;\n        const unverifiedUserAttributes = {\n            ...(email && { email }),\n            ...(phone_number && { phone_number }),\n        };\n        return unverifiedUserAttributes;\n    },\n});\nconst clearSelectedUserAttribute = assign({ selectedUserAttribute: undefined });\nconst setSelectedUserAttribute = assign({\n    selectedUserAttribute: (context) => context.formValues?.unverifiedAttr,\n});\n// Maps to unexposed `ConfirmSignUpSignUpStep`\nconst setConfirmSignUpSignUpStep = assign({ step: 'CONFIRM_SIGN_UP' });\nconst ACTIONS = {\n    clearActorDoneData,\n    clearChallengeName,\n    clearError,\n    clearFormValues,\n    clearMissingAttributes,\n    clearSelectedUserAttribute,\n    clearTouched,\n    clearUser,\n    clearValidationError,\n    handleBlur,\n    handleInput,\n    handleSubmit,\n    setChallengeName,\n    setCodeDeliveryDetails,\n    setFieldErrors,\n    setMissingAttributes,\n    setNextResetPasswordStep,\n    setNextSignInStep,\n    setNextSignUpStep,\n    setRemoteError,\n    setConfirmAttributeCompleteStep,\n    setConfirmSignUpSignUpStep,\n    setShouldVerifyUserAttributeStep,\n    setSelectedUserAttribute,\n    setSignInStep,\n    setTotpSecretCode,\n    setUser,\n    setUnverifiedUserAttributes,\n    setUsernameForgotPassword,\n    setUsernameSignIn,\n    setUsernameSignUp,\n};\n\nexport { ACTIONS as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}