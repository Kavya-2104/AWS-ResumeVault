{"ast":null,"code":"import { parseMetadata } from './responseInfo.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Utility functions for serializing and deserializing of JSON protocol in general(including: REST-JSON, JSON-RPC, etc.)\n */\n/**\n * Error parser for AWS JSON protocol.\n */\nconst parseJsonError = async response => {\n  if (!response || response.statusCode < 300) {\n    return;\n  }\n  const body = await parseJsonBody(response);\n  const sanitizeErrorCode = rawValue => {\n    const [cleanValue] = rawValue.toString().split(/[,:]+/);\n    if (cleanValue.includes('#')) {\n      return cleanValue.split('#')[1];\n    }\n    return cleanValue;\n  };\n  const code = sanitizeErrorCode(response.headers['x-amzn-errortype'] ?? body.code ?? body.__type ?? 'UnknownError');\n  const message = body.message ?? body.Message ?? 'Unknown error';\n  const error = new Error(message);\n  return Object.assign(error, {\n    name: code,\n    $metadata: parseMetadata(response)\n  });\n};\n/**\n * Parse JSON response body to JavaScript object.\n */\nconst parseJsonBody = async response => {\n  if (!response.body) {\n    throw new Error('Missing response payload');\n  }\n  const output = await response.body.json();\n  return Object.assign(output, {\n    $metadata: parseMetadata(response)\n  });\n};\nexport { parseJsonBody, parseJsonError };","map":{"version":3,"names":["parseJsonError","response","statusCode","body","parseJsonBody","sanitizeErrorCode","rawValue","cleanValue","toString","split","includes","code","headers","__type","message","Message","error","Error","Object","assign","name","$metadata","parseMetadata","output","json"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\clients\\serde\\json.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata } from './responseInfo';\n/**\n * Utility functions for serializing and deserializing of JSON protocol in general(including: REST-JSON, JSON-RPC, etc.)\n */\n/**\n * Error parser for AWS JSON protocol.\n */\nexport const parseJsonError = async (response) => {\n    if (!response || response.statusCode < 300) {\n        return;\n    }\n    const body = await parseJsonBody(response);\n    const sanitizeErrorCode = (rawValue) => {\n        const [cleanValue] = rawValue.toString().split(/[,:]+/);\n        if (cleanValue.includes('#')) {\n            return cleanValue.split('#')[1];\n        }\n        return cleanValue;\n    };\n    const code = sanitizeErrorCode(response.headers['x-amzn-errortype'] ??\n        body.code ??\n        body.__type ??\n        'UnknownError');\n    const message = body.message ?? body.Message ?? 'Unknown error';\n    const error = new Error(message);\n    return Object.assign(error, {\n        name: code,\n        $metadata: parseMetadata(response),\n    });\n};\n/**\n * Parse JSON response body to JavaScript object.\n */\nexport const parseJsonBody = async (response) => {\n    if (!response.body) {\n        throw new Error('Missing response payload');\n    }\n    const output = await response.body.json();\n    return Object.assign(output, {\n        $metadata: parseMetadata(response),\n    });\n};\n"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,cAAc,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACC,UAAU,GAAG,GAAG,EAAE;IACxC;EACR;EACI,MAAMC,IAAI,GAAG,MAAMC,aAAa,CAACH,QAAQ,CAAC;EAC1C,MAAMI,iBAAiB,GAAIC,QAAQ,IAAK;IACpC,MAAM,CAACC,UAAU,CAAC,GAAGD,QAAQ,CAACE,QAAQ,EAAE,CAACC,KAAK,CAAC,OAAO,CAAC;IACvD,IAAIF,UAAU,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC1B,OAAOH,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3C;IACQ,OAAOF,UAAU;EACzB,CAAK;EACD,MAAMI,IAAI,GAAGN,iBAAiB,CAACJ,QAAQ,CAACW,OAAO,CAAC,kBAAkB,CAAC,IAC/DT,IAAI,CAACQ,IAAI,IACTR,IAAI,CAACU,MAAM,IACX,cAAc,CAAC;EACnB,MAAMC,OAAO,GAAGX,IAAI,CAACW,OAAO,IAAIX,IAAI,CAACY,OAAO,IAAI,eAAe;EAC/D,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAACH,OAAO,CAAC;EAChC,OAAOI,MAAM,CAACC,MAAM,CAACH,KAAK,EAAE;IACxBI,IAAI,EAAET,IAAI;IACVU,SAAS,EAAEC,aAAa,CAACrB,QAAQ;EACzC,CAAK,CAAC;AACN;AACA;AACA;AACA;AACY,MAACG,aAAa,GAAG,MAAOH,QAAQ,IAAK;EAC7C,IAAI,CAACA,QAAQ,CAACE,IAAI,EAAE;IAChB,MAAM,IAAIc,KAAK,CAAC,0BAA0B,CAAC;EACnD;EACI,MAAMM,MAAM,GAAG,MAAMtB,QAAQ,CAACE,IAAI,CAACqB,IAAI,EAAE;EACzC,OAAON,MAAM,CAACC,MAAM,CAACI,MAAM,EAAE;IACzBF,SAAS,EAAEC,aAAa,CAACrB,QAAQ;EACzC,CAAK,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}