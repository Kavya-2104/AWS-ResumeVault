{"ast":null,"code":"import { parseMetadata, EMPTY_SHA256_HASH, presignUrl } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base.mjs';\nimport { parseXmlError } from './utils/parsePayload.mjs';\nimport { CONTENT_SHA256_HEADER } from './runtime/constants.mjs';\nimport { s3TransferHandler } from './runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport './runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map, deserializeBoolean, deserializeTimestamp, deserializeNumber, deserializeMetadata } from './utils/deserializeHelpers.mjs';\nimport { validateS3RequiredParameter, serializePathnameObjectKey } from './utils/serializeHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\nconst getObjectSerializer = async (input, endpoint) => {\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  return {\n    method: 'GET',\n    headers: {\n      ...(input.Range && {\n        Range: input.Range\n      })\n    },\n    url\n  };\n};\nconst getObjectDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseXmlError(response);\n    throw buildStorageServiceError(error, response.statusCode);\n  } else {\n    return {\n      ...map(response.headers, {\n        DeleteMarker: ['x-amz-delete-marker', deserializeBoolean],\n        AcceptRanges: 'accept-ranges',\n        Expiration: 'x-amz-expiration',\n        Restore: 'x-amz-restore',\n        LastModified: ['last-modified', deserializeTimestamp],\n        ContentLength: ['content-length', deserializeNumber],\n        ETag: 'etag',\n        ChecksumCRC32: 'x-amz-checksum-crc32',\n        ChecksumCRC32C: 'x-amz-checksum-crc32c',\n        ChecksumSHA1: 'x-amz-checksum-sha1',\n        ChecksumSHA256: 'x-amz-checksum-sha256',\n        MissingMeta: ['x-amz-missing-meta', deserializeNumber],\n        VersionId: 'x-amz-version-id',\n        CacheControl: 'cache-control',\n        ContentDisposition: 'content-disposition',\n        ContentEncoding: 'content-encoding',\n        ContentLanguage: 'content-language',\n        ContentRange: 'content-range',\n        ContentType: 'content-type',\n        Expires: ['expires', deserializeTimestamp],\n        WebsiteRedirectLocation: 'x-amz-website-redirect-location',\n        ServerSideEncryption: 'x-amz-server-side-encryption',\n        SSECustomerAlgorithm: 'x-amz-server-side-encryption-customer-algorithm',\n        SSECustomerKeyMD5: 'x-amz-server-side-encryption-customer-key-md5',\n        SSEKMSKeyId: 'x-amz-server-side-encryption-aws-kms-key-id',\n        BucketKeyEnabled: ['x-amz-server-side-encryption-bucket-key-enabled', deserializeBoolean],\n        StorageClass: 'x-amz-storage-class',\n        RequestCharged: 'x-amz-request-charged',\n        ReplicationStatus: 'x-amz-replication-status',\n        PartsCount: ['x-amz-mp-parts-count', deserializeNumber],\n        TagCount: ['x-amz-tagging-count', deserializeNumber],\n        ObjectLockMode: 'x-amz-object-lock-mode',\n        ObjectLockRetainUntilDate: ['x-amz-object-lock-retain-until-date', deserializeTimestamp],\n        ObjectLockLegalHoldStatus: 'x-amz-object-lock-legal-hold'\n      }),\n      Metadata: deserializeMetadata(response.headers),\n      $metadata: parseMetadata(response),\n      // @ts-expect-error The body is a CompatibleHttpResponse type because the lower-level handler is XHR instead of\n      // fetch, which represents payload in Blob instread of ReadableStream.\n      Body: response.body\n    };\n  }\n};\nconst getObject = composeServiceApi(s3TransferHandler, getObjectSerializer, getObjectDeserializer, {\n  ...defaultConfig,\n  responseType: 'blob'\n});\n/**\n * Get a presigned URL for the `getObject` API.\n *\n * @internal\n */\nconst getPresignedGetObjectUrl = async (config, input) => {\n  const endpoint = defaultConfig.endpointResolver(config, input);\n  const {\n    url,\n    headers,\n    method\n  } = await getObjectSerializer(input, endpoint);\n  // TODO: set content sha256 query parameter with value of UNSIGNED-PAYLOAD instead of empty hash.\n  // It requires changes in presignUrl. Without this change, the generated url still works,\n  // but not the same as other tools like AWS SDK and CLI.\n  url.searchParams.append(CONTENT_SHA256_HEADER, EMPTY_SHA256_HASH);\n  if (config.userAgentValue) {\n    url.searchParams.append(config.userAgentHeader ?? USER_AGENT_HEADER, config.userAgentValue);\n  }\n  for (const [headerName, value] of Object.entries(headers).sort(([key1], [key2]) => key1.localeCompare(key2))) {\n    url.searchParams.append(headerName, value);\n  }\n  return presignUrl({\n    method,\n    url,\n    body: undefined\n  }, {\n    signingService: defaultConfig.service,\n    signingRegion: config.region,\n    ...defaultConfig,\n    ...config\n  });\n};\nexport { getObject, getPresignedGetObjectUrl };","map":{"version":3,"names":["USER_AGENT_HEADER","getObjectSerializer","input","endpoint","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","method","headers","Range","getObjectDeserializer","response","statusCode","error","parseXmlError","buildStorageServiceError","map","DeleteMarker","deserializeBoolean","AcceptRanges","Expiration","Restore","LastModified","deserializeTimestamp","ContentLength","deserializeNumber","ETag","ChecksumCRC32","ChecksumCRC32C","ChecksumSHA1","ChecksumSHA256","MissingMeta","VersionId","CacheControl","ContentDisposition","ContentEncoding","ContentLanguage","ContentRange","ContentType","Expires","WebsiteRedirectLocation","ServerSideEncryption","SSECustomerAlgorithm","SSECustomerKeyMD5","SSEKMSKeyId","BucketKeyEnabled","StorageClass","RequestCharged","ReplicationStatus","PartsCount","TagCount","ObjectLockMode","ObjectLockRetainUntilDate","ObjectLockLegalHoldStatus","Metadata","deserializeMetadata","$metadata","parseMetadata","Body","body","getObject","composeServiceApi","s3TransferHandler","defaultConfig","responseType","getPresignedGetObjectUrl","config","endpointResolver","searchParams","append","CONTENT_SHA256_HEADER","EMPTY_SHA256_HASH","userAgentValue","userAgentHeader","headerName","value","Object","entries","sort","key1","key2","localeCompare","presignUrl","undefined","signingService","service","signingRegion","region"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\getObject.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { EMPTY_SHA256_HASH, parseMetadata, presignUrl, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base';\nimport { CONTENT_SHA256_HEADER, buildStorageServiceError, deserializeBoolean, deserializeMetadata, deserializeNumber, deserializeTimestamp, map, parseXmlError, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from './utils';\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\nconst getObjectSerializer = async (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    return {\n        method: 'GET',\n        headers: {\n            ...(input.Range && { Range: input.Range }),\n        },\n        url,\n    };\n};\nconst getObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = (await parseXmlError(response));\n        throw buildStorageServiceError(error, response.statusCode);\n    }\n    else {\n        return {\n            ...map(response.headers, {\n                DeleteMarker: ['x-amz-delete-marker', deserializeBoolean],\n                AcceptRanges: 'accept-ranges',\n                Expiration: 'x-amz-expiration',\n                Restore: 'x-amz-restore',\n                LastModified: ['last-modified', deserializeTimestamp],\n                ContentLength: ['content-length', deserializeNumber],\n                ETag: 'etag',\n                ChecksumCRC32: 'x-amz-checksum-crc32',\n                ChecksumCRC32C: 'x-amz-checksum-crc32c',\n                ChecksumSHA1: 'x-amz-checksum-sha1',\n                ChecksumSHA256: 'x-amz-checksum-sha256',\n                MissingMeta: ['x-amz-missing-meta', deserializeNumber],\n                VersionId: 'x-amz-version-id',\n                CacheControl: 'cache-control',\n                ContentDisposition: 'content-disposition',\n                ContentEncoding: 'content-encoding',\n                ContentLanguage: 'content-language',\n                ContentRange: 'content-range',\n                ContentType: 'content-type',\n                Expires: ['expires', deserializeTimestamp],\n                WebsiteRedirectLocation: 'x-amz-website-redirect-location',\n                ServerSideEncryption: 'x-amz-server-side-encryption',\n                SSECustomerAlgorithm: 'x-amz-server-side-encryption-customer-algorithm',\n                SSECustomerKeyMD5: 'x-amz-server-side-encryption-customer-key-md5',\n                SSEKMSKeyId: 'x-amz-server-side-encryption-aws-kms-key-id',\n                BucketKeyEnabled: [\n                    'x-amz-server-side-encryption-bucket-key-enabled',\n                    deserializeBoolean,\n                ],\n                StorageClass: 'x-amz-storage-class',\n                RequestCharged: 'x-amz-request-charged',\n                ReplicationStatus: 'x-amz-replication-status',\n                PartsCount: ['x-amz-mp-parts-count', deserializeNumber],\n                TagCount: ['x-amz-tagging-count', deserializeNumber],\n                ObjectLockMode: 'x-amz-object-lock-mode',\n                ObjectLockRetainUntilDate: [\n                    'x-amz-object-lock-retain-until-date',\n                    deserializeTimestamp,\n                ],\n                ObjectLockLegalHoldStatus: 'x-amz-object-lock-legal-hold',\n            }),\n            Metadata: deserializeMetadata(response.headers),\n            $metadata: parseMetadata(response),\n            // @ts-expect-error The body is a CompatibleHttpResponse type because the lower-level handler is XHR instead of\n            // fetch, which represents payload in Blob instread of ReadableStream.\n            Body: response.body,\n        };\n    }\n};\nexport const getObject = composeServiceApi(s3TransferHandler, getObjectSerializer, getObjectDeserializer, { ...defaultConfig, responseType: 'blob' });\n/**\n * Get a presigned URL for the `getObject` API.\n *\n * @internal\n */\nexport const getPresignedGetObjectUrl = async (config, input) => {\n    const endpoint = defaultConfig.endpointResolver(config, input);\n    const { url, headers, method } = await getObjectSerializer(input, endpoint);\n    // TODO: set content sha256 query parameter with value of UNSIGNED-PAYLOAD instead of empty hash.\n    // It requires changes in presignUrl. Without this change, the generated url still works,\n    // but not the same as other tools like AWS SDK and CLI.\n    url.searchParams.append(CONTENT_SHA256_HEADER, EMPTY_SHA256_HASH);\n    if (config.userAgentValue) {\n        url.searchParams.append(config.userAgentHeader ?? USER_AGENT_HEADER, config.userAgentValue);\n    }\n    for (const [headerName, value] of Object.entries(headers).sort(([key1], [key2]) => key1.localeCompare(key2))) {\n        url.searchParams.append(headerName, value);\n    }\n    return presignUrl({ method, url, body: undefined }, {\n        signingService: defaultConfig.service,\n        signingRegion: config.region,\n        ...defaultConfig,\n        ...config,\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}