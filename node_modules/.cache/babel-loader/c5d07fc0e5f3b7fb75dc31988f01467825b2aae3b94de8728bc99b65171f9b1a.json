{"ast":null,"code":"import { getActorContext, getSortedFormFields, isString, areEmptyArrays, areEmptyObjects } from '@aws-amplify/ui';\nimport { isComponentRouteKey } from '../utils.mjs';\nconst defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\nfunction areSelectorDepsEqual(currentDeps, nextDeps) {\n  if (currentDeps.length !== nextDeps.length) {\n    return false;\n  }\n  return currentDeps.every((currentDep, index) => {\n    const nextDep = nextDeps[index];\n    if (areEmptyArrays(currentDep, nextDep) || areEmptyObjects(currentDep, nextDep)) {\n      return true;\n    }\n    return currentDep === nextDep;\n  });\n}\nconst getComparator = selector => (currentFacade, nextFacade) => {\n  const currentSelectorDeps = selector(currentFacade);\n  const nextSelectorDeps = selector(nextFacade);\n  // Shallow compare the array values\n  return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\nconst getQRFields = state => ({\n  ...getActorContext(state)?.formFields?.setupTotp?.QR\n});\nconst flattenFormFields = fields => fields.flatMap(([name, options]) => ({\n  name,\n  ...options\n}));\nconst convertContactMethodsToFields = unverifiedUserAttributes => {\n  return unverifiedUserAttributes && Object.entries(unverifiedUserAttributes).map(([name, value]) => {\n    const valueIsString = isString(value);\n    if (!valueIsString || !name) {\n      return {};\n    }\n    return {\n      name,\n      label: value,\n      type: 'radio',\n      value\n    };\n  });\n};\n/**\n * Retrieves default and custom (RWA only, to be updated) form field values from state machine\n * for subcomponent routes that render fields\n */\nconst getMachineFields = (route, state, unverifiedUserAttributes) => {\n  if (isComponentRouteKey(route)) {\n    return route === 'verifyUser' ? convertContactMethodsToFields(unverifiedUserAttributes) : flattenFormFields(getSortedFormFields(route, state));\n  }\n  return [];\n};\nexport { areSelectorDepsEqual, defaultComparator, getComparator, getMachineFields, getQRFields };","map":{"version":3,"names":["getActorContext","getSortedFormFields","isString","areEmptyArrays","areEmptyObjects","isComponentRouteKey","defaultComparator","areSelectorDepsEqual","currentDeps","nextDeps","length","every","currentDep","index","nextDep","getComparator","selector","currentFacade","nextFacade","currentSelectorDeps","nextSelectorDeps","getQRFields","state","formFields","setupTotp","QR","flattenFormFields","fields","flatMap","name","options","convertContactMethodsToFields","unverifiedUserAttributes","Object","entries","map","value","valueIsString","label","type","getMachineFields","route"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/utils.mjs"],"sourcesContent":["import { getActorContext, getSortedFormFields, isString, areEmptyArrays, areEmptyObjects } from '@aws-amplify/ui';\nimport { isComponentRouteKey } from '../utils.mjs';\n\nconst defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\nfunction areSelectorDepsEqual(currentDeps, nextDeps) {\n    if (currentDeps.length !== nextDeps.length) {\n        return false;\n    }\n    return currentDeps.every((currentDep, index) => {\n        const nextDep = nextDeps[index];\n        if (areEmptyArrays(currentDep, nextDep) ||\n            areEmptyObjects(currentDep, nextDep)) {\n            return true;\n        }\n        return currentDep === nextDep;\n    });\n}\nconst getComparator = (selector) => (currentFacade, nextFacade) => {\n    const currentSelectorDeps = selector(currentFacade);\n    const nextSelectorDeps = selector(nextFacade);\n    // Shallow compare the array values\n    return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\nconst getQRFields = (state) => ({\n    ...getActorContext(state)?.formFields?.setupTotp?.QR,\n});\nconst flattenFormFields = (fields) => fields.flatMap(([name, options]) => ({ name, ...options }));\nconst convertContactMethodsToFields = (unverifiedUserAttributes) => {\n    return (unverifiedUserAttributes &&\n        Object.entries(unverifiedUserAttributes).map(([name, value]) => {\n            const valueIsString = isString(value);\n            if (!valueIsString || !name) {\n                return {};\n            }\n            return { name, label: value, type: 'radio', value };\n        }));\n};\n/**\n * Retrieves default and custom (RWA only, to be updated) form field values from state machine\n * for subcomponent routes that render fields\n */\nconst getMachineFields = (route, state, unverifiedUserAttributes) => {\n    if (isComponentRouteKey(route)) {\n        return route === 'verifyUser'\n            ? convertContactMethodsToFields(unverifiedUserAttributes)\n            : flattenFormFields(getSortedFormFields(route, state));\n    }\n    return [];\n};\n\nexport { areSelectorDepsEqual, defaultComparator, getComparator, getMachineFields, getQRFields };\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,mBAAmB,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,eAAe,QAAQ,iBAAiB;AACjH,SAASC,mBAAmB,QAAQ,cAAc;AAElD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM,KAAK;AACrC;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACC,WAAW,EAAEC,QAAQ,EAAE;EACjD,IAAID,WAAW,CAACE,MAAM,KAAKD,QAAQ,CAACC,MAAM,EAAE;IACxC,OAAO,KAAK;EAChB;EACA,OAAOF,WAAW,CAACG,KAAK,CAAC,CAACC,UAAU,EAAEC,KAAK,KAAK;IAC5C,MAAMC,OAAO,GAAGL,QAAQ,CAACI,KAAK,CAAC;IAC/B,IAAIV,cAAc,CAACS,UAAU,EAAEE,OAAO,CAAC,IACnCV,eAAe,CAACQ,UAAU,EAAEE,OAAO,CAAC,EAAE;MACtC,OAAO,IAAI;IACf;IACA,OAAOF,UAAU,KAAKE,OAAO;EACjC,CAAC,CAAC;AACN;AACA,MAAMC,aAAa,GAAIC,QAAQ,IAAK,CAACC,aAAa,EAAEC,UAAU,KAAK;EAC/D,MAAMC,mBAAmB,GAAGH,QAAQ,CAACC,aAAa,CAAC;EACnD,MAAMG,gBAAgB,GAAGJ,QAAQ,CAACE,UAAU,CAAC;EAC7C;EACA,OAAOX,oBAAoB,CAACY,mBAAmB,EAAEC,gBAAgB,CAAC;AACtE,CAAC;AACD,MAAMC,WAAW,GAAIC,KAAK,KAAM;EAC5B,GAAGtB,eAAe,CAACsB,KAAK,CAAC,EAAEC,UAAU,EAAEC,SAAS,EAAEC;AACtD,CAAC,CAAC;AACF,MAAMC,iBAAiB,GAAIC,MAAM,IAAKA,MAAM,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,EAAEC,OAAO,CAAC,MAAM;EAAED,IAAI;EAAE,GAAGC;AAAQ,CAAC,CAAC,CAAC;AACjG,MAAMC,6BAA6B,GAAIC,wBAAwB,IAAK;EAChE,OAAQA,wBAAwB,IAC5BC,MAAM,CAACC,OAAO,CAACF,wBAAwB,CAAC,CAACG,GAAG,CAAC,CAAC,CAACN,IAAI,EAAEO,KAAK,CAAC,KAAK;IAC5D,MAAMC,aAAa,GAAGnC,QAAQ,CAACkC,KAAK,CAAC;IACrC,IAAI,CAACC,aAAa,IAAI,CAACR,IAAI,EAAE;MACzB,OAAO,CAAC,CAAC;IACb;IACA,OAAO;MAAEA,IAAI;MAAES,KAAK,EAAEF,KAAK;MAAEG,IAAI,EAAE,OAAO;MAAEH;IAAM,CAAC;EACvD,CAAC,CAAC;AACV,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMI,gBAAgB,GAAGA,CAACC,KAAK,EAAEnB,KAAK,EAAEU,wBAAwB,KAAK;EACjE,IAAI3B,mBAAmB,CAACoC,KAAK,CAAC,EAAE;IAC5B,OAAOA,KAAK,KAAK,YAAY,GACvBV,6BAA6B,CAACC,wBAAwB,CAAC,GACvDN,iBAAiB,CAACzB,mBAAmB,CAACwC,KAAK,EAAEnB,KAAK,CAAC,CAAC;EAC9D;EACA,OAAO,EAAE;AACb,CAAC;AAED,SAASf,oBAAoB,EAAED,iBAAiB,EAAES,aAAa,EAAEyB,gBAAgB,EAAEnB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}