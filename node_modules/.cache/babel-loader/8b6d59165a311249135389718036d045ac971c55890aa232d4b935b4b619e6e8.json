{"ast":null,"code":"import { deDupeAsyncFunction, assertTokenProviderConfig, decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { initiateAuth } from './clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from './clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokensWithRefreshToken } from './types.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { getUserContextData } from './userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst refreshAuthTokensFunction = async ({\n  tokens,\n  authConfig,\n  username\n}) => {\n  assertTokenProviderConfig(authConfig?.Cognito);\n  const region = getRegion(authConfig.Cognito.userPoolId);\n  assertAuthTokensWithRefreshToken(tokens);\n  const refreshTokenString = tokens.refreshToken;\n  const AuthParameters = {\n    REFRESH_TOKEN: refreshTokenString\n  };\n  if (tokens.deviceMetadata?.deviceKey) {\n    AuthParameters.DEVICE_KEY = tokens.deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId: authConfig.Cognito.userPoolId,\n    userPoolClientId: authConfig.Cognito.userPoolClientId\n  });\n  const {\n    AuthenticationResult\n  } = await initiateAuth({\n    region\n  }, {\n    ClientId: authConfig?.Cognito?.userPoolClientId,\n    AuthFlow: 'REFRESH_TOKEN_AUTH',\n    AuthParameters,\n    UserContextData\n  });\n  const accessToken = decodeJWT(AuthenticationResult?.AccessToken ?? '');\n  const idToken = AuthenticationResult?.IdToken ? decodeJWT(AuthenticationResult.IdToken) : undefined;\n  const {\n    iat\n  } = accessToken.payload;\n  // This should never happen. If it does, it's a bug from the service.\n  if (!iat) {\n    throw new AuthError({\n      name: 'iatNotFoundException',\n      message: 'iat not found in access token'\n    });\n  }\n  const clockDrift = iat * 1000 - new Date().getTime();\n  return {\n    accessToken,\n    idToken,\n    clockDrift,\n    refreshToken: refreshTokenString,\n    username\n  };\n};\nconst refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);\nexport { refreshAuthTokens };","map":{"version":3,"names":["refreshAuthTokensFunction","tokens","authConfig","username","assertTokenProviderConfig","Cognito","region","getRegion","userPoolId","assertAuthTokensWithRefreshToken","refreshTokenString","refreshToken","AuthParameters","REFRESH_TOKEN","deviceMetadata","deviceKey","DEVICE_KEY","UserContextData","getUserContextData","userPoolClientId","AuthenticationResult","initiateAuth","ClientId","AuthFlow","accessToken","decodeJWT","AccessToken","idToken","IdToken","undefined","iat","payload","AuthError","name","message","clockDrift","Date","getTime","refreshAuthTokens","deDupeAsyncFunction"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\utils\\refreshAuthTokens.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertTokenProviderConfig, deDupeAsyncFunction, decodeJWT, } from '@aws-amplify/core/internals/utils';\nimport { initiateAuth } from '../utils/clients/CognitoIdentityProvider';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { assertAuthTokensWithRefreshToken } from '../utils/types';\nimport { AuthError } from '../../../errors/AuthError';\nimport { getUserContextData } from './userContextData';\nconst refreshAuthTokensFunction = async ({ tokens, authConfig, username, }) => {\n    assertTokenProviderConfig(authConfig?.Cognito);\n    const region = getRegion(authConfig.Cognito.userPoolId);\n    assertAuthTokensWithRefreshToken(tokens);\n    const refreshTokenString = tokens.refreshToken;\n    const AuthParameters = {\n        REFRESH_TOKEN: refreshTokenString,\n    };\n    if (tokens.deviceMetadata?.deviceKey) {\n        AuthParameters.DEVICE_KEY = tokens.deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId: authConfig.Cognito.userPoolId,\n        userPoolClientId: authConfig.Cognito.userPoolClientId,\n    });\n    const { AuthenticationResult } = await initiateAuth({ region }, {\n        ClientId: authConfig?.Cognito?.userPoolClientId,\n        AuthFlow: 'REFRESH_TOKEN_AUTH',\n        AuthParameters,\n        UserContextData,\n    });\n    const accessToken = decodeJWT(AuthenticationResult?.AccessToken ?? '');\n    const idToken = AuthenticationResult?.IdToken\n        ? decodeJWT(AuthenticationResult.IdToken)\n        : undefined;\n    const { iat } = accessToken.payload;\n    // This should never happen. If it does, it's a bug from the service.\n    if (!iat) {\n        throw new AuthError({\n            name: 'iatNotFoundException',\n            message: 'iat not found in access token',\n        });\n    }\n    const clockDrift = iat * 1000 - new Date().getTime();\n    return {\n        accessToken,\n        idToken,\n        clockDrift,\n        refreshToken: refreshTokenString,\n        username,\n    };\n};\nexport const refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);\n"],"mappings":";;;;;;;AAAA;AACA;AAOA,MAAMA,yBAAyB,GAAG,MAAAA,CAAO;EAAEC,MAAM;EAAEC,UAAU;EAAEC;AAAQ,CAAG,KAAK;EAC3EC,yBAAyB,CAACF,UAAU,EAAEG,OAAO,CAAC;EAC9C,MAAMC,MAAM,GAAGC,SAAS,CAACL,UAAU,CAACG,OAAO,CAACG,UAAU,CAAC;EACvDC,gCAAgC,CAACR,MAAM,CAAC;EACxC,MAAMS,kBAAkB,GAAGT,MAAM,CAACU,YAAY;EAC9C,MAAMC,cAAc,GAAG;IACnBC,aAAa,EAAEH;EACvB,CAAK;EACD,IAAIT,MAAM,CAACa,cAAc,EAAEC,SAAS,EAAE;IAClCH,cAAc,CAACI,UAAU,GAAGf,MAAM,CAACa,cAAc,CAACC,SAAS;EACnE;EACI,MAAME,eAAe,GAAGC,kBAAkB,CAAC;IACvCf,QAAQ;IACRK,UAAU,EAAEN,UAAU,CAACG,OAAO,CAACG,UAAU;IACzCW,gBAAgB,EAAEjB,UAAU,CAACG,OAAO,CAACc;EAC7C,CAAK,CAAC;EACF,MAAM;IAAEC;EAAoB,CAAE,GAAG,MAAMC,YAAY,CAAC;IAAEf;EAAM,CAAE,EAAE;IAC5DgB,QAAQ,EAAEpB,UAAU,EAAEG,OAAO,EAAEc,gBAAgB;IAC/CI,QAAQ,EAAE,oBAAoB;IAC9BX,cAAc;IACdK;EACR,CAAK,CAAC;EACF,MAAMO,WAAW,GAAGC,SAAS,CAACL,oBAAoB,EAAEM,WAAW,IAAI,EAAE,CAAC;EACtE,MAAMC,OAAO,GAAGP,oBAAoB,EAAEQ,OAAO,GACvCH,SAAS,CAACL,oBAAoB,CAACQ,OAAO,CAAC,GACvCC,SAAS;EACf,MAAM;IAAEC;EAAG,CAAE,GAAGN,WAAW,CAACO,OAAO;EACvC;EACI,IAAI,CAACD,GAAG,EAAE;IACN,MAAM,IAAIE,SAAS,CAAC;MAChBC,IAAI,EAAE,sBAAsB;MAC5BC,OAAO,EAAE;IACrB,CAAS,CAAC;EACV;EACI,MAAMC,UAAU,GAAGL,GAAG,GAAG,IAAI,GAAG,IAAIM,IAAI,EAAE,CAACC,OAAO,EAAE;EACpD,OAAO;IACHb,WAAW;IACXG,OAAO;IACPQ,UAAU;IACVxB,YAAY,EAAED,kBAAkB;IAChCP;EACR,CAAK;AACL,CAAC;AACW,MAACmC,iBAAiB,GAAGC,mBAAmB,CAACvC,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}