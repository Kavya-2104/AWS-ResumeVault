{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput } from '../utils/resolveS3ConfigAndInput.mjs';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { createDownloadTask } from '../utils/transferTask.mjs';\nimport '../utils/client/base.mjs';\nimport { getObject } from '../utils/client/getObject.mjs';\nimport '../utils/client/listObjectsV2.mjs';\nimport '../utils/client/putObject.mjs';\nimport '../utils/client/createMultipartUpload.mjs';\nimport '../utils/client/uploadPart.mjs';\nimport '../utils/client/completeMultipartUpload.mjs';\nimport '../utils/client/listParts.mjs';\nimport '../utils/client/abortMultipartUpload.mjs';\nimport '../utils/client/copyObject.mjs';\nimport '../utils/client/headObject.mjs';\nimport '../utils/client/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../utils/userAgent.mjs';\nimport '../../../errors/types/validation.mjs';\nimport { logger } from '../../../utils/logger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Download S3 object data to memory\n *\n * @param input - The DownloadDataInput object.\n * @returns A cancelable task exposing result promise from `result` property.\n * @throws service: {@link S3Exception} - thrown when checking for existence of the object\n * @throws validation: {@link StorageValidationErrorCode } - Validation errors\n *\n * @example\n * ```ts\n * // Download a file from s3 bucket\n * const { body, eTag } = await downloadData({ key, data: file, options: {\n *   onProgress, // Optional progress callback.\n * } }).result;\n * ```\n * @example\n * ```ts\n * // Cancel a task\n * const downloadTask = downloadData({ key, data: file });\n * //...\n * downloadTask.cancel();\n * try {\n * \tawait downloadTask.result;\n * } catch (error) {\n * \tif(isCancelError(error)) {\n *    // Handle error thrown by task cancelation.\n * \t}\n * }\n *```\n */\nconst downloadData = input => {\n  const abortController = new AbortController();\n  const downloadTask = createDownloadTask({\n    job: downloadDataJob(input, abortController.signal),\n    onCancel: message => {\n      abortController.abort(message);\n    }\n  });\n  return downloadTask;\n};\nconst downloadDataJob = ({\n  options: downloadDataOptions,\n  key\n}, abortSignal) => async () => {\n  const {\n    bucket,\n    keyPrefix,\n    s3Config\n  } = await resolveS3ConfigAndInput(Amplify, downloadDataOptions);\n  const finalKey = keyPrefix + key;\n  logger.debug(`download ${key} from ${finalKey}.`);\n  const {\n    Body: body,\n    LastModified: lastModified,\n    ContentLength: size,\n    ETag: eTag,\n    Metadata: metadata,\n    VersionId: versionId,\n    ContentType: contentType\n  } = await getObject({\n    ...s3Config,\n    abortSignal,\n    onDownloadProgress: downloadDataOptions?.onProgress,\n    userAgentValue: getStorageUserAgentValue(StorageAction.DownloadData)\n  }, {\n    Bucket: bucket,\n    Key: finalKey,\n    ...(downloadDataOptions?.bytesRange && {\n      Range: `bytes=${downloadDataOptions.bytesRange.start}-${downloadDataOptions.bytesRange.end}`\n    })\n  });\n  return {\n    key,\n    body,\n    lastModified,\n    size,\n    contentType,\n    eTag,\n    metadata,\n    versionId\n  };\n};\nexport { downloadData };","map":{"version":3,"names":["downloadData","input","abortController","AbortController","downloadTask","createDownloadTask","job","downloadDataJob","signal","onCancel","message","abort","options","downloadDataOptions","key","abortSignal","bucket","keyPrefix","s3Config","resolveS3ConfigAndInput","Amplify","finalKey","logger","debug","Body","body","LastModified","lastModified","ContentLength","size","ETag","eTag","Metadata","metadata","VersionId","versionId","ContentType","contentType","getObject","onDownloadProgress","onProgress","userAgentValue","getStorageUserAgentValue","StorageAction","DownloadData","Bucket","Key","bytesRange","Range","start","end"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\downloadData.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput } from '../utils/resolveS3ConfigAndInput';\nimport { createDownloadTask } from '../utils';\nimport { getObject } from '../utils/client';\nimport { getStorageUserAgentValue } from '../utils/userAgent';\nimport { logger } from '../../../utils';\n/**\n * Download S3 object data to memory\n *\n * @param input - The DownloadDataInput object.\n * @returns A cancelable task exposing result promise from `result` property.\n * @throws service: {@link S3Exception} - thrown when checking for existence of the object\n * @throws validation: {@link StorageValidationErrorCode } - Validation errors\n *\n * @example\n * ```ts\n * // Download a file from s3 bucket\n * const { body, eTag } = await downloadData({ key, data: file, options: {\n *   onProgress, // Optional progress callback.\n * } }).result;\n * ```\n * @example\n * ```ts\n * // Cancel a task\n * const downloadTask = downloadData({ key, data: file });\n * //...\n * downloadTask.cancel();\n * try {\n * \tawait downloadTask.result;\n * } catch (error) {\n * \tif(isCancelError(error)) {\n *    // Handle error thrown by task cancelation.\n * \t}\n * }\n *```\n */\nexport const downloadData = (input) => {\n    const abortController = new AbortController();\n    const downloadTask = createDownloadTask({\n        job: downloadDataJob(input, abortController.signal),\n        onCancel: (message) => {\n            abortController.abort(message);\n        },\n    });\n    return downloadTask;\n};\nconst downloadDataJob = ({ options: downloadDataOptions, key }, abortSignal) => async () => {\n    const { bucket, keyPrefix, s3Config } = await resolveS3ConfigAndInput(Amplify, downloadDataOptions);\n    const finalKey = keyPrefix + key;\n    logger.debug(`download ${key} from ${finalKey}.`);\n    const { Body: body, LastModified: lastModified, ContentLength: size, ETag: eTag, Metadata: metadata, VersionId: versionId, ContentType: contentType, } = await getObject({\n        ...s3Config,\n        abortSignal,\n        onDownloadProgress: downloadDataOptions?.onProgress,\n        userAgentValue: getStorageUserAgentValue(StorageAction.DownloadData),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        ...(downloadDataOptions?.bytesRange && {\n            Range: `bytes=${downloadDataOptions.bytesRange.start}-${downloadDataOptions.bytesRange.end}`,\n        }),\n    });\n    return {\n        key,\n        body,\n        lastModified,\n        size,\n        contentType,\n        eTag,\n        metadata,\n        versionId,\n    };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,YAAY,GAAIC,KAAK,IAAK;EACnC,MAAMC,eAAe,GAAG,IAAIC,eAAe,EAAE;EAC7C,MAAMC,YAAY,GAAGC,kBAAkB,CAAC;IACpCC,GAAG,EAAEC,eAAe,CAACN,KAAK,EAAEC,eAAe,CAACM,MAAM,CAAC;IACnDC,QAAQ,EAAGC,OAAO,IAAK;MACnBR,eAAe,CAACS,KAAK,CAACD,OAAO,CAAC;IAC1C;EACA,CAAK,CAAC;EACF,OAAON,YAAY;AACvB;AACA,MAAMG,eAAe,GAAGA,CAAC;EAAEK,OAAO,EAAEC,mBAAmB;EAAEC;AAAG,CAAE,EAAEC,WAAW,KAAK,YAAY;EACxF,MAAM;IAAEC,MAAM;IAAEC,SAAS;IAAEC;EAAQ,CAAE,GAAG,MAAMC,uBAAuB,CAACC,OAAO,EAAEP,mBAAmB,CAAC;EACnG,MAAMQ,QAAQ,GAAGJ,SAAS,GAAGH,GAAG;EAChCQ,MAAM,CAACC,KAAK,CAAE,YAAWT,GAAI,SAAQO,QAAS,GAAE,CAAC;EACjD,MAAM;IAAEG,IAAI,EAAEC,IAAI;IAAEC,YAAY,EAAEC,YAAY;IAAEC,aAAa,EAAEC,IAAI;IAAEC,IAAI,EAAEC,IAAI;IAAEC,QAAQ,EAAEC,QAAQ;IAAEC,SAAS,EAAEC,SAAS;IAAEC,WAAW,EAAEC;EAAW,CAAG,GAAG,MAAMC,SAAS,CAAC;IACrK,GAAGpB,QAAQ;IACXH,WAAW;IACXwB,kBAAkB,EAAE1B,mBAAmB,EAAE2B,UAAU;IACnDC,cAAc,EAAEC,wBAAwB,CAACC,aAAa,CAACC,YAAY;EAC3E,CAAK,EAAE;IACCC,MAAM,EAAE7B,MAAM;IACd8B,GAAG,EAAEzB,QAAQ;IACb,IAAIR,mBAAmB,EAAEkC,UAAU,IAAI;MACnCC,KAAK,EAAG,SAAQnC,mBAAmB,CAACkC,UAAU,CAACE,KAAM,IAAGpC,mBAAmB,CAACkC,UAAU,CAACG,GAAI;IACvG,CAAS;EACT,CAAK,CAAC;EACF,OAAO;IACHpC,GAAG;IACHW,IAAI;IACJE,YAAY;IACZE,IAAI;IACJQ,WAAW;IACXN,IAAI;IACJE,QAAQ;IACRE;EACR,CAAK;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}