{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base.mjs';\nimport { parseXmlError } from './utils/parsePayload.mjs';\nimport { s3TransferHandler } from './runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport './runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map } from './utils/deserializeHelpers.mjs';\nimport { assignStringVariables, validateS3RequiredParameter, serializePathnameObjectKey } from './utils/serializeHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst uploadPartSerializer = async (input, endpoint) => {\n  const headers = {\n    ...assignStringVariables({\n      'content-md5': input.ContentMD5\n    })\n  };\n  headers['content-type'] = 'application/octet-stream';\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  validateS3RequiredParameter(!!input.PartNumber, 'PartNumber');\n  validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n  url.search = new AmplifyUrlSearchParams({\n    partNumber: input.PartNumber + '',\n    uploadId: input.UploadId\n  }).toString();\n  return {\n    method: 'PUT',\n    headers,\n    url,\n    body: input.Body\n  };\n};\nconst uploadPartDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseXmlError(response);\n    throw buildStorageServiceError(error, response.statusCode);\n  } else {\n    return {\n      ...map(response.headers, {\n        ETag: 'etag'\n      }),\n      $metadata: parseMetadata(response)\n    };\n  }\n};\nconst uploadPart = composeServiceApi(s3TransferHandler, uploadPartSerializer, uploadPartDeserializer, {\n  ...defaultConfig,\n  responseType: 'text'\n});\nexport { uploadPart };","map":{"version":3,"names":["uploadPartSerializer","input","endpoint","headers","assignStringVariables","ContentMD5","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","PartNumber","UploadId","search","AmplifyUrlSearchParams","partNumber","uploadId","method","body","Body","uploadPartDeserializer","response","statusCode","error","parseXmlError","buildStorageServiceError","map","ETag","$metadata","parseMetadata","uploadPart","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\uploadPart.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base';\nimport { buildStorageServiceError, validateS3RequiredParameter, assignStringVariables, map, parseXmlError, s3TransferHandler, serializePathnameObjectKey, } from './utils';\nconst uploadPartSerializer = async (input, endpoint) => {\n    const headers = {\n        ...assignStringVariables({ 'content-md5': input.ContentMD5 }),\n    };\n    headers['content-type'] = 'application/octet-stream';\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.PartNumber, 'PartNumber');\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        partNumber: input.PartNumber + '',\n        uploadId: input.UploadId,\n    }).toString();\n    return {\n        method: 'PUT',\n        headers,\n        url,\n        body: input.Body,\n    };\n};\nconst uploadPartDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = (await parseXmlError(response));\n        throw buildStorageServiceError(error, response.statusCode);\n    }\n    else {\n        return {\n            ...map(response.headers, {\n                ETag: 'etag',\n            }),\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const uploadPart = composeServiceApi(s3TransferHandler, uploadPartSerializer, uploadPartDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAMA,MAAMA,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACpD,MAAMC,OAAO,GAAG;IACZ,GAAGC,qBAAqB,CAAC;MAAE,aAAa,EAAEH,KAAK,CAACI;IAAU,CAAE;EACpE,CAAK;EACDF,OAAO,CAAC,cAAc,CAAC,GAAG,0BAA0B;EACpD,MAAMG,GAAG,GAAG,IAAIC,UAAU,CAACL,QAAQ,CAACI,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACR,KAAK,CAACS,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEL,KAAK,CAACS,GAAG,CAAC;EACzDD,2BAA2B,CAAC,CAAC,CAACR,KAAK,CAACY,UAAU,EAAE,YAAY,CAAC;EAC7DJ,2BAA2B,CAAC,CAAC,CAACR,KAAK,CAACa,QAAQ,EAAE,UAAU,CAAC;EACzDR,GAAG,CAACS,MAAM,GAAG,IAAIC,sBAAsB,CAAC;IACpCC,UAAU,EAAEhB,KAAK,CAACY,UAAU,GAAG,EAAE;IACjCK,QAAQ,EAAEjB,KAAK,CAACa;EACxB,CAAK,CAAC,CAACN,QAAQ,EAAE;EACb,OAAO;IACHW,MAAM,EAAE,KAAK;IACbhB,OAAO;IACPG,GAAG;IACHc,IAAI,EAAEnB,KAAK,CAACoB;EACpB,CAAK;AACL,CAAC;AACD,MAAMC,sBAAsB,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAI,MAAMC,aAAa,CAACH,QAAQ,CAAE;IAC7C,MAAMI,wBAAwB,CAACF,KAAK,EAAEF,QAAQ,CAACC,UAAU,CAAC;EAClE,CAAK,MACI;IACD,OAAO;MACH,GAAGI,GAAG,CAACL,QAAQ,CAACpB,OAAO,EAAE;QACrB0B,IAAI,EAAE;MACtB,CAAa,CAAC;MACFC,SAAS,EAAEC,aAAa,CAACR,QAAQ;IAC7C,CAAS;EACT;AACA,CAAC;AACW,MAACS,UAAU,GAAGC,iBAAiB,CAACC,iBAAiB,EAAElC,oBAAoB,EAAEsB,sBAAsB,EAAE;EAAE,GAAGa,aAAa;EAAEC,YAAY,EAAE;AAAM,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}