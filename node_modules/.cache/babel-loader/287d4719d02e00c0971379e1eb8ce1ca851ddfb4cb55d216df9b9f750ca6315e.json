{"ast":null,"code":"import { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { Amplify, Hub } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { handleUserSRPAuthFlow, getActiveSignInUsername, getNewDeviceMetatada, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { setActiveSignInState, cleanActiveSignInState } from '../utils/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport '../../../errors/constants.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getCurrentUser } from './getCurrentUser.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in\n *\n * @param input - The SignInWithSRPInput object\n * @returns SignInWithSRPOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors\n * thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signInWithSRP(input) {\n  const {\n    username,\n    password\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const signInDetails = {\n    loginId: username,\n    authFlowType: 'USER_SRP_AUTH'\n  };\n  assertTokenProviderConfig(authConfig);\n  const clientMetaData = input.options?.clientMetadata;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n  try {\n    const {\n      ChallengeName,\n      ChallengeParameters,\n      AuthenticationResult,\n      Session\n    } = await handleUserSRPAuthFlow(username, password, clientMetaData, authConfig, tokenOrchestrator);\n    const activeUsername = getActiveSignInUsername(username);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username: activeUsername,\n      challengeName: ChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      cleanActiveSignInState();\n      await cacheCognitoTokens({\n        username: activeUsername,\n        ...AuthenticationResult,\n        NewDeviceMetadata: await getNewDeviceMetatada(authConfig.userPoolId, AuthenticationResult.NewDeviceMetadata, AuthenticationResult.AccessToken),\n        signInDetails\n      });\n      Hub.dispatch('auth', {\n        event: 'signedIn',\n        data: await getCurrentUser()\n      }, 'Auth', AMPLIFY_SYMBOL);\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: ChallengeName,\n      challengeParameters: ChallengeParameters\n    });\n  } catch (error) {\n    cleanActiveSignInState();\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { signInWithSRP };","map":{"version":3,"names":["signInWithSRP","input","username","password","authConfig","Amplify","getConfig","Auth","Cognito","signInDetails","loginId","authFlowType","assertTokenProviderConfig","clientMetaData","options","clientMetadata","assertValidationError","AuthValidationErrorCode","EmptySignInUsername","EmptySignInPassword","ChallengeName","ChallengeParameters","AuthenticationResult","Session","handleUserSRPAuthFlow","tokenOrchestrator","activeUsername","getActiveSignInUsername","setActiveSignInState","signInSession","challengeName","cleanActiveSignInState","cacheCognitoTokens","NewDeviceMetadata","getNewDeviceMetatada","userPoolId","AccessToken","Hub","dispatch","event","data","getCurrentUser","AMPLIFY_SYMBOL","isSignedIn","nextStep","signInStep","getSignInResult","challengeParameters","error","assertServiceError","result","getSignInResultFromError","name"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\signInWithSRP.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { Amplify, Hub } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { getActiveSignInUsername, getNewDeviceMetatada, getSignInResult, getSignInResultFromError, handleUserSRPAuthFlow, } from '../utils/signInHelpers';\nimport { setActiveSignInState, cleanActiveSignInState, } from '../utils/signInStore';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { getCurrentUser } from './getCurrentUser';\n/**\n * Signs a user in\n *\n * @param input - The SignInWithSRPInput object\n * @returns SignInWithSRPOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors\n * thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signInWithSRP(input) {\n    const { username, password } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const signInDetails = {\n        loginId: username,\n        authFlowType: 'USER_SRP_AUTH',\n    };\n    assertTokenProviderConfig(authConfig);\n    const clientMetaData = input.options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n    assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n    try {\n        const { ChallengeName, ChallengeParameters, AuthenticationResult, Session, } = await handleUserSRPAuthFlow(username, password, clientMetaData, authConfig, tokenOrchestrator);\n        const activeUsername = getActiveSignInUsername(username);\n        // sets up local state used during the sign-in process\n        setActiveSignInState({\n            signInSession: Session,\n            username: activeUsername,\n            challengeName: ChallengeName,\n            signInDetails,\n        });\n        if (AuthenticationResult) {\n            cleanActiveSignInState();\n            await cacheCognitoTokens({\n                username: activeUsername,\n                ...AuthenticationResult,\n                NewDeviceMetadata: await getNewDeviceMetatada(authConfig.userPoolId, AuthenticationResult.NewDeviceMetadata, AuthenticationResult.AccessToken),\n                signInDetails,\n            });\n            Hub.dispatch('auth', {\n                event: 'signedIn',\n                data: await getCurrentUser(),\n            }, 'Auth', AMPLIFY_SYMBOL);\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: ChallengeName,\n            challengeParameters: ChallengeParameters,\n        });\n    }\n    catch (error) {\n        cleanActiveSignInState();\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,aAAaA,CAACC,KAAK,EAAE;EACvC,MAAM;IAAEC,QAAQ;IAAEC;EAAQ,CAAE,GAAGF,KAAK;EACpC,MAAMG,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpD,MAAMC,aAAa,GAAG;IAClBC,OAAO,EAAER,QAAQ;IACjBS,YAAY,EAAE;EACtB,CAAK;EACDC,yBAAyB,CAACR,UAAU,CAAC;EACrC,MAAMS,cAAc,GAAGZ,KAAK,CAACa,OAAO,EAAEC,cAAc;EACpDC,qBAAqB,CAAC,CAAC,CAACd,QAAQ,EAAEe,uBAAuB,CAACC,mBAAmB,CAAC;EAC9EF,qBAAqB,CAAC,CAAC,CAACb,QAAQ,EAAEc,uBAAuB,CAACE,mBAAmB,CAAC;EAC9E,IAAI;IACA,MAAM;MAAEC,aAAa;MAAEC,mBAAmB;MAAEC,oBAAoB;MAAEC;IAAO,CAAG,GAAG,MAAMC,qBAAqB,CAACtB,QAAQ,EAAEC,QAAQ,EAAEU,cAAc,EAAET,UAAU,EAAEqB,iBAAiB,CAAC;IAC7K,MAAMC,cAAc,GAAGC,uBAAuB,CAACzB,QAAQ,CAAC;IAChE;IACQ0B,oBAAoB,CAAC;MACjBC,aAAa,EAAEN,OAAO;MACtBrB,QAAQ,EAAEwB,cAAc;MACxBI,aAAa,EAAEV,aAAa;MAC5BX;IACZ,CAAS,CAAC;IACF,IAAIa,oBAAoB,EAAE;MACtBS,sBAAsB,EAAE;MACxB,MAAMC,kBAAkB,CAAC;QACrB9B,QAAQ,EAAEwB,cAAc;QACxB,GAAGJ,oBAAoB;QACvBW,iBAAiB,EAAE,MAAMC,oBAAoB,CAAC9B,UAAU,CAAC+B,UAAU,EAAEb,oBAAoB,CAACW,iBAAiB,EAAEX,oBAAoB,CAACc,WAAW,CAAC;QAC9I3B;MAChB,CAAa,CAAC;MACF4B,GAAG,CAACC,QAAQ,CAAC,MAAM,EAAE;QACjBC,KAAK,EAAE,UAAU;QACjBC,IAAI,EAAE,MAAMC,cAAc;MAC1C,CAAa,EAAE,MAAM,EAAEC,cAAc,CAAC;MAC1B,OAAO;QACHC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAE;UAAEC,UAAU,EAAE;QAAM;MAC9C,CAAa;IACb;IACQ,OAAOC,eAAe,CAAC;MACnBhB,aAAa,EAAEV,aAAa;MAC5B2B,mBAAmB,EAAE1B;IACjC,CAAS,CAAC;EACV,CAAK,CACD,OAAO2B,KAAK,EAAE;IACVjB,sBAAsB,EAAE;IACxBkB,kBAAkB,CAACD,KAAK,CAAC;IACzB,MAAME,MAAM,GAAGC,wBAAwB,CAACH,KAAK,CAACI,IAAI,CAAC;IACnD,IAAIF,MAAM,EACN,OAAOA,MAAM;IACjB,MAAMF,KAAK;EACnB;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}