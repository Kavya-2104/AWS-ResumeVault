{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, AmplifyUrl, base64Encoder } from '@aws-amplify/core/internals/utils';\nimport BigInteger from './srp/BigInteger/BigInteger.mjs';\nimport { getAuthenticationHelper } from './srp/getAuthenticationHelper.mjs';\nimport { getBytesFromHex } from './srp/getBytesFromHex.mjs';\nimport { getNowString } from './srp/getNowString.mjs';\nimport { getSignatureString } from './srp/getSignatureString.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { InitiateAuthException } from '../types/errors.mjs';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { signInStore } from './signInStore.mjs';\nimport { respondToAuthChallenge, verifySoftwareToken, initiateAuth, associateSoftwareToken, confirmDevice } from './clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from './clients/CognitoIdentityProvider/utils.mjs';\nimport { USER_ALREADY_AUTHENTICATED_EXCEPTION } from '../../../errors/constants.mjs';\nimport { getCurrentUser } from '../apis/getCurrentUser.mjs';\nimport { assertDeviceMetadata } from './types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from './userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst USER_ATTRIBUTES = 'userAttributes.';\nasync function handleCustomChallenge({\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  config,\n  tokenOrchestrator\n}) {\n  const {\n    userPoolId,\n    userPoolClientId\n  } = config;\n  const challengeResponses = {\n    USERNAME: username,\n    ANSWER: challengeResponse\n  };\n  const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    challengeResponses['DEVICE_KEY'] = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'CUSTOM_CHALLENGE',\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const response = await respondToAuthChallenge({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') {\n    return handleDeviceSRPAuth({\n      username,\n      config,\n      clientMetadata,\n      session: response.Session,\n      tokenOrchestrator\n    });\n  }\n  return response;\n}\nasync function handleMFASetupChallenge({\n  challengeResponse,\n  username,\n  clientMetadata,\n  session,\n  deviceName,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId\n  } = config;\n  const challengeResponses = {\n    USERNAME: username\n  };\n  const {\n    Session\n  } = await verifySoftwareToken({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, {\n    UserCode: challengeResponse,\n    Session: session,\n    FriendlyDeviceName: deviceName\n  });\n  signInStore.dispatch({\n    type: 'SET_SIGN_IN_SESSION',\n    value: Session\n  });\n  const jsonReq = {\n    ChallengeName: 'MFA_SETUP',\n    ChallengeResponses: challengeResponses,\n    Session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId\n  };\n  return respondToAuthChallenge({\n    region: getRegion(userPoolId)\n  }, jsonReq);\n}\nasync function handleSelectMFATypeChallenge({\n  challengeResponse,\n  username,\n  clientMetadata,\n  session,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId\n  } = config;\n  assertValidationError(challengeResponse === 'TOTP' || challengeResponse === 'SMS', AuthValidationErrorCode.IncorrectMFAMethod);\n  const challengeResponses = {\n    USERNAME: username,\n    ANSWER: mapMfaType(challengeResponse)\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'SELECT_MFA_TYPE',\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  return respondToAuthChallenge({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nasync function handleSMSMFAChallenge({\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId\n  } = config;\n  const challengeResponses = {\n    USERNAME: username,\n    SMS_MFA_CODE: challengeResponse\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'SMS_MFA',\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  return respondToAuthChallenge({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nasync function handleSoftwareTokenMFAChallenge({\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId\n  } = config;\n  const challengeResponses = {\n    USERNAME: username,\n    SOFTWARE_TOKEN_MFA_CODE: challengeResponse\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'SOFTWARE_TOKEN_MFA',\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  return respondToAuthChallenge({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nasync function handleCompleteNewPasswordChallenge({\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  requiredAttributes,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId\n  } = config;\n  const challengeResponses = {\n    ...createAttributes(requiredAttributes),\n    NEW_PASSWORD: challengeResponse,\n    USERNAME: username\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'NEW_PASSWORD_REQUIRED',\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  return respondToAuthChallenge({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nasync function handleUserPasswordAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n  const {\n    userPoolClientId,\n    userPoolId\n  } = config;\n  const authParameters = {\n    USERNAME: username,\n    PASSWORD: password\n  };\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    authParameters['DEVICE_KEY'] = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'USER_PASSWORD_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const response = await initiateAuth({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? response.ChallengeParameters?.USER_ID_FOR_SRP ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') return handleDeviceSRPAuth({\n    username: activeUsername,\n    config,\n    clientMetadata,\n    session: response.Session,\n    tokenOrchestrator\n  });\n  return response;\n}\nasync function handleUserSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n  const {\n    userPoolId,\n    userPoolClientId\n  } = config;\n  const userPoolName = userPoolId?.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const authParameters = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16)\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'USER_SRP_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const resp = await initiateAuth({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const {\n    ChallengeParameters: challengeParameters,\n    Session: session\n  } = resp;\n  const activeUsername = challengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator], activeUsername, tokenOrchestrator);\n}\nasync function handleCustomAuthFlowWithoutSRP(username, clientMetadata, config, tokenOrchestrator) {\n  const {\n    userPoolClientId,\n    userPoolId\n  } = config;\n  const authParameters = {\n    USERNAME: username\n  };\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    authParameters['DEVICE_KEY'] = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'CUSTOM_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const response = await initiateAuth({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') return handleDeviceSRPAuth({\n    username: activeUsername,\n    config,\n    clientMetadata,\n    session: response.Session,\n    tokenOrchestrator\n  });\n  return response;\n}\nasync function handleCustomSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n  assertTokenProviderConfig(config);\n  const {\n    userPoolId,\n    userPoolClientId\n  } = config;\n  const userPoolName = userPoolId?.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const authParameters = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16),\n    CHALLENGE_NAME: 'SRP_A'\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'CUSTOM_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const {\n    ChallengeParameters: challengeParameters,\n    Session: session\n  } = await initiateAuth({\n    region: getRegion(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const activeUsername = challengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator], activeUsername, tokenOrchestrator);\n}\nasync function handleDeviceSRPAuth({\n  username,\n  config,\n  clientMetadata,\n  session,\n  tokenOrchestrator\n}) {\n  const userPoolId = config.userPoolId;\n  const clientId = config.userPoolClientId;\n  const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n  assertDeviceMetadata(deviceMetadata);\n  const authenticationHelper = await getAuthenticationHelper(deviceMetadata.deviceGroupKey);\n  const challengeResponses = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16),\n    DEVICE_KEY: deviceMetadata.deviceKey\n  };\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'DEVICE_SRP_AUTH',\n    ClientId: clientId,\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session\n  };\n  const {\n    ChallengeParameters,\n    Session\n  } = await respondToAuthChallenge({\n    region: getRegion(userPoolId)\n  }, jsonReqResponseChallenge);\n  return handleDevicePasswordVerifier(username, ChallengeParameters, clientMetadata, Session, authenticationHelper, config, tokenOrchestrator);\n}\nasync function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, {\n  userPoolId,\n  userPoolClientId\n}, tokenOrchestrator) {\n  const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n  assertDeviceMetadata(deviceMetadata);\n  const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n  const salt = new BigInteger(challengeParameters?.SALT, 16);\n  const deviceKey = deviceMetadata.deviceKey;\n  const deviceGroupKey = deviceMetadata.deviceGroupKey;\n  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n    username: deviceMetadata.deviceKey,\n    password: deviceMetadata.randomPassword,\n    serverBValue,\n    salt\n  });\n  const dateNow = getNowString();\n  const challengeResponses = {\n    USERNAME: challengeParameters?.USERNAME ?? username,\n    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n    TIMESTAMP: dateNow,\n    PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n      username: deviceKey,\n      userPoolName: deviceGroupKey,\n      challengeParameters,\n      dateNow,\n      hkdf\n    }),\n    DEVICE_KEY: deviceKey\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n    ClientId: userPoolClientId,\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    UserContextData\n  };\n  return respondToAuthChallenge({\n    region: getRegion(userPoolId)\n  }, jsonReqResponseChallenge);\n}\nasync function handlePasswordVerifierChallenge(password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator) {\n  const {\n    userPoolId,\n    userPoolClientId\n  } = config;\n  const userPoolName = userPoolId?.split('_')[1] || '';\n  const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n  const salt = new BigInteger(challengeParameters?.SALT, 16);\n  const username = challengeParameters?.USER_ID_FOR_SRP;\n  if (!username) throw new AuthError({\n    name: 'EmptyUserIdForSRPException',\n    message: 'USER_ID_FOR_SRP was not found in challengeParameters'\n  });\n  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n    username,\n    password,\n    serverBValue,\n    salt\n  });\n  const dateNow = getNowString();\n  const challengeResponses = {\n    USERNAME: username,\n    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n    TIMESTAMP: dateNow,\n    PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n      username,\n      userPoolName,\n      challengeParameters,\n      dateNow,\n      hkdf\n    })\n  };\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    challengeResponses['DEVICE_KEY'] = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'PASSWORD_VERIFIER',\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const response = await respondToAuthChallenge({\n    region: getRegion(userPoolId)\n  }, jsonReqResponseChallenge);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') return handleDeviceSRPAuth({\n    username,\n    config,\n    clientMetadata,\n    session: response.Session,\n    tokenOrchestrator\n  });\n  return response;\n}\nasync function getSignInResult(params) {\n  const {\n    challengeName,\n    challengeParameters\n  } = params;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  switch (challengeName) {\n    case 'CUSTOM_CHALLENGE':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE',\n          additionalInfo: challengeParameters\n        }\n      };\n    case 'MFA_SETUP':\n      const {\n        signInSession,\n        username\n      } = signInStore.getState();\n      if (!isMFATypeEnabled(challengeParameters, 'TOTP')) throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: `Cannot initiate MFA setup from available types: ${getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_SETUP))}`\n      });\n      const {\n        Session,\n        SecretCode: secretCode\n      } = await associateSoftwareToken({\n        region: getRegion(authConfig.userPoolId)\n      }, {\n        Session: signInSession\n      });\n      signInStore.dispatch({\n        type: 'SET_SIGN_IN_SESSION',\n        value: Session\n      });\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP',\n          totpSetupDetails: getTOTPSetupDetails(secretCode, username)\n        }\n      };\n    case 'NEW_PASSWORD_REQUIRED':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED',\n          missingAttributes: parseAttributes(challengeParameters.requiredAttributes)\n        }\n      };\n    case 'SELECT_MFA_TYPE':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SELECTION',\n          allowedMFATypes: getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_CHOOSE))\n        }\n      };\n    case 'SMS_MFA':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_SMS_CODE',\n          codeDeliveryDetails: {\n            deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n            destination: challengeParameters.CODE_DELIVERY_DESTINATION\n          }\n        }\n      };\n    case 'SOFTWARE_TOKEN_MFA':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_TOTP_CODE'\n        }\n      };\n  }\n  // TODO: remove this error message for production apps\n  throw new AuthError({\n    name: AuthErrorCodes.SignInException,\n    message: 'An error occurred during the sign in process. ' + `${challengeName} challengeName returned by the underlying service was not addressed.`\n  });\n}\nfunction getTOTPSetupDetails(secretCode, username) {\n  return {\n    sharedSecret: secretCode,\n    getSetupUri: (appName, accountName) => {\n      const totpUri = `otpauth://totp/${appName}:${accountName ?? username}?secret=${secretCode}&issuer=${appName}`;\n      return new AmplifyUrl(totpUri);\n    }\n  };\n}\nfunction getSignInResultFromError(errorName) {\n  if (errorName === InitiateAuthException.PasswordResetRequiredException) {\n    return {\n      isSignedIn: false,\n      nextStep: {\n        signInStep: 'RESET_PASSWORD'\n      }\n    };\n  } else if (errorName === InitiateAuthException.UserNotConfirmedException) {\n    return {\n      isSignedIn: false,\n      nextStep: {\n        signInStep: 'CONFIRM_SIGN_UP'\n      }\n    };\n  }\n}\nfunction parseAttributes(attributes) {\n  if (!attributes) return [];\n  const parsedAttributes = JSON.parse(attributes).map(att => att.includes(USER_ATTRIBUTES) ? att.replace(USER_ATTRIBUTES, '') : att);\n  return parsedAttributes;\n}\nfunction createAttributes(attributes) {\n  if (!attributes) return {};\n  const newAttributes = {};\n  Object.entries(attributes).forEach(([key, value]) => {\n    if (value) newAttributes[`${USER_ATTRIBUTES}${key}`] = value;\n  });\n  return newAttributes;\n}\nasync function handleChallengeName(username, challengeName, session, challengeResponse, config, tokenOrchestrator, clientMetadata, options) {\n  const userAttributes = options?.userAttributes;\n  const deviceName = options?.friendlyDeviceName;\n  switch (challengeName) {\n    case 'SMS_MFA':\n      return handleSMSMFAChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config\n      });\n    case 'SELECT_MFA_TYPE':\n      return handleSelectMFATypeChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config\n      });\n    case 'MFA_SETUP':\n      return handleMFASetupChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        deviceName,\n        config\n      });\n    case 'NEW_PASSWORD_REQUIRED':\n      return handleCompleteNewPasswordChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        requiredAttributes: userAttributes,\n        config\n      });\n    case 'CUSTOM_CHALLENGE':\n      return retryOnResourceNotFoundException(handleCustomChallenge, [{\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config,\n        tokenOrchestrator\n      }], username, tokenOrchestrator);\n    case 'SOFTWARE_TOKEN_MFA':\n      return handleSoftwareTokenMFAChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config\n      });\n  }\n  // TODO: remove this error message for production apps\n  throw new AuthError({\n    name: AuthErrorCodes.SignInException,\n    message: `An error occurred during the sign in process. \n\t\t${challengeName} challengeName returned by the underlying service was not addressed.`\n  });\n}\nfunction mapMfaType(mfa) {\n  let mfaType = 'SMS_MFA';\n  if (mfa === 'TOTP') mfaType = 'SOFTWARE_TOKEN_MFA';\n  return mfaType;\n}\nfunction getMFAType(type) {\n  if (type === 'SMS_MFA') return 'SMS';\n  if (type === 'SOFTWARE_TOKEN_MFA') return 'TOTP';\n  // TODO: log warning for unknown MFA type\n}\nfunction getMFATypes(types) {\n  if (!types) return undefined;\n  return types.map(getMFAType).filter(Boolean);\n}\nfunction parseMFATypes(mfa) {\n  if (!mfa) return [];\n  return JSON.parse(mfa);\n}\nfunction isMFATypeEnabled(challengeParams, mfaType) {\n  const {\n    MFAS_CAN_SETUP\n  } = challengeParams;\n  const mfaTypes = getMFATypes(parseMFATypes(MFAS_CAN_SETUP));\n  if (!mfaTypes) return false;\n  return mfaTypes.includes(mfaType);\n}\nasync function assertUserNotAuthenticated() {\n  let authUser;\n  try {\n    authUser = await getCurrentUser();\n  } catch (error) {}\n  if (authUser && authUser.userId && authUser.username) {\n    throw new AuthError({\n      name: USER_ALREADY_AUTHENTICATED_EXCEPTION,\n      message: 'There is already a signed in user.',\n      recoverySuggestion: 'Call signOut before calling signIn again.'\n    });\n  }\n}\n/**\n * This function is used to kick off the device management flow.\n *\n * If an error is thrown while generating a hash device or calling the `ConfirmDevice`\n * client, then this API will ignore the error and return undefined. Otherwise the authentication\n * flow will not complete and the user won't be able to be signed in.\n *\n * @returns DeviceMetadata | undefined\n */\nasync function getNewDeviceMetatada(userPoolId, newDeviceMetadata, accessToken) {\n  if (!newDeviceMetadata) return undefined;\n  const userPoolName = userPoolId.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const deviceKey = newDeviceMetadata?.DeviceKey;\n  const deviceGroupKey = newDeviceMetadata?.DeviceGroupKey;\n  try {\n    await authenticationHelper.generateHashDevice(deviceGroupKey ?? '', deviceKey ?? '');\n  } catch (errGenHash) {\n    // TODO: log error here\n    return undefined;\n  }\n  const deviceSecretVerifierConfig = {\n    Salt: base64Encoder.convert(getBytesFromHex(authenticationHelper.getSaltToHashDevices())),\n    PasswordVerifier: base64Encoder.convert(getBytesFromHex(authenticationHelper.getVerifierDevices()))\n  };\n  const randomPassword = authenticationHelper.getRandomPassword();\n  try {\n    await confirmDevice({\n      region: getRegion(userPoolId)\n    }, {\n      AccessToken: accessToken,\n      DeviceKey: newDeviceMetadata?.DeviceKey,\n      DeviceSecretVerifierConfig: deviceSecretVerifierConfig\n    });\n    return {\n      deviceKey,\n      deviceGroupKey,\n      randomPassword\n    };\n  } catch (error) {\n    // TODO: log error here\n    return undefined;\n  }\n}\n/**\n * It will retry the function if the error is a `ResourceNotFoundException` and\n * will clean the device keys stored in the storage mechanism.\n *\n */\nasync function retryOnResourceNotFoundException(func, args, username, tokenOrchestrator) {\n  try {\n    return await func(...args);\n  } catch (error) {\n    if (error instanceof AuthError && error.name === 'ResourceNotFoundException' && error.message.includes('Device does not exist.')) {\n      await tokenOrchestrator.clearDeviceMetadata(username);\n      return await func(...args);\n    }\n    throw error;\n  }\n}\nfunction setActiveSignInUsername(username) {\n  const {\n    dispatch\n  } = signInStore;\n  dispatch({\n    type: 'SET_USERNAME',\n    value: username\n  });\n}\nfunction getActiveSignInUsername(username) {\n  const state = signInStore.getState();\n  return state.username ?? username;\n}\nexport { assertUserNotAuthenticated, createAttributes, getActiveSignInUsername, getMFAType, getMFATypes, getNewDeviceMetatada, getSignInResult, getSignInResultFromError, getTOTPSetupDetails, handleChallengeName, handleCompleteNewPasswordChallenge, handleCustomAuthFlowWithoutSRP, handleCustomChallenge, handleCustomSRPAuthFlow, handleMFASetupChallenge, handlePasswordVerifierChallenge, handleSMSMFAChallenge, handleSelectMFATypeChallenge, handleSoftwareTokenMFAChallenge, handleUserPasswordAuthFlow, handleUserSRPAuthFlow, isMFATypeEnabled, mapMfaType, parseAttributes, parseMFATypes, retryOnResourceNotFoundException, setActiveSignInUsername };","map":{"version":3,"names":["USER_ATTRIBUTES","handleCustomChallenge","challengeResponse","clientMetadata","session","username","config","tokenOrchestrator","userPoolId","userPoolClientId","challengeResponses","USERNAME","ANSWER","deviceMetadata","getDeviceMetadata","deviceKey","UserContextData","getUserContextData","jsonReq","ChallengeName","ChallengeResponses","Session","ClientMetadata","ClientId","response","respondToAuthChallenge","region","getRegion","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmSignIn","handleDeviceSRPAuth","handleMFASetupChallenge","deviceName","verifySoftwareToken","UserCode","FriendlyDeviceName","signInStore","dispatch","type","value","handleSelectMFATypeChallenge","assertValidationError","AuthValidationErrorCode","IncorrectMFAMethod","mapMfaType","handleSMSMFAChallenge","SMS_MFA_CODE","handleSoftwareTokenMFAChallenge","SOFTWARE_TOKEN_MFA_CODE","handleCompleteNewPasswordChallenge","requiredAttributes","createAttributes","NEW_PASSWORD","handleUserPasswordAuthFlow","password","authParameters","PASSWORD","AuthFlow","AuthParameters","initiateAuth","SignIn","activeUsername","ChallengeParameters","USER_ID_FOR_SRP","setActiveSignInUsername","handleUserSRPAuthFlow","userPoolName","split","authenticationHelper","getAuthenticationHelper","SRP_A","A","toString","resp","challengeParameters","retryOnResourceNotFoundException","handlePasswordVerifierChallenge","handleCustomAuthFlowWithoutSRP","handleCustomSRPAuthFlow","assertTokenProviderConfig","CHALLENGE_NAME","clientId","assertDeviceMetadata","deviceGroupKey","DEVICE_KEY","jsonReqResponseChallenge","handleDevicePasswordVerifier","serverBValue","BigInteger","SRP_B","salt","SALT","hkdf","getPasswordAuthenticationKey","randomPassword","dateNow","getNowString","PASSWORD_CLAIM_SECRET_BLOCK","SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","getSignatureString","AuthError","name","message","getSignInResult","params","challengeName","authConfig","Amplify","getConfig","Auth","Cognito","isSignedIn","nextStep","signInStep","additionalInfo","signInSession","getState","isMFATypeEnabled","AuthErrorCodes","SignInException","getMFATypes","parseMFATypes","MFAS_CAN_SETUP","SecretCode","secretCode","associateSoftwareToken","totpSetupDetails","getTOTPSetupDetails","missingAttributes","parseAttributes","allowedMFATypes","MFAS_CAN_CHOOSE","codeDeliveryDetails","deliveryMedium","CODE_DELIVERY_DELIVERY_MEDIUM","destination","CODE_DELIVERY_DESTINATION","sharedSecret","getSetupUri","appName","accountName","totpUri","AmplifyUrl","getSignInResultFromError","errorName","InitiateAuthException","PasswordResetRequiredException","UserNotConfirmedException","attributes","parsedAttributes","JSON","parse","map","att","includes","replace","newAttributes","Object","entries","forEach","key","handleChallengeName","options","userAttributes","friendlyDeviceName","mfa","mfaType","getMFAType","types","undefined","filter","Boolean","challengeParams","mfaTypes","assertUserNotAuthenticated","authUser","getCurrentUser","error","userId","USER_ALREADY_AUTHENTICATED_EXCEPTION","recoverySuggestion","getNewDeviceMetatada","newDeviceMetadata","accessToken","DeviceKey","DeviceGroupKey","generateHashDevice","errGenHash","deviceSecretVerifierConfig","Salt","base64Encoder","convert","getBytesFromHex","getSaltToHashDevices","PasswordVerifier","getVerifierDevices","getRandomPassword","confirmDevice","AccessToken","DeviceSecretVerifierConfig","func","args","clearDeviceMetadata","getActiveSignInUsername","state"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\utils\\signInHelpers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, base64Encoder, AmplifyUrl, } from '@aws-amplify/core/internals/utils';\nimport { BigInteger } from './srp/BigInteger';\nimport { getAuthenticationHelper, getBytesFromHex, getNowString, getSignatureString, } from './srp';\nimport { AuthError } from '../../../errors/AuthError';\nimport { InitiateAuthException } from '../types/errors';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { signInStore } from './signInStore';\nimport { initiateAuth, respondToAuthChallenge, verifySoftwareToken, associateSoftwareToken, confirmDevice, } from './clients/CognitoIdentityProvider';\nimport { getRegion } from './clients/CognitoIdentityProvider/utils';\nimport { USER_ALREADY_AUTHENTICATED_EXCEPTION } from '../../../errors/constants';\nimport { getCurrentUser } from '../apis/getCurrentUser';\nimport { assertDeviceMetadata } from './types';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from './userContextData';\nconst USER_ATTRIBUTES = 'userAttributes.';\nexport async function handleCustomChallenge({ challengeResponse, clientMetadata, session, username, config, tokenOrchestrator, }) {\n    const { userPoolId, userPoolClientId } = config;\n    const challengeResponses = {\n        USERNAME: username,\n        ANSWER: challengeResponse,\n    };\n    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        challengeResponses['DEVICE_KEY'] = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'CUSTOM_CHALLENGE',\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const response = await respondToAuthChallenge({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH') {\n        return handleDeviceSRPAuth({\n            username,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    }\n    return response;\n}\nexport async function handleMFASetupChallenge({ challengeResponse, username, clientMetadata, session, deviceName, config, }) {\n    const { userPoolId, userPoolClientId } = config;\n    const challengeResponses = {\n        USERNAME: username,\n    };\n    const { Session } = await verifySoftwareToken({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, {\n        UserCode: challengeResponse,\n        Session: session,\n        FriendlyDeviceName: deviceName,\n    });\n    signInStore.dispatch({\n        type: 'SET_SIGN_IN_SESSION',\n        value: Session,\n    });\n    const jsonReq = {\n        ChallengeName: 'MFA_SETUP',\n        ChallengeResponses: challengeResponses,\n        Session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n    };\n    return respondToAuthChallenge({ region: getRegion(userPoolId) }, jsonReq);\n}\nexport async function handleSelectMFATypeChallenge({ challengeResponse, username, clientMetadata, session, config, }) {\n    const { userPoolId, userPoolClientId } = config;\n    assertValidationError(challengeResponse === 'TOTP' || challengeResponse === 'SMS', AuthValidationErrorCode.IncorrectMFAMethod);\n    const challengeResponses = {\n        USERNAME: username,\n        ANSWER: mapMfaType(challengeResponse),\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'SELECT_MFA_TYPE',\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    return respondToAuthChallenge({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\nexport async function handleSMSMFAChallenge({ challengeResponse, clientMetadata, session, username, config, }) {\n    const { userPoolId, userPoolClientId } = config;\n    const challengeResponses = {\n        USERNAME: username,\n        SMS_MFA_CODE: challengeResponse,\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'SMS_MFA',\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    return respondToAuthChallenge({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\nexport async function handleSoftwareTokenMFAChallenge({ challengeResponse, clientMetadata, session, username, config, }) {\n    const { userPoolId, userPoolClientId } = config;\n    const challengeResponses = {\n        USERNAME: username,\n        SOFTWARE_TOKEN_MFA_CODE: challengeResponse,\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'SOFTWARE_TOKEN_MFA',\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    return respondToAuthChallenge({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\nexport async function handleCompleteNewPasswordChallenge({ challengeResponse, clientMetadata, session, username, requiredAttributes, config, }) {\n    const { userPoolId, userPoolClientId } = config;\n    const challengeResponses = {\n        ...createAttributes(requiredAttributes),\n        NEW_PASSWORD: challengeResponse,\n        USERNAME: username,\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'NEW_PASSWORD_REQUIRED',\n        ChallengeResponses: challengeResponses,\n        ClientMetadata: clientMetadata,\n        Session: session,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    return respondToAuthChallenge({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\nexport async function handleUserPasswordAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n    const { userPoolClientId, userPoolId } = config;\n    const authParameters = {\n        USERNAME: username,\n        PASSWORD: password,\n    };\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        authParameters['DEVICE_KEY'] = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'USER_PASSWORD_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const response = await initiateAuth({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const activeUsername = response.ChallengeParameters?.USERNAME ??\n        response.ChallengeParameters?.USER_ID_FOR_SRP ??\n        username;\n    setActiveSignInUsername(activeUsername);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH')\n        return handleDeviceSRPAuth({\n            username: activeUsername,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    return response;\n}\nexport async function handleUserSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n    const { userPoolId, userPoolClientId } = config;\n    const userPoolName = userPoolId?.split('_')[1] || '';\n    const authenticationHelper = await getAuthenticationHelper(userPoolName);\n    const authParameters = {\n        USERNAME: username,\n        SRP_A: authenticationHelper.A.toString(16),\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'USER_SRP_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const resp = await initiateAuth({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const { ChallengeParameters: challengeParameters, Session: session } = resp;\n    const activeUsername = challengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [\n        password,\n        challengeParameters,\n        clientMetadata,\n        session,\n        authenticationHelper,\n        config,\n        tokenOrchestrator,\n    ], activeUsername, tokenOrchestrator);\n}\nexport async function handleCustomAuthFlowWithoutSRP(username, clientMetadata, config, tokenOrchestrator) {\n    const { userPoolClientId, userPoolId } = config;\n    const { dispatch } = signInStore;\n    const authParameters = {\n        USERNAME: username,\n    };\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        authParameters['DEVICE_KEY'] = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'CUSTOM_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const response = await initiateAuth({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH')\n        return handleDeviceSRPAuth({\n            username: activeUsername,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    return response;\n}\nexport async function handleCustomSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n    assertTokenProviderConfig(config);\n    const { userPoolId, userPoolClientId } = config;\n    const userPoolName = userPoolId?.split('_')[1] || '';\n    const authenticationHelper = await getAuthenticationHelper(userPoolName);\n    const authParameters = {\n        USERNAME: username,\n        SRP_A: authenticationHelper.A.toString(16),\n        CHALLENGE_NAME: 'SRP_A',\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'CUSTOM_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const { ChallengeParameters: challengeParameters, Session: session } = await initiateAuth({\n        region: getRegion(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const activeUsername = challengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [\n        password,\n        challengeParameters,\n        clientMetadata,\n        session,\n        authenticationHelper,\n        config,\n        tokenOrchestrator,\n    ], activeUsername, tokenOrchestrator);\n}\nasync function handleDeviceSRPAuth({ username, config, clientMetadata, session, tokenOrchestrator, }) {\n    const userPoolId = config.userPoolId;\n    const clientId = config.userPoolClientId;\n    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n    assertDeviceMetadata(deviceMetadata);\n    const authenticationHelper = await getAuthenticationHelper(deviceMetadata.deviceGroupKey);\n    const challengeResponses = {\n        USERNAME: username,\n        SRP_A: authenticationHelper.A.toString(16),\n        DEVICE_KEY: deviceMetadata.deviceKey,\n    };\n    const jsonReqResponseChallenge = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: clientId,\n        ChallengeResponses: challengeResponses,\n        ClientMetadata: clientMetadata,\n        Session: session,\n    };\n    const { ChallengeParameters, Session } = await respondToAuthChallenge({ region: getRegion(userPoolId) }, jsonReqResponseChallenge);\n    return handleDevicePasswordVerifier(username, ChallengeParameters, clientMetadata, Session, authenticationHelper, config, tokenOrchestrator);\n}\nasync function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, { userPoolId, userPoolClientId }, tokenOrchestrator) {\n    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n    assertDeviceMetadata(deviceMetadata);\n    const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n    const salt = new BigInteger(challengeParameters?.SALT, 16);\n    const deviceKey = deviceMetadata.deviceKey;\n    const deviceGroupKey = deviceMetadata.deviceGroupKey;\n    const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n        username: deviceMetadata.deviceKey,\n        password: deviceMetadata.randomPassword,\n        serverBValue,\n        salt,\n    });\n    const dateNow = getNowString();\n    const challengeResponses = {\n        USERNAME: challengeParameters?.USERNAME ?? username,\n        PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n        TIMESTAMP: dateNow,\n        PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n            username: deviceKey,\n            userPoolName: deviceGroupKey,\n            challengeParameters,\n            dateNow,\n            hkdf,\n        }),\n        DEVICE_KEY: deviceKey,\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReqResponseChallenge = {\n        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n        ClientId: userPoolClientId,\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        UserContextData,\n    };\n    return respondToAuthChallenge({ region: getRegion(userPoolId) }, jsonReqResponseChallenge);\n}\nexport async function handlePasswordVerifierChallenge(password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator) {\n    const { userPoolId, userPoolClientId } = config;\n    const userPoolName = userPoolId?.split('_')[1] || '';\n    const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n    const salt = new BigInteger(challengeParameters?.SALT, 16);\n    const username = challengeParameters?.USER_ID_FOR_SRP;\n    if (!username)\n        throw new AuthError({\n            name: 'EmptyUserIdForSRPException',\n            message: 'USER_ID_FOR_SRP was not found in challengeParameters',\n        });\n    const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n        username,\n        password,\n        serverBValue,\n        salt,\n    });\n    const dateNow = getNowString();\n    const challengeResponses = {\n        USERNAME: username,\n        PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n        TIMESTAMP: dateNow,\n        PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n            username,\n            userPoolName,\n            challengeParameters,\n            dateNow,\n            hkdf,\n        }),\n    };\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        challengeResponses['DEVICE_KEY'] = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReqResponseChallenge = {\n        ChallengeName: 'PASSWORD_VERIFIER',\n        ChallengeResponses: challengeResponses,\n        ClientMetadata: clientMetadata,\n        Session: session,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const response = await respondToAuthChallenge({ region: getRegion(userPoolId) }, jsonReqResponseChallenge);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH')\n        return handleDeviceSRPAuth({\n            username,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    return response;\n}\nexport async function getSignInResult(params) {\n    const { challengeName, challengeParameters } = params;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    switch (challengeName) {\n        case 'CUSTOM_CHALLENGE':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE',\n                    additionalInfo: challengeParameters,\n                },\n            };\n        case 'MFA_SETUP':\n            const { signInSession, username } = signInStore.getState();\n            if (!isMFATypeEnabled(challengeParameters, 'TOTP'))\n                throw new AuthError({\n                    name: AuthErrorCodes.SignInException,\n                    message: `Cannot initiate MFA setup from available types: ${getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_SETUP))}`,\n                });\n            const { Session, SecretCode: secretCode } = await associateSoftwareToken({ region: getRegion(authConfig.userPoolId) }, {\n                Session: signInSession,\n            });\n            signInStore.dispatch({\n                type: 'SET_SIGN_IN_SESSION',\n                value: Session,\n            });\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP',\n                    totpSetupDetails: getTOTPSetupDetails(secretCode, username),\n                },\n            };\n        case 'NEW_PASSWORD_REQUIRED':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED',\n                    missingAttributes: parseAttributes(challengeParameters.requiredAttributes),\n                },\n            };\n        case 'SELECT_MFA_TYPE':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SELECTION',\n                    allowedMFATypes: getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_CHOOSE)),\n                },\n            };\n        case 'SMS_MFA':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_SMS_CODE',\n                    codeDeliveryDetails: {\n                        deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n                        destination: challengeParameters.CODE_DELIVERY_DESTINATION,\n                    },\n                },\n            };\n        case 'SOFTWARE_TOKEN_MFA':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_TOTP_CODE',\n                },\n            };\n        case 'ADMIN_NO_SRP_AUTH':\n            break;\n        case 'DEVICE_PASSWORD_VERIFIER':\n            break;\n        case 'DEVICE_SRP_AUTH':\n            break;\n        case 'PASSWORD_VERIFIER':\n            break;\n    }\n    // TODO: remove this error message for production apps\n    throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: 'An error occurred during the sign in process. ' +\n            `${challengeName} challengeName returned by the underlying service was not addressed.`,\n    });\n}\nexport function getTOTPSetupDetails(secretCode, username) {\n    return {\n        sharedSecret: secretCode,\n        getSetupUri: (appName, accountName) => {\n            const totpUri = `otpauth://totp/${appName}:${accountName ?? username}?secret=${secretCode}&issuer=${appName}`;\n            return new AmplifyUrl(totpUri);\n        },\n    };\n}\nexport function getSignInResultFromError(errorName) {\n    if (errorName === InitiateAuthException.PasswordResetRequiredException) {\n        return {\n            isSignedIn: false,\n            nextStep: { signInStep: 'RESET_PASSWORD' },\n        };\n    }\n    else if (errorName === InitiateAuthException.UserNotConfirmedException) {\n        return {\n            isSignedIn: false,\n            nextStep: { signInStep: 'CONFIRM_SIGN_UP' },\n        };\n    }\n}\nexport function parseAttributes(attributes) {\n    if (!attributes)\n        return [];\n    const parsedAttributes = JSON.parse(attributes).map(att => att.includes(USER_ATTRIBUTES) ? att.replace(USER_ATTRIBUTES, '') : att);\n    return parsedAttributes;\n}\nexport function createAttributes(attributes) {\n    if (!attributes)\n        return {};\n    const newAttributes = {};\n    Object.entries(attributes).forEach(([key, value]) => {\n        if (value)\n            newAttributes[`${USER_ATTRIBUTES}${key}`] = value;\n    });\n    return newAttributes;\n}\nexport async function handleChallengeName(username, challengeName, session, challengeResponse, config, tokenOrchestrator, clientMetadata, options) {\n    const userAttributes = options?.userAttributes;\n    const deviceName = options?.friendlyDeviceName;\n    switch (challengeName) {\n        case 'SMS_MFA':\n            return handleSMSMFAChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                config,\n            });\n        case 'SELECT_MFA_TYPE':\n            return handleSelectMFATypeChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                config,\n            });\n        case 'MFA_SETUP':\n            return handleMFASetupChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                deviceName,\n                config,\n            });\n        case 'NEW_PASSWORD_REQUIRED':\n            return handleCompleteNewPasswordChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                requiredAttributes: userAttributes,\n                config,\n            });\n        case 'CUSTOM_CHALLENGE':\n            return retryOnResourceNotFoundException(handleCustomChallenge, [\n                {\n                    challengeResponse,\n                    clientMetadata,\n                    session,\n                    username,\n                    config,\n                    tokenOrchestrator,\n                },\n            ], username, tokenOrchestrator);\n        case 'SOFTWARE_TOKEN_MFA':\n            return handleSoftwareTokenMFAChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                config,\n            });\n    }\n    // TODO: remove this error message for production apps\n    throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: `An error occurred during the sign in process. \n\t\t${challengeName} challengeName returned by the underlying service was not addressed.`,\n    });\n}\nexport function mapMfaType(mfa) {\n    let mfaType = 'SMS_MFA';\n    if (mfa === 'TOTP')\n        mfaType = 'SOFTWARE_TOKEN_MFA';\n    return mfaType;\n}\nexport function getMFAType(type) {\n    if (type === 'SMS_MFA')\n        return 'SMS';\n    if (type === 'SOFTWARE_TOKEN_MFA')\n        return 'TOTP';\n    // TODO: log warning for unknown MFA type\n}\nexport function getMFATypes(types) {\n    if (!types)\n        return undefined;\n    return types.map(getMFAType).filter(Boolean);\n}\nexport function parseMFATypes(mfa) {\n    if (!mfa)\n        return [];\n    return JSON.parse(mfa);\n}\nexport function isMFATypeEnabled(challengeParams, mfaType) {\n    const { MFAS_CAN_SETUP } = challengeParams;\n    const mfaTypes = getMFATypes(parseMFATypes(MFAS_CAN_SETUP));\n    if (!mfaTypes)\n        return false;\n    return mfaTypes.includes(mfaType);\n}\nexport async function assertUserNotAuthenticated() {\n    let authUser;\n    try {\n        authUser = await getCurrentUser();\n    }\n    catch (error) { }\n    if (authUser && authUser.userId && authUser.username) {\n        throw new AuthError({\n            name: USER_ALREADY_AUTHENTICATED_EXCEPTION,\n            message: 'There is already a signed in user.',\n            recoverySuggestion: 'Call signOut before calling signIn again.',\n        });\n    }\n}\n/**\n * This function is used to kick off the device management flow.\n *\n * If an error is thrown while generating a hash device or calling the `ConfirmDevice`\n * client, then this API will ignore the error and return undefined. Otherwise the authentication\n * flow will not complete and the user won't be able to be signed in.\n *\n * @returns DeviceMetadata | undefined\n */\nexport async function getNewDeviceMetatada(userPoolId, newDeviceMetadata, accessToken) {\n    if (!newDeviceMetadata)\n        return undefined;\n    const userPoolName = userPoolId.split('_')[1] || '';\n    const authenticationHelper = await getAuthenticationHelper(userPoolName);\n    const deviceKey = newDeviceMetadata?.DeviceKey;\n    const deviceGroupKey = newDeviceMetadata?.DeviceGroupKey;\n    try {\n        await authenticationHelper.generateHashDevice(deviceGroupKey ?? '', deviceKey ?? '');\n    }\n    catch (errGenHash) {\n        // TODO: log error here\n        return undefined;\n    }\n    const deviceSecretVerifierConfig = {\n        Salt: base64Encoder.convert(getBytesFromHex(authenticationHelper.getSaltToHashDevices())),\n        PasswordVerifier: base64Encoder.convert(getBytesFromHex(authenticationHelper.getVerifierDevices())),\n    };\n    const randomPassword = authenticationHelper.getRandomPassword();\n    try {\n        await confirmDevice({ region: getRegion(userPoolId) }, {\n            AccessToken: accessToken,\n            DeviceKey: newDeviceMetadata?.DeviceKey,\n            DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        });\n        return {\n            deviceKey,\n            deviceGroupKey,\n            randomPassword,\n        };\n    }\n    catch (error) {\n        // TODO: log error here\n        return undefined;\n    }\n}\n/**\n * It will retry the function if the error is a `ResourceNotFoundException` and\n * will clean the device keys stored in the storage mechanism.\n *\n */\nexport async function retryOnResourceNotFoundException(func, args, username, tokenOrchestrator) {\n    try {\n        return await func(...args);\n    }\n    catch (error) {\n        if (error instanceof AuthError &&\n            error.name === 'ResourceNotFoundException' &&\n            error.message.includes('Device does not exist.')) {\n            await tokenOrchestrator.clearDeviceMetadata(username);\n            return await func(...args);\n        }\n        throw error;\n    }\n}\nexport function setActiveSignInUsername(username) {\n    const { dispatch } = signInStore;\n    dispatch({ type: 'SET_USERNAME', value: username });\n}\nexport function getActiveSignInUsername(username) {\n    const state = signInStore.getState();\n    return state.username ?? username;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}