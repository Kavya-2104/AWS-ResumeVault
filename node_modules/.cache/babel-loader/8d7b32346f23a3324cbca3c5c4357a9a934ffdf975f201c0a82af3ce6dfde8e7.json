{"ast":null,"code":"import '../../utils/getClientInfo/getClientInfo.mjs';\nimport '../../utils/retry/retry.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { parseMetadata } from '../../clients/serde/responseInfo.mjs';\nimport { parseJsonError, parseJsonBody } from '../../clients/serde/json.mjs';\nimport { composeServiceApi } from '../../clients/internal/composeServiceApi.mjs';\nimport { defaultConfig, cognitoIdentityTransferHandler, buildHttpRpcRequest, getSharedHeaders } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getIdSerializer = (input, endpoint) => {\n  const headers = getSharedHeaders('GetId');\n  const body = JSON.stringify(input);\n  return buildHttpRpcRequest(endpoint, headers, body);\n};\nconst getIdDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    throw error;\n  } else {\n    const body = await parseJsonBody(response);\n    return {\n      IdentityId: body.IdentityId,\n      $metadata: parseMetadata(response)\n    };\n  }\n};\n/**\n * @internal\n */\nconst getId = composeServiceApi(cognitoIdentityTransferHandler, getIdSerializer, getIdDeserializer, defaultConfig);\nexport { getId };","map":{"version":3,"names":["getIdSerializer","input","endpoint","headers","getSharedHeaders","body","JSON","stringify","buildHttpRpcRequest","getIdDeserializer","response","statusCode","error","parseJsonError","parseJsonBody","IdentityId","$metadata","parseMetadata","getId","composeServiceApi","cognitoIdentityTransferHandler","defaultConfig"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\awsClients\\cognitoIdentity\\getId.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseJsonBody, parseJsonError, parseMetadata, } from '../../clients';\nimport { composeServiceApi } from '../../clients/internal';\nimport { buildHttpRpcRequest, cognitoIdentityTransferHandler, defaultConfig, getSharedHeaders, } from './base';\nconst getIdSerializer = (input, endpoint) => {\n    const headers = getSharedHeaders('GetId');\n    const body = JSON.stringify(input);\n    return buildHttpRpcRequest(endpoint, headers, body);\n};\nconst getIdDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = await parseJsonError(response);\n        throw error;\n    }\n    else {\n        const body = await parseJsonBody(response);\n        return {\n            IdentityId: body.IdentityId,\n            $metadata: parseMetadata(response),\n        };\n    }\n};\n/**\n * @internal\n */\nexport const getId = composeServiceApi(cognitoIdentityTransferHandler, getIdSerializer, getIdDeserializer, defaultConfig);\n"],"mappings":";;;;;;;;;AAAA;AACA;AAIA,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACzC,MAAMC,OAAO,GAAGC,gBAAgB,CAAC,OAAO,CAAC;EACzC,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;EAClC,OAAOO,mBAAmB,CAACN,QAAQ,EAAEC,OAAO,EAAEE,IAAI,CAAC;AACvD,CAAC;AACD,MAAMI,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAG,MAAMC,cAAc,CAACH,QAAQ,CAAC;IAC5C,MAAME,KAAK;EACnB,CAAK,MACI;IACD,MAAMP,IAAI,GAAG,MAAMS,aAAa,CAACJ,QAAQ,CAAC;IAC1C,OAAO;MACHK,UAAU,EAAEV,IAAI,CAACU,UAAU;MAC3BC,SAAS,EAAEC,aAAa,CAACP,QAAQ;IAC7C,CAAS;EACT;AACA,CAAC;AACD;AACA;AACA;AACY,MAACQ,KAAK,GAAGC,iBAAiB,CAACC,8BAA8B,EAAEpB,eAAe,EAAES,iBAAiB,EAAEY,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}