{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { defaultConfig } from './base.mjs';\nimport { parseXmlError } from './utils/parsePayload.mjs';\nimport { s3TransferHandler } from './runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport './runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError } from './utils/deserializeHelpers.mjs';\nimport { validateS3RequiredParameter, serializePathnameObjectKey } from './utils/serializeHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst abortMultipartUploadSerializer = (input, endpoint) => {\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n  url.search = new AmplifyUrlSearchParams({\n    uploadId: input.UploadId\n  }).toString();\n  return {\n    method: 'DELETE',\n    headers: {},\n    url\n  };\n};\nconst abortMultipartUploadDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseXmlError(response);\n    throw buildStorageServiceError(error, response.statusCode);\n  } else {\n    return {\n      $metadata: parseMetadata(response)\n    };\n  }\n};\nconst abortMultipartUpload = composeServiceApi(s3TransferHandler, abortMultipartUploadSerializer, abortMultipartUploadDeserializer, {\n  ...defaultConfig,\n  responseType: 'text'\n});\nexport { abortMultipartUpload };","map":{"version":3,"names":["abortMultipartUploadSerializer","input","endpoint","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","UploadId","search","AmplifyUrlSearchParams","uploadId","method","headers","abortMultipartUploadDeserializer","response","statusCode","error","parseXmlError","buildStorageServiceError","$metadata","parseMetadata","abortMultipartUpload","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\abortMultipartUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { defaultConfig } from './base';\nimport { buildStorageServiceError, parseXmlError, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from './utils';\nconst abortMultipartUploadSerializer = (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        uploadId: input.UploadId,\n    }).toString();\n    return {\n        method: 'DELETE',\n        headers: {},\n        url,\n    };\n};\nconst abortMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = (await parseXmlError(response));\n        throw buildStorageServiceError(error, response.statusCode);\n    }\n    else {\n        return {\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const abortMultipartUpload = composeServiceApi(s3TransferHandler, abortMultipartUploadSerializer, abortMultipartUploadDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAMA,MAAMA,8BAA8B,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACxD,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACF,QAAQ,CAACC,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACL,KAAK,CAACM,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEF,KAAK,CAACM,GAAG,CAAC;EACzDD,2BAA2B,CAAC,CAAC,CAACL,KAAK,CAACS,QAAQ,EAAE,UAAU,CAAC;EACzDP,GAAG,CAACQ,MAAM,GAAG,IAAIC,sBAAsB,CAAC;IACpCC,QAAQ,EAAEZ,KAAK,CAACS;EACxB,CAAK,CAAC,CAACL,QAAQ,EAAE;EACb,OAAO;IACHS,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE,EAAE;IACXZ;EACR,CAAK;AACL,CAAC;AACD,MAAMa,gCAAgC,GAAG,MAAOC,QAAQ,IAAK;EACzD,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAI,MAAMC,aAAa,CAACH,QAAQ,CAAE;IAC7C,MAAMI,wBAAwB,CAACF,KAAK,EAAEF,QAAQ,CAACC,UAAU,CAAC;EAClE,CAAK,MACI;IACD,OAAO;MACHI,SAAS,EAAEC,aAAa,CAACN,QAAQ;IAC7C,CAAS;EACT;AACA,CAAC;AACW,MAACO,oBAAoB,GAAGC,iBAAiB,CAACC,iBAAiB,EAAE1B,8BAA8B,EAAEgB,gCAAgC,EAAE;EAAE,GAAGW,aAAa;EAAEC,YAAY,EAAE;AAAM,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}