{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base.mjs';\nimport { parseXmlError, parseXmlBody } from './utils/parsePayload.mjs';\nimport { s3TransferHandler } from './runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport './runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map } from './utils/deserializeHelpers.mjs';\nimport { serializeObjectConfigsToHeaders, validateS3RequiredParameter, serializePathnameObjectKey } from './utils/serializeHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createMultipartUploadSerializer = async (input, endpoint) => {\n  const headers = await serializeObjectConfigsToHeaders(input);\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  url.search = 'uploads';\n  return {\n    method: 'POST',\n    headers,\n    url\n  };\n};\nconst createMultipartUploadDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseXmlError(response);\n    throw buildStorageServiceError(error, response.statusCode);\n  } else {\n    const parsed = await parseXmlBody(response);\n    const contents = map(parsed, {\n      UploadId: 'UploadId'\n    });\n    return {\n      $metadata: parseMetadata(response),\n      ...contents\n    };\n  }\n};\nconst createMultipartUpload = composeServiceApi(s3TransferHandler, createMultipartUploadSerializer, createMultipartUploadDeserializer, {\n  ...defaultConfig,\n  responseType: 'text'\n});\nexport { createMultipartUpload };","map":{"version":3,"names":["createMultipartUploadSerializer","input","endpoint","headers","serializeObjectConfigsToHeaders","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","search","method","createMultipartUploadDeserializer","response","statusCode","error","parseXmlError","buildStorageServiceError","parsed","parseXmlBody","contents","map","UploadId","$metadata","parseMetadata","createMultipartUpload","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\createMultipartUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base';\nimport { buildStorageServiceError, map, parseXmlBody, parseXmlError, s3TransferHandler, serializeObjectConfigsToHeaders, serializePathnameObjectKey, validateS3RequiredParameter, } from './utils';\nconst createMultipartUploadSerializer = async (input, endpoint) => {\n    const headers = await serializeObjectConfigsToHeaders(input);\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = 'uploads';\n    return {\n        method: 'POST',\n        headers,\n        url,\n    };\n};\nconst createMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = (await parseXmlError(response));\n        throw buildStorageServiceError(error, response.statusCode);\n    }\n    else {\n        const parsed = await parseXmlBody(response);\n        const contents = map(parsed, {\n            UploadId: 'UploadId',\n        });\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\nexport const createMultipartUpload = composeServiceApi(s3TransferHandler, createMultipartUploadSerializer, createMultipartUploadDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAMA,MAAMA,+BAA+B,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC/D,MAAMC,OAAO,GAAG,MAAMC,+BAA+B,CAACH,KAAK,CAAC;EAC5D,MAAMI,GAAG,GAAG,IAAIC,UAAU,CAACJ,QAAQ,CAACG,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACP,KAAK,CAACQ,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEJ,KAAK,CAACQ,GAAG,CAAC;EACzDJ,GAAG,CAACO,MAAM,GAAG,SAAS;EACtB,OAAO;IACHC,MAAM,EAAE,MAAM;IACdV,OAAO;IACPE;EACR,CAAK;AACL,CAAC;AACD,MAAMS,iCAAiC,GAAG,MAAOC,QAAQ,IAAK;EAC1D,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAI,MAAMC,aAAa,CAACH,QAAQ,CAAE;IAC7C,MAAMI,wBAAwB,CAACF,KAAK,EAAEF,QAAQ,CAACC,UAAU,CAAC;EAClE,CAAK,MACI;IACD,MAAMI,MAAM,GAAG,MAAMC,YAAY,CAACN,QAAQ,CAAC;IAC3C,MAAMO,QAAQ,GAAGC,GAAG,CAACH,MAAM,EAAE;MACzBI,QAAQ,EAAE;IACtB,CAAS,CAAC;IACF,OAAO;MACHC,SAAS,EAAEC,aAAa,CAACX,QAAQ,CAAC;MAClC,GAAGO;IACf,CAAS;EACT;AACA,CAAC;AACW,MAACK,qBAAqB,GAAGC,iBAAiB,CAACC,iBAAiB,EAAE7B,+BAA+B,EAAEc,iCAAiC,EAAE;EAAE,GAAGgB,aAAa;EAAEC,YAAY,EAAE;AAAM,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}