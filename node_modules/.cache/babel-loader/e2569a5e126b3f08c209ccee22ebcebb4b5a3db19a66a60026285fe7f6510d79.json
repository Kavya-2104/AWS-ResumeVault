{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { confirmForgotPassword } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmResetPassword(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolClientId,\n    userPoolId\n  } = authConfig;\n  const {\n    username,\n    newPassword\n  } = input;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n  assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n  const code = input.confirmationCode;\n  assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n  const metadata = input.options?.clientMetadata;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  await confirmForgotPassword({\n    region: getRegion(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword)\n  }, {\n    Username: username,\n    ConfirmationCode: code,\n    Password: newPassword,\n    ClientMetadata: metadata,\n    ClientId: authConfig.userPoolClientId,\n    UserContextData: UserContextData\n  });\n}\nexport { confirmResetPassword };","map":{"version":3,"names":["confirmResetPassword","input","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","username","newPassword","assertValidationError","AuthValidationErrorCode","EmptyConfirmResetPasswordUsername","EmptyConfirmResetPasswordNewPassword","code","confirmationCode","EmptyConfirmResetPasswordConfirmationCode","metadata","options","clientMetadata","UserContextData","getUserContextData","confirmForgotPassword","region","getRegion","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmResetPassword","Username","ConfirmationCode","Password","ClientMetadata","ClientId"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\confirmResetPassword.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { confirmForgotPassword } from '../utils/clients/CognitoIdentityProvider';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmResetPassword(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId } = authConfig;\n    const { username, newPassword } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n    assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n    const code = input.confirmationCode;\n    assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n    const metadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    await confirmForgotPassword({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword),\n    }, {\n        Username: username,\n        ConfirmationCode: code,\n        Password: newPassword,\n        ClientMetadata: metadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData: UserContextData,\n    });\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,oBAAoBA,CAACC,KAAK,EAAE;EAC9C,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC;EAAU,CAAE,GAAGP,UAAU;EACnD,MAAM;IAAEQ,QAAQ;IAAEC;EAAW,CAAE,GAAGV,KAAK;EACvCW,qBAAqB,CAAC,CAAC,CAACF,QAAQ,EAAEG,uBAAuB,CAACC,iCAAiC,CAAC;EAC5FF,qBAAqB,CAAC,CAAC,CAACD,WAAW,EAAEE,uBAAuB,CAACE,oCAAoC,CAAC;EAClG,MAAMC,IAAI,GAAGf,KAAK,CAACgB,gBAAgB;EACnCL,qBAAqB,CAAC,CAAC,CAACI,IAAI,EAAEH,uBAAuB,CAACK,yCAAyC,CAAC;EAChG,MAAMC,QAAQ,GAAGlB,KAAK,CAACmB,OAAO,EAAEC,cAAc;EAC9C,MAAMC,eAAe,GAAGC,kBAAkB,CAAC;IACvCb,QAAQ;IACRD,UAAU;IACVD;EACR,CAAK,CAAC;EACF,MAAMgB,qBAAqB,CAAC;IACxBC,MAAM,EAAEC,SAAS,CAACxB,UAAU,CAACO,UAAU,CAAC;IACxCkB,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,oBAAoB;EAC7E,CAAK,EAAE;IACCC,QAAQ,EAAErB,QAAQ;IAClBsB,gBAAgB,EAAEhB,IAAI;IACtBiB,QAAQ,EAAEtB,WAAW;IACrBuB,cAAc,EAAEf,QAAQ;IACxBgB,QAAQ,EAAEjC,UAAU,CAACM,gBAAgB;IACrCc,eAAe,EAAEA;EACzB,CAAK,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}