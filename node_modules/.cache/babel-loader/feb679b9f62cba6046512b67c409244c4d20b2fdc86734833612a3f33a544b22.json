{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { SETUP_TOTP_EXCEPTION } from '../types/errors.mjs';\nimport { getTOTPSetupDetails } from '../utils/signInHelpers.mjs';\nimport { associateSoftwareToken } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Sets up TOTP for the user.\n *\n * @returns SetUpTOTPOutput\n * @throws -{@link AssociateSoftwareTokenException}\n * Thrown if a service occurs while setting up TOTP.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nasync function setUpTOTP() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const username = tokens.idToken?.payload['cognito:username'] ?? '';\n  const {\n    SecretCode\n  } = await associateSoftwareToken({\n    region: getRegion(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SetUpTOTP)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  if (!SecretCode) {\n    // This should never happen.\n    throw new AuthError({\n      name: SETUP_TOTP_EXCEPTION,\n      message: 'Failed to set up TOTP.'\n    });\n  }\n  return getTOTPSetupDetails(SecretCode, JSON.stringify(username));\n}\nexport { setUpTOTP };","map":{"version":3,"names":["setUpTOTP","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","username","idToken","payload","SecretCode","associateSoftwareToken","region","getRegion","userPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SetUpTOTP","AccessToken","accessToken","toString","AuthError","name","SETUP_TOTP_EXCEPTION","message","getTOTPSetupDetails","JSON","stringify"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\setUpTOTP.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError';\nimport { SETUP_TOTP_EXCEPTION, } from '../types/errors';\nimport { getTOTPSetupDetails } from '../utils/signInHelpers';\nimport { associateSoftwareToken } from '../utils/clients/CognitoIdentityProvider';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { assertAuthTokens } from '../utils/types';\nimport { getAuthUserAgentValue } from '../../../utils';\n/**\n * Sets up TOTP for the user.\n *\n * @returns SetUpTOTPOutput\n * @throws -{@link AssociateSoftwareTokenException}\n * Thrown if a service occurs while setting up TOTP.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nexport async function setUpTOTP() {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const username = tokens.idToken?.payload['cognito:username'] ?? '';\n    const { SecretCode } = await associateSoftwareToken({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SetUpTOTP),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n    });\n    if (!SecretCode) {\n        // This should never happen.\n        throw new AuthError({\n            name: SETUP_TOTP_EXCEPTION,\n            message: 'Failed to set up TOTP.',\n        });\n    }\n    return getTOTPSetupDetails(SecretCode, JSON.stringify(username));\n}\n"],"mappings":";;;;;;;;;;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,SAASA,CAAA,EAAG;EAC9B,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM;EAAM,CAAE,GAAG,MAAMC,gBAAgB,CAAC;IAAEC,YAAY,EAAE;EAAK,CAAE,CAAC;EAClEC,gBAAgB,CAACH,MAAM,CAAC;EACxB,MAAMI,QAAQ,GAAGJ,MAAM,CAACK,OAAO,EAAEC,OAAO,CAAC,kBAAkB,CAAC,IAAI,EAAE;EAClE,MAAM;IAAEC;EAAU,CAAE,GAAG,MAAMC,sBAAsB,CAAC;IAChDC,MAAM,EAAEC,SAAS,CAAChB,UAAU,CAACiB,UAAU,CAAC;IACxCC,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,SAAS;EAClE,CAAK,EAAE;IACCC,WAAW,EAAEhB,MAAM,CAACiB,WAAW,CAACC,QAAQ;EAChD,CAAK,CAAC;EACF,IAAI,CAACX,UAAU,EAAE;IACrB;IACQ,MAAM,IAAIY,SAAS,CAAC;MAChBC,IAAI,EAAEC,oBAAoB;MAC1BC,OAAO,EAAE;IACrB,CAAS,CAAC;EACV;EACI,OAAOC,mBAAmB,CAAChB,UAAU,EAAEiB,IAAI,CAACC,SAAS,CAACrB,QAAQ,CAAC,CAAC;AACpE"},"metadata":{},"sourceType":"module","externalDependencies":[]}