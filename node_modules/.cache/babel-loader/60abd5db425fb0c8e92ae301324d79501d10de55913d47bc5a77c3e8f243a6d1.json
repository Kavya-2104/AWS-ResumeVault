{"ast":null,"code":"import 'react';\nimport 'react-hook-form';\nimport '@aws-amplify/ui';\nimport '../../../components/FormCore/FormProvider.mjs';\nimport RenderNothing from '../../../components/RenderNothing/RenderNothing.mjs';\nimport { isComponentRouteKey } from '../utils.mjs';\nimport { MACHINE_PROP_KEYS, EVENT_HANDLER_KEY_MAP } from './constants.mjs';\n\n// only select `route` from machine context\nconst routeSelector = ({\n  route\n}) => [route];\nconst createSelector = selectorKeys => context => {\n  const dependencies = selectorKeys.map(key => context[key]);\n  // route should always be part of deps, so hook knows when route changes.\n  return [...dependencies, context.route];\n};\nconst getRouteMachineSelector = route => isComponentRouteKey(route) ? createSelector(MACHINE_PROP_KEYS[route]) : routeSelector;\nconst isFormEventHandlerKey = key => ['updateBlur', 'updateForm', 'submitForm'].includes(key);\nconst convertEventHandlerKey = key => EVENT_HANDLER_KEY_MAP[key];\nconst getConvertedMachineProps = (route, context) => MACHINE_PROP_KEYS[route].reduce((acc, key) => ({\n  ...acc,\n  [isFormEventHandlerKey(key) ? convertEventHandlerKey(key) : key]: context[key]\n}), {});\nfunction resolveConfirmResetPasswordRoute(Component, props) {\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...getConvertedMachineProps('confirmResetPassword', props)\n    }\n  };\n}\nfunction resolveConfirmSignInRoute(Component, props) {\n  const {\n    challengeName,\n    ...machineProps\n  } = getConvertedMachineProps('confirmSignIn', props);\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...machineProps,\n      challengeName\n    }\n  };\n}\nfunction resolveConfirmSignUpRoute(Component, props) {\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...getConvertedMachineProps('confirmSignUp', props)\n    }\n  };\n}\nfunction resolveConfirmVerifyUserRoute(Component, props) {\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...getConvertedMachineProps('confirmVerifyUser', props)\n    }\n  };\n}\nfunction resolveForceNewPasswordRoute(Component, props) {\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...getConvertedMachineProps('forceNewPassword', props)\n    }\n  };\n}\nfunction resolveForgotPasswordRoute(Component, props) {\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...getConvertedMachineProps('forgotPassword', props)\n    }\n  };\n}\nfunction resolveSetupTotpRoute(Component, props) {\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...getConvertedMachineProps('setupTotp', props)\n    }\n  };\n}\nfunction resolveSignInRoute(Component, props) {\n  // default `hideSignUp` to false\n  const hideSignUp = false;\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...getConvertedMachineProps('signIn', props),\n      hideSignUp\n    }\n  };\n}\nfunction resolveSignUpRoute(Component, props) {\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...getConvertedMachineProps('signUp', props)\n    }\n  };\n}\nfunction resolveVerifyUserRoute(Component, props) {\n  return {\n    Component,\n    props: {\n      ...Component,\n      ...getConvertedMachineProps('verifyUser', props)\n    }\n  };\n}\nfunction resolveDefault() {\n  return {\n    Component: RenderNothing,\n    props: {}\n  };\n}\nexport { getRouteMachineSelector, resolveConfirmResetPasswordRoute, resolveConfirmSignInRoute, resolveConfirmSignUpRoute, resolveConfirmVerifyUserRoute, resolveDefault, resolveForceNewPasswordRoute, resolveForgotPasswordRoute, resolveSetupTotpRoute, resolveSignInRoute, resolveSignUpRoute, resolveVerifyUserRoute, routeSelector };","map":{"version":3,"names":["RenderNothing","isComponentRouteKey","MACHINE_PROP_KEYS","EVENT_HANDLER_KEY_MAP","routeSelector","route","createSelector","selectorKeys","context","dependencies","map","key","getRouteMachineSelector","isFormEventHandlerKey","includes","convertEventHandlerKey","getConvertedMachineProps","reduce","acc","resolveConfirmResetPasswordRoute","Component","props","resolveConfirmSignInRoute","challengeName","machineProps","resolveConfirmSignUpRoute","resolveConfirmVerifyUserRoute","resolveForceNewPasswordRoute","resolveForgotPasswordRoute","resolveSetupTotpRoute","resolveSignInRoute","hideSignUp","resolveSignUpRoute","resolveVerifyUserRoute","resolveDefault"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/utils.mjs"],"sourcesContent":["import 'react';\nimport 'react-hook-form';\nimport '@aws-amplify/ui';\nimport '../../../components/FormCore/FormProvider.mjs';\nimport RenderNothing from '../../../components/RenderNothing/RenderNothing.mjs';\nimport { isComponentRouteKey } from '../utils.mjs';\nimport { MACHINE_PROP_KEYS, EVENT_HANDLER_KEY_MAP } from './constants.mjs';\n\n// only select `route` from machine context\nconst routeSelector = ({ route }) => [route];\nconst createSelector = (selectorKeys) => (context) => {\n    const dependencies = selectorKeys.map((key) => context[key]);\n    // route should always be part of deps, so hook knows when route changes.\n    return [...dependencies, context.route];\n};\nconst getRouteMachineSelector = (route) => isComponentRouteKey(route)\n    ? createSelector(MACHINE_PROP_KEYS[route])\n    : routeSelector;\nconst isFormEventHandlerKey = (key) => ['updateBlur', 'updateForm', 'submitForm'].includes(key);\nconst convertEventHandlerKey = (key) => EVENT_HANDLER_KEY_MAP[key];\nconst getConvertedMachineProps = (route, context) => MACHINE_PROP_KEYS[route].reduce((acc, key) => ({\n    ...acc,\n    [isFormEventHandlerKey(key) ? convertEventHandlerKey(key) : key]: context[key],\n}), {});\nfunction resolveConfirmResetPasswordRoute(Component, props) {\n    return {\n        Component,\n        props: {\n            ...Component,\n            ...getConvertedMachineProps('confirmResetPassword', props),\n        },\n    };\n}\nfunction resolveConfirmSignInRoute(Component, props) {\n    const { challengeName, ...machineProps } = getConvertedMachineProps('confirmSignIn', props);\n    return { Component, props: { ...Component, ...machineProps, challengeName } };\n}\nfunction resolveConfirmSignUpRoute(Component, props) {\n    return {\n        Component,\n        props: {\n            ...Component,\n            ...getConvertedMachineProps('confirmSignUp', props),\n        },\n    };\n}\nfunction resolveConfirmVerifyUserRoute(Component, props) {\n    return {\n        Component,\n        props: {\n            ...Component,\n            ...getConvertedMachineProps('confirmVerifyUser', props),\n        },\n    };\n}\nfunction resolveForceNewPasswordRoute(Component, props) {\n    return {\n        Component,\n        props: {\n            ...Component,\n            ...getConvertedMachineProps('forceNewPassword', props),\n        },\n    };\n}\nfunction resolveForgotPasswordRoute(Component, props) {\n    return {\n        Component,\n        props: {\n            ...Component,\n            ...getConvertedMachineProps('forgotPassword', props),\n        },\n    };\n}\nfunction resolveSetupTotpRoute(Component, props) {\n    return {\n        Component,\n        props: {\n            ...Component,\n            ...getConvertedMachineProps('setupTotp', props),\n        },\n    };\n}\nfunction resolveSignInRoute(Component, props) {\n    // default `hideSignUp` to false\n    const hideSignUp = false;\n    return {\n        Component,\n        props: {\n            ...Component,\n            ...getConvertedMachineProps('signIn', props),\n            hideSignUp,\n        },\n    };\n}\nfunction resolveSignUpRoute(Component, props) {\n    return {\n        Component,\n        props: { ...Component, ...getConvertedMachineProps('signUp', props) },\n    };\n}\nfunction resolveVerifyUserRoute(Component, props) {\n    return {\n        Component,\n        props: {\n            ...Component,\n            ...getConvertedMachineProps('verifyUser', props),\n        },\n    };\n}\nfunction resolveDefault() {\n    return {\n        Component: RenderNothing,\n        props: {},\n    };\n}\n\nexport { getRouteMachineSelector, resolveConfirmResetPasswordRoute, resolveConfirmSignInRoute, resolveConfirmSignUpRoute, resolveConfirmVerifyUserRoute, resolveDefault, resolveForceNewPasswordRoute, resolveForgotPasswordRoute, resolveSetupTotpRoute, resolveSignInRoute, resolveSignUpRoute, resolveVerifyUserRoute, routeSelector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}