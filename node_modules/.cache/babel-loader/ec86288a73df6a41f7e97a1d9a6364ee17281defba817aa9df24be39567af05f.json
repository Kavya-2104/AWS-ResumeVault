{"ast":null,"code":"import { StorageAction } from '@aws-amplify/core/internals/utils';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput.mjs';\nimport '../../../../errors/types/validation.mjs';\nimport { logger } from '../../../../utils/logger.mjs';\nimport '../../utils/client/base.mjs';\nimport '../../utils/client/getObject.mjs';\nimport { listObjectsV2 } from '../../utils/client/listObjectsV2.mjs';\nimport '../../utils/client/putObject.mjs';\nimport '../../utils/client/createMultipartUpload.mjs';\nimport '../../utils/client/uploadPart.mjs';\nimport '../../utils/client/completeMultipartUpload.mjs';\nimport '../../utils/client/listParts.mjs';\nimport '../../utils/client/abortMultipartUpload.mjs';\nimport '../../utils/client/copyObject.mjs';\nimport '../../utils/client/headObject.mjs';\nimport '../../utils/client/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../../utils/userAgent.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst MAX_PAGE_SIZE = 1000;\nconst list = async (amplify, input) => {\n  const {\n    options = {},\n    prefix: path = ''\n  } = input ?? {};\n  const {\n    s3Config,\n    bucket,\n    keyPrefix: prefix\n  } = await resolveS3ConfigAndInput(amplify, options);\n  // @ts-expect-error pageSize and nextToken should not coexist with listAll\n  if (options?.listAll && (options?.pageSize || options?.nextToken)) {\n    const anyOptions = options;\n    logger.debug(`listAll is set to true, ignoring ${anyOptions?.pageSize ? `pageSize: ${anyOptions?.pageSize}` : ''} ${anyOptions?.nextToken ? `nextToken: ${anyOptions?.nextToken}` : ''}.`);\n  }\n  const listParams = {\n    Bucket: bucket,\n    Prefix: `${prefix}${path}`,\n    MaxKeys: options?.listAll ? undefined : options?.pageSize,\n    ContinuationToken: options?.listAll ? undefined : options?.nextToken\n  };\n  logger.debug(`listing items from \"${listParams.Prefix}\"`);\n  return options.listAll ? _listAll({\n    s3Config,\n    listParams,\n    prefix\n  }) : _list({\n    s3Config,\n    listParams,\n    prefix\n  });\n};\nconst _listAll = async ({\n  s3Config,\n  listParams,\n  prefix\n}) => {\n  const listResult = [];\n  let continuationToken = listParams.ContinuationToken;\n  do {\n    const {\n      items: pageResults,\n      nextToken: pageNextToken\n    } = await _list({\n      prefix,\n      s3Config,\n      listParams: {\n        ...listParams,\n        ContinuationToken: continuationToken,\n        MaxKeys: MAX_PAGE_SIZE\n      }\n    });\n    listResult.push(...pageResults);\n    continuationToken = pageNextToken;\n  } while (continuationToken);\n  return {\n    items: listResult\n  };\n};\nconst _list = async ({\n  s3Config,\n  listParams,\n  prefix\n}) => {\n  const listParamsClone = {\n    ...listParams\n  };\n  if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n    logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n    listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n  }\n  const response = await listObjectsV2({\n    ...s3Config,\n    userAgentValue: getStorageUserAgentValue(StorageAction.List)\n  }, listParamsClone);\n  if (!response?.Contents) {\n    return {\n      items: []\n    };\n  }\n  const listResult = response.Contents.map(item => ({\n    key: item.Key.substring(prefix.length),\n    eTag: item.ETag,\n    lastModified: item.LastModified,\n    size: item.Size\n  }));\n  return {\n    items: listResult,\n    nextToken: response.NextContinuationToken\n  };\n};\nexport { list };","map":{"version":3,"names":["MAX_PAGE_SIZE","list","amplify","input","options","prefix","path","s3Config","bucket","keyPrefix","resolveS3ConfigAndInput","listAll","pageSize","nextToken","anyOptions","logger","debug","listParams","Bucket","Prefix","MaxKeys","undefined","ContinuationToken","_listAll","_list","listResult","continuationToken","items","pageResults","pageNextToken","push","listParamsClone","response","listObjectsV2","userAgentValue","getStorageUserAgentValue","StorageAction","List","Contents","map","item","key","Key","substring","length","eTag","ETag","lastModified","LastModified","size","Size","NextContinuationToken"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\list.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput } from '../../utils';\nimport { listObjectsV2, } from '../../utils/client';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nconst MAX_PAGE_SIZE = 1000;\nexport const list = async (amplify, input) => {\n    const { options = {}, prefix: path = '' } = input ?? {};\n    const { s3Config, bucket, keyPrefix: prefix, } = await resolveS3ConfigAndInput(amplify, options);\n    // @ts-expect-error pageSize and nextToken should not coexist with listAll\n    if (options?.listAll && (options?.pageSize || options?.nextToken)) {\n        const anyOptions = options;\n        logger.debug(`listAll is set to true, ignoring ${anyOptions?.pageSize ? `pageSize: ${anyOptions?.pageSize}` : ''} ${anyOptions?.nextToken ? `nextToken: ${anyOptions?.nextToken}` : ''}.`);\n    }\n    const listParams = {\n        Bucket: bucket,\n        Prefix: `${prefix}${path}`,\n        MaxKeys: options?.listAll ? undefined : options?.pageSize,\n        ContinuationToken: options?.listAll ? undefined : options?.nextToken,\n    };\n    logger.debug(`listing items from \"${listParams.Prefix}\"`);\n    return options.listAll\n        ? _listAll({ s3Config, listParams, prefix })\n        : _list({ s3Config, listParams, prefix });\n};\nconst _listAll = async ({ s3Config, listParams, prefix, }) => {\n    const listResult = [];\n    let continuationToken = listParams.ContinuationToken;\n    do {\n        const { items: pageResults, nextToken: pageNextToken } = await _list({\n            prefix,\n            s3Config,\n            listParams: {\n                ...listParams,\n                ContinuationToken: continuationToken,\n                MaxKeys: MAX_PAGE_SIZE,\n            },\n        });\n        listResult.push(...pageResults);\n        continuationToken = pageNextToken;\n    } while (continuationToken);\n    return {\n        items: listResult,\n    };\n};\nconst _list = async ({ s3Config, listParams, prefix, }) => {\n    const listParamsClone = { ...listParams };\n    if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n        logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n        listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n    }\n    const response = await listObjectsV2({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.List),\n    }, listParamsClone);\n    if (!response?.Contents) {\n        return {\n            items: [],\n        };\n    }\n    const listResult = response.Contents.map(item => ({\n        key: item.Key.substring(prefix.length),\n        eTag: item.ETag,\n        lastModified: item.LastModified,\n        size: item.Size,\n    }));\n    return {\n        items: listResult,\n        nextToken: response.NextContinuationToken,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}