{"ast":null,"code":"import { defaultPartition, partitionsInfo } from './partitions.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Get the AWS Services endpoint URL's DNS suffix for a given region. A typical AWS regional service endpoint URL will\n * follow this pattern: {endpointPrefix}.{region}.{dnsSuffix}. For example, the endpoint URL for Cognito Identity in\n * us-east-1 will be cognito-identity.us-east-1.amazonaws.com. Here the DnsSuffix is `amazonaws.com`.\n *\n * @param region\n * @returns The DNS suffix\n *\n * @internal\n */\nconst getDnsSuffix = region => {\n  const {\n    partitions\n  } = partitionsInfo;\n  for (const {\n    regions,\n    outputs,\n    regionRegex\n  } of partitions) {\n    const regex = new RegExp(regionRegex);\n    if (regions.includes(region) || regex.test(region)) {\n      return outputs.dnsSuffix;\n    }\n  }\n  return defaultPartition.outputs.dnsSuffix;\n};\nexport { getDnsSuffix };","map":{"version":3,"names":["getDnsSuffix","region","partitions","partitionsInfo","regions","outputs","regionRegex","regex","RegExp","includes","test","dnsSuffix","defaultPartition"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\clients\\endpoints\\getDnsSuffix.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { defaultPartition, partitionsInfo } from './partitions';\n/**\n * Get the AWS Services endpoint URL's DNS suffix for a given region. A typical AWS regional service endpoint URL will\n * follow this pattern: {endpointPrefix}.{region}.{dnsSuffix}. For example, the endpoint URL for Cognito Identity in\n * us-east-1 will be cognito-identity.us-east-1.amazonaws.com. Here the DnsSuffix is `amazonaws.com`.\n *\n * @param region\n * @returns The DNS suffix\n *\n * @internal\n */\nexport const getDnsSuffix = (region) => {\n    const { partitions } = partitionsInfo;\n    for (const { regions, outputs, regionRegex } of partitions) {\n        const regex = new RegExp(regionRegex);\n        if (regions.includes(region) || regex.test(region)) {\n            return outputs.dnsSuffix;\n        }\n    }\n    return defaultPartition.outputs.dnsSuffix;\n};\n"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,YAAY,GAAIC,MAAM,IAAK;EACpC,MAAM;IAAEC;EAAU,CAAE,GAAGC,cAAc;EACrC,KAAK,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC;EAAW,CAAE,IAAIJ,UAAU,EAAE;IACxD,MAAMK,KAAK,GAAG,IAAIC,MAAM,CAACF,WAAW,CAAC;IACrC,IAAIF,OAAO,CAACK,QAAQ,CAACR,MAAM,CAAC,IAAIM,KAAK,CAACG,IAAI,CAACT,MAAM,CAAC,EAAE;MAChD,OAAOI,OAAO,CAACM,SAAS;IACpC;EACA;EACI,OAAOC,gBAAgB,CAACP,OAAO,CAACM,SAAS;AAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}