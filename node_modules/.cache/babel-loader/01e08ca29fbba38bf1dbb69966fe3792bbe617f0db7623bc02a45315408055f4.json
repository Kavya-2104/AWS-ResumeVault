{"ast":null,"code":"import { StorageValidationErrorCode, validationErrorMap } from '../../../../../errors/types/validation.mjs';\nimport { StorageError } from '../../../../../errors/StorageError.mjs';\nimport { calculatePartSize } from './calculatePartSize.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getDataChunker = (data, totalSize) => {\n  const partSize = calculatePartSize(totalSize);\n  if (data instanceof Blob) {\n    return helper(data, 0, data.size, partSize);\n  } else if (ArrayBuffer.isView(data)) {\n    return helper(data.buffer, data.byteOffset, data.byteLength, partSize);\n  } else if (data instanceof ArrayBuffer) {\n    return helper(data, 0, data.byteLength, partSize);\n  } else if (typeof data === 'string') {\n    const blob = new Blob([data]);\n    return getDataChunker(blob, blob.size);\n  } else {\n    throw new StorageError({\n      name: StorageValidationErrorCode.InvalidUploadSource,\n      ...validationErrorMap[StorageValidationErrorCode.InvalidUploadSource]\n    });\n  }\n};\nconst helper = function* (buffer, byteOffset, byteLength, partSize) {\n  let partNumber = 1;\n  let startByte = byteOffset;\n  let endByte = byteOffset + Math.min(partSize, byteLength);\n  while (endByte < byteLength + byteOffset) {\n    yield {\n      partNumber,\n      data: buffer.slice(startByte, endByte),\n      size: partSize\n    };\n    partNumber += 1;\n    startByte = endByte;\n    endByte = startByte + partSize;\n  }\n  yield {\n    partNumber,\n    data: buffer.slice(startByte, byteLength + byteOffset),\n    size: byteLength + byteOffset - startByte\n  };\n};\nexport { getDataChunker };","map":{"version":3,"names":["getDataChunker","data","totalSize","partSize","calculatePartSize","Blob","helper","size","ArrayBuffer","isView","buffer","byteOffset","byteLength","blob","StorageError","name","StorageValidationErrorCode","InvalidUploadSource","validationErrorMap","partNumber","startByte","endByte","Math","min","slice"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\uploadData\\multipart\\getDataChunker.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageValidationErrorCode, validationErrorMap, } from '../../../../../errors/types/validation';\nimport { StorageError } from '../../../../../errors/StorageError';\nimport { calculatePartSize } from './calculatePartSize';\nexport const getDataChunker = (data, totalSize) => {\n    const partSize = calculatePartSize(totalSize);\n    if (data instanceof Blob) {\n        return helper(data, 0, data.size, partSize);\n    }\n    else if (ArrayBuffer.isView(data)) {\n        return helper(data.buffer, data.byteOffset, data.byteLength, partSize);\n    }\n    else if (data instanceof ArrayBuffer) {\n        return helper(data, 0, data.byteLength, partSize);\n    }\n    else if (typeof data === 'string') {\n        const blob = new Blob([data]);\n        return getDataChunker(blob, blob.size);\n    }\n    else {\n        throw new StorageError({\n            name: StorageValidationErrorCode.InvalidUploadSource,\n            ...validationErrorMap[StorageValidationErrorCode.InvalidUploadSource],\n        });\n    }\n};\nconst helper = function* (buffer, byteOffset, byteLength, partSize) {\n    let partNumber = 1;\n    let startByte = byteOffset;\n    let endByte = byteOffset + Math.min(partSize, byteLength);\n    while (endByte < byteLength + byteOffset) {\n        yield {\n            partNumber,\n            data: buffer.slice(startByte, endByte),\n            size: partSize,\n        };\n        partNumber += 1;\n        startByte = endByte;\n        endByte = startByte + partSize;\n    }\n    yield {\n        partNumber,\n        data: buffer.slice(startByte, byteLength + byteOffset),\n        size: byteLength + byteOffset - startByte,\n    };\n};\n"],"mappings":";;;;AAAA;AACA;AAIY,MAACA,cAAc,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;EAC/C,MAAMC,QAAQ,GAAGC,iBAAiB,CAACF,SAAS,CAAC;EAC7C,IAAID,IAAI,YAAYI,IAAI,EAAE;IACtB,OAAOC,MAAM,CAACL,IAAI,EAAE,CAAC,EAAEA,IAAI,CAACM,IAAI,EAAEJ,QAAQ,CAAC;EACnD,CAAK,MACI,IAAIK,WAAW,CAACC,MAAM,CAACR,IAAI,CAAC,EAAE;IAC/B,OAAOK,MAAM,CAACL,IAAI,CAACS,MAAM,EAAET,IAAI,CAACU,UAAU,EAAEV,IAAI,CAACW,UAAU,EAAET,QAAQ,CAAC;EAC9E,CAAK,MACI,IAAIF,IAAI,YAAYO,WAAW,EAAE;IAClC,OAAOF,MAAM,CAACL,IAAI,EAAE,CAAC,EAAEA,IAAI,CAACW,UAAU,EAAET,QAAQ,CAAC;EACzD,CAAK,MACI,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;IAC/B,MAAMY,IAAI,GAAG,IAAIR,IAAI,CAAC,CAACJ,IAAI,CAAC,CAAC;IAC7B,OAAOD,cAAc,CAACa,IAAI,EAAEA,IAAI,CAACN,IAAI,CAAC;EAC9C,CAAK,MACI;IACD,MAAM,IAAIO,YAAY,CAAC;MACnBC,IAAI,EAAEC,0BAA0B,CAACC,mBAAmB;MACpD,GAAGC,kBAAkB,CAACF,0BAA0B,CAACC,mBAAmB;IAChF,CAAS,CAAC;EACV;AACA;AACA,MAAMX,MAAM,GAAG,UAAAA,CAAWI,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAET,QAAQ,EAAE;EAChE,IAAIgB,UAAU,GAAG,CAAC;EAClB,IAAIC,SAAS,GAAGT,UAAU;EAC1B,IAAIU,OAAO,GAAGV,UAAU,GAAGW,IAAI,CAACC,GAAG,CAACpB,QAAQ,EAAES,UAAU,CAAC;EACzD,OAAOS,OAAO,GAAGT,UAAU,GAAGD,UAAU,EAAE;IACtC,MAAM;MACFQ,UAAU;MACVlB,IAAI,EAAES,MAAM,CAACc,KAAK,CAACJ,SAAS,EAAEC,OAAO,CAAC;MACtCd,IAAI,EAAEJ;IAClB,CAAS;IACDgB,UAAU,IAAI,CAAC;IACfC,SAAS,GAAGC,OAAO;IACnBA,OAAO,GAAGD,SAAS,GAAGjB,QAAQ;EACtC;EACI,MAAM;IACFgB,UAAU;IACVlB,IAAI,EAAES,MAAM,CAACc,KAAK,CAACJ,SAAS,EAAER,UAAU,GAAGD,UAAU,CAAC;IACtDJ,IAAI,EAAEK,UAAU,GAAGD,UAAU,GAAGS;EACxC,CAAK;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}