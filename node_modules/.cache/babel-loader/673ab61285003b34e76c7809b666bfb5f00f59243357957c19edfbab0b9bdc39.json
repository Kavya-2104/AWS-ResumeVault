{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar _ = require('./es6_');\n\n/**\n * Performs an deep extend on the objects, from right to left.\n * @private\n * @param {Object[]} objects - An array of JS objects\n * @param {Function} collision - A function to be called when a merge collision happens.\n * @param {string[]} path - (for internal use) An array of strings which is the current path down the object when this is called recursively.\n * @returns {Object}\n */\nfunction deepExtend(objects, collision, path) {\n  if (objects == null) return {};\n  var src,\n    copyIsArray,\n    copy,\n    name,\n    options,\n    clone,\n    target = objects[0] || {},\n    i = 1,\n    length = objects.length;\n  path = path || [];\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if (typeof target !== 'object') {\n    target = {};\n  }\n  for (; i < length; i++) {\n    // Only deal with non-null/undefined values\n    if ((options = objects[i]) != null) {\n      // Extend the base object\n      for (name in options) {\n        if (!options.hasOwnProperty(name)) continue;\n        if (name === '__proto__') continue;\n        src = target[name];\n        copy = options[name];\n\n        // Prevent never-ending loop\n        if (target === copy) {\n          continue;\n        }\n\n        // Recurse if we're merging plain objects or arrays\n        if (copy && (_.isPlainObject(copy) || (copyIsArray = _.isArray(copy)))) {\n          if (copyIsArray) {\n            copyIsArray = false;\n            clone = src && _.isArray(src) ? src : [];\n          } else {\n            clone = src && _.isPlainObject(src) ? src : {};\n          }\n          var nextPath = path.slice(0);\n          nextPath.push(name);\n\n          // Never move original objects, clone them\n          target[name] = deepExtend([clone, copy], collision, nextPath);\n\n          // Don't bring in undefined values\n        } else if (copy !== undefined) {\n          if (src != null && typeof collision == 'function') {\n            collision({\n              target: target,\n              copy: options,\n              path: path,\n              key: name\n            });\n          }\n          target[name] = copy;\n        }\n      }\n    }\n  }\n  return target;\n}\nmodule.exports = deepExtend;","map":{"version":3,"names":["_","require","deepExtend","objects","collision","path","src","copyIsArray","copy","name","options","clone","target","i","length","hasOwnProperty","isPlainObject","isArray","nextPath","slice","push","undefined","key","module","exports"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/style-dictionary/lib/utils/deepExtend.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar _ = require('./es6_');\n\n/**\n * Performs an deep extend on the objects, from right to left.\n * @private\n * @param {Object[]} objects - An array of JS objects\n * @param {Function} collision - A function to be called when a merge collision happens.\n * @param {string[]} path - (for internal use) An array of strings which is the current path down the object when this is called recursively.\n * @returns {Object}\n */\nfunction deepExtend(objects, collision, path) {\n  if (objects == null)\n    return {};\n\n  var src, copyIsArray, copy, name, options, clone,\n    target = objects[0] || {},\n    i = 1,\n    length = objects.length;\n\n  path = path || [];\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if ( typeof target !== 'object' ) {\n    target = {};\n  }\n\n  for ( ; i < length; i++) {\n    // Only deal with non-null/undefined values\n    if ( (options = objects[ i ]) != null ) {\n      // Extend the base object\n      for (name in options) {\n        if (!options.hasOwnProperty(name))\n          continue;\n        if (name === '__proto__')\n          continue;\n\n        src = target[name];\n        copy = options[name];\n\n        // Prevent never-ending loop\n        if (target === copy) {\n          continue;\n        }\n\n        // Recurse if we're merging plain objects or arrays\n        if ( copy && ( _.isPlainObject(copy) || (copyIsArray = _.isArray(copy)) ) ) {\n          if ( copyIsArray ) {\n            copyIsArray = false;\n            clone = src && _.isArray(src) ? src : [];\n          } else {\n            clone = src && _.isPlainObject(src) ? src : {};\n          }\n\n          var nextPath = path.slice(0);\n          nextPath.push(name);\n\n          // Never move original objects, clone them\n          target[ name ] = deepExtend( [clone, copy], collision, nextPath );\n\n          // Don't bring in undefined values\n        } else if ( copy !== undefined ) {\n          if (src != null && typeof collision == 'function') {\n            collision({target: target, copy: options, path: path, key: name});\n          }\n          target[ name ] = copy;\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = deepExtend;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,OAAO,EAAEC,SAAS,EAAEC,IAAI,EAAE;EAC5C,IAAIF,OAAO,IAAI,IAAI,EACjB,OAAO,CAAC,CAAC;EAEX,IAAIG,GAAG;IAAEC,WAAW;IAAEC,IAAI;IAAEC,IAAI;IAAEC,OAAO;IAAEC,KAAK;IAC9CC,MAAM,GAAGT,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACzBU,CAAC,GAAG,CAAC;IACLC,MAAM,GAAGX,OAAO,CAACW,MAAM;EAEzBT,IAAI,GAAGA,IAAI,IAAI,EAAE;;EAEjB;EACA,IAAK,OAAOO,MAAM,KAAK,QAAQ,EAAG;IAChCA,MAAM,GAAG,CAAC,CAAC;EACb;EAEA,OAAQC,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;IACvB;IACA,IAAK,CAACH,OAAO,GAAGP,OAAO,CAAEU,CAAC,CAAE,KAAK,IAAI,EAAG;MACtC;MACA,KAAKJ,IAAI,IAAIC,OAAO,EAAE;QACpB,IAAI,CAACA,OAAO,CAACK,cAAc,CAACN,IAAI,CAAC,EAC/B;QACF,IAAIA,IAAI,KAAK,WAAW,EACtB;QAEFH,GAAG,GAAGM,MAAM,CAACH,IAAI,CAAC;QAClBD,IAAI,GAAGE,OAAO,CAACD,IAAI,CAAC;;QAEpB;QACA,IAAIG,MAAM,KAAKJ,IAAI,EAAE;UACnB;QACF;;QAEA;QACA,IAAKA,IAAI,KAAMR,CAAC,CAACgB,aAAa,CAACR,IAAI,CAAC,KAAKD,WAAW,GAAGP,CAAC,CAACiB,OAAO,CAACT,IAAI,CAAC,CAAC,CAAE,EAAG;UAC1E,IAAKD,WAAW,EAAG;YACjBA,WAAW,GAAG,KAAK;YACnBI,KAAK,GAAGL,GAAG,IAAIN,CAAC,CAACiB,OAAO,CAACX,GAAG,CAAC,GAAGA,GAAG,GAAG,EAAE;UAC1C,CAAC,MAAM;YACLK,KAAK,GAAGL,GAAG,IAAIN,CAAC,CAACgB,aAAa,CAACV,GAAG,CAAC,GAAGA,GAAG,GAAG,CAAC,CAAC;UAChD;UAEA,IAAIY,QAAQ,GAAGb,IAAI,CAACc,KAAK,CAAC,CAAC,CAAC;UAC5BD,QAAQ,CAACE,IAAI,CAACX,IAAI,CAAC;;UAEnB;UACAG,MAAM,CAAEH,IAAI,CAAE,GAAGP,UAAU,CAAE,CAACS,KAAK,EAAEH,IAAI,CAAC,EAAEJ,SAAS,EAAEc,QAAS,CAAC;;UAEjE;QACF,CAAC,MAAM,IAAKV,IAAI,KAAKa,SAAS,EAAG;UAC/B,IAAIf,GAAG,IAAI,IAAI,IAAI,OAAOF,SAAS,IAAI,UAAU,EAAE;YACjDA,SAAS,CAAC;cAACQ,MAAM,EAAEA,MAAM;cAAEJ,IAAI,EAAEE,OAAO;cAAEL,IAAI,EAAEA,IAAI;cAAEiB,GAAG,EAAEb;YAAI,CAAC,CAAC;UACnE;UACAG,MAAM,CAAEH,IAAI,CAAE,GAAGD,IAAI;QACvB;MACF;IACF;EACF;EAEA,OAAOI,MAAM;AACf;AAEAW,MAAM,CAACC,OAAO,GAAGtB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}