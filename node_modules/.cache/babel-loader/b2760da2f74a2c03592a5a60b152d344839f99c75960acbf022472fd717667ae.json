{"ast":null,"code":"import { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { signInWithCustomAuth } from './signInWithCustomAuth.mjs';\nimport { signInWithCustomSRPAuth } from './signInWithCustomSRPAuth.mjs';\nimport { signInWithSRP } from './signInWithSRP.mjs';\nimport { signInWithUserPassword } from './signInWithUserPassword.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in\n *\n * @param input -  The SignInInput object\n * @returns SignInOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException }\n *  - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signIn(input) {\n  const authFlowType = input.options?.authFlowType;\n  await assertUserNotAuthenticated();\n  switch (authFlowType) {\n    case 'USER_SRP_AUTH':\n      return signInWithSRP(input);\n    case 'USER_PASSWORD_AUTH':\n      return signInWithUserPassword(input);\n    case 'CUSTOM_WITHOUT_SRP':\n      return signInWithCustomAuth(input);\n    case 'CUSTOM_WITH_SRP':\n      return signInWithCustomSRPAuth(input);\n    default:\n      return signInWithSRP(input);\n  }\n}\nexport { signIn };","map":{"version":3,"names":["signIn","input","authFlowType","options","assertUserNotAuthenticated","signInWithSRP","signInWithUserPassword","signInWithCustomAuth","signInWithCustomSRPAuth"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\signIn.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers';\nimport { signInWithCustomAuth } from './signInWithCustomAuth';\nimport { signInWithCustomSRPAuth } from './signInWithCustomSRPAuth';\nimport { signInWithSRP } from './signInWithSRP';\nimport { signInWithUserPassword } from './signInWithUserPassword';\n/**\n * Signs a user in\n *\n * @param input -  The SignInInput object\n * @returns SignInOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException }\n *  - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signIn(input) {\n    const authFlowType = input.options?.authFlowType;\n    await assertUserNotAuthenticated();\n    switch (authFlowType) {\n        case 'USER_SRP_AUTH':\n            return signInWithSRP(input);\n        case 'USER_PASSWORD_AUTH':\n            return signInWithUserPassword(input);\n        case 'CUSTOM_WITHOUT_SRP':\n            return signInWithCustomAuth(input);\n        case 'CUSTOM_WITH_SRP':\n            return signInWithCustomSRPAuth(input);\n        default:\n            return signInWithSRP(input);\n    }\n}\n"],"mappings":";;;;;;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,MAAMA,CAACC,KAAK,EAAE;EAChC,MAAMC,YAAY,GAAGD,KAAK,CAACE,OAAO,EAAED,YAAY;EAChD,MAAME,0BAA0B,EAAE;EAClC,QAAQF,YAAY;IAChB,KAAK,eAAe;MAChB,OAAOG,aAAa,CAACJ,KAAK,CAAC;IAC/B,KAAK,oBAAoB;MACrB,OAAOK,sBAAsB,CAACL,KAAK,CAAC;IACxC,KAAK,oBAAoB;MACrB,OAAOM,oBAAoB,CAACN,KAAK,CAAC;IACtC,KAAK,iBAAiB;MAClB,OAAOO,uBAAuB,CAACP,KAAK,CAAC;IACzC;MACI,OAAOI,aAAa,CAACJ,KAAK,CAAC;EACvC;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}