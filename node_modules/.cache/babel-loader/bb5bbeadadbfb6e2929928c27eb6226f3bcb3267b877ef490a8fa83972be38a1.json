{"ast":null,"code":"import { __values, __spreadArray, __read, __assign } from './_virtual/_tslib.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { isStateConfig, State, bindActionToState } from './State.js';\nimport { errorPlatform, update, error as error$1, log, stop, start, cancel, send, raise } from './actionTypes.js';\nimport { initEvent, doneInvoke, toActionObjects, resolveActions, error, getActionFunction } from './actions.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { warn, mapContext, toObserver, isFunction, toSCXMLEvent, flatten, isRaisableAction, isPromiseLike, isObservable, isMachine, isBehavior, reportUnhandledExceptionOnInvocation, symbolObservable, isArray, toEventObject, isString, isActor, toInvokeSource, uniqueId } from './utils.js';\nimport { Scheduler } from './scheduler.js';\nimport { createDeferredActor, isSpawnedActor } from './Actor.js';\nimport { registry } from './registry.js';\nimport { getGlobal, registerService } from './devTools.js';\nimport { provide, consume } from './serviceScope.js';\nimport { spawnBehavior } from './behaviors.js';\nvar DEFAULT_SPAWN_OPTIONS = {\n  sync: false,\n  autoForward: false\n};\nvar InterpreterStatus;\n(function (InterpreterStatus) {\n  InterpreterStatus[InterpreterStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  InterpreterStatus[InterpreterStatus[\"Running\"] = 1] = \"Running\";\n  InterpreterStatus[InterpreterStatus[\"Stopped\"] = 2] = \"Stopped\";\n})(InterpreterStatus || (InterpreterStatus = {}));\nvar Interpreter = /*#__PURE__*/\n\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.\r\n   *\r\n   * @param machine The machine to be interpreted\r\n   * @param options Interpreter options\r\n   */\n  function Interpreter(machine, options) {\n    if (options === void 0) {\n      options = Interpreter.defaultOptions;\n    }\n    var _this = this;\n    this.machine = machine;\n    this.delayedEventsMap = {};\n    this.listeners = new Set();\n    this.contextListeners = new Set();\n    this.stopListeners = new Set();\n    this.doneListeners = new Set();\n    this.eventListeners = new Set();\n    this.sendListeners = new Set();\n    /**\r\n     * Whether the service is started.\r\n     */\n\n    this.initialized = false;\n    this.status = InterpreterStatus.NotStarted;\n    this.children = new Map();\n    this.forwardTo = new Set();\n    this._outgoingQueue = [];\n    /**\r\n     * Alias for Interpreter.prototype.start\r\n     */\n\n    this.init = this.start;\n    /**\r\n     * Sends an event to the running interpreter to trigger a transition.\r\n     *\r\n     * An array of events (batched) can be sent as well, which will send all\r\n     * batched events to the running interpreter. The listeners will be\r\n     * notified only **once** when all events are processed.\r\n     *\r\n     * @param event The event(s) to send\r\n     */\n\n    this.send = function (event, payload) {\n      if (isArray(event)) {\n        _this.batch(event);\n        return _this.state;\n      }\n      var _event = toSCXMLEvent(toEventObject(event, payload));\n      if (_this.status === InterpreterStatus.Stopped) {\n        // do nothing\n        if (!IS_PRODUCTION) {\n          warn(false, \"Event \\\"\".concat(_event.name, \"\\\" was sent to stopped service \\\"\").concat(_this.machine.id, \"\\\". This service has already reached its final state, and will not transition.\\nEvent: \").concat(JSON.stringify(_event.data)));\n        }\n        return _this.state;\n      }\n      if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {\n        throw new Error(\"Event \\\"\".concat(_event.name, \"\\\" was sent to uninitialized service \\\"\").concat(_this.machine.id // tslint:disable-next-line:max-line-length\n        , \"\\\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\\nEvent: \").concat(JSON.stringify(_event.data)));\n      }\n      _this.scheduler.schedule(function () {\n        // Forward copy of event to child actors\n        _this.forward(_event);\n        var nextState = _this._nextState(_event);\n        _this.update(nextState, _event);\n      });\n      return _this._state; // TODO: deprecate (should return void)\n      // tslint:disable-next-line:semicolon\n    };\n    this.sendTo = function (event, to, immediate) {\n      var isParent = _this.parent && (to === SpecialTargets.Parent || _this.parent.id === to);\n      var target = isParent ? _this.parent : isString(to) ? to === SpecialTargets.Internal ? _this : _this.children.get(to) || registry.get(to) : isActor(to) ? to : undefined;\n      if (!target) {\n        if (!isParent) {\n          throw new Error(\"Unable to send event to child '\".concat(to, \"' from service '\").concat(_this.id, \"'.\"));\n        } // tslint:disable-next-line:no-console\n\n        if (!IS_PRODUCTION) {\n          warn(false, \"Service '\".concat(_this.id, \"' has no parent: unable to send event \").concat(event.type));\n        }\n        return;\n      }\n      if ('machine' in target) {\n        // perhaps those events should be rejected in the parent\n        // but atm it doesn't have easy access to all of the information that is required to do it reliably\n        if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target ||\n        // we need to send events to the parent from exit handlers of a machine that reached its final state\n        _this.state.done) {\n          // Send SCXML events to machines\n          var scxmlEvent = __assign(__assign({}, event), {\n            name: event.name === error$1 ? \"\".concat(error(_this.id)) : event.name,\n            origin: _this.sessionId\n          });\n          if (!immediate && _this.machine.config.predictableActionArguments) {\n            _this._outgoingQueue.push([target, scxmlEvent]);\n          } else {\n            target.send(scxmlEvent);\n          }\n        }\n      } else {\n        // Send normal events to other targets\n        if (!immediate && _this.machine.config.predictableActionArguments) {\n          _this._outgoingQueue.push([target, event.data]);\n        } else {\n          target.send(event.data);\n        }\n      }\n    };\n    this._exec = function (action, context, _event, actionFunctionMap) {\n      if (actionFunctionMap === void 0) {\n        actionFunctionMap = _this.machine.options.actions;\n      }\n      var actionOrExec = action.exec || getActionFunction(action.type, actionFunctionMap);\n      var exec = isFunction(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;\n      if (exec) {\n        try {\n          return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {\n            action: action,\n            state: _this.state,\n            _event: _event\n          } : {\n            action: action,\n            _event: _event\n          });\n        } catch (err) {\n          if (_this.parent) {\n            _this.parent.send({\n              type: 'xstate.error',\n              data: err\n            });\n          }\n          throw err;\n        }\n      }\n      switch (action.type) {\n        case raise:\n          {\n            // if raise action reached the interpreter then it's a delayed one\n            var sendAction_1 = action;\n            _this.defer(sendAction_1);\n            break;\n          }\n        case send:\n          var sendAction = action;\n          if (typeof sendAction.delay === 'number') {\n            _this.defer(sendAction);\n            return;\n          } else {\n            if (sendAction.to) {\n              _this.sendTo(sendAction._event, sendAction.to, _event === initEvent);\n            } else {\n              _this.send(sendAction._event);\n            }\n          }\n          break;\n        case cancel:\n          _this.cancel(action.sendId);\n          break;\n        case start:\n          {\n            if (_this.status !== InterpreterStatus.Running) {\n              return;\n            }\n            var activity = action.activity; // If the activity will be stopped right after it's started\n            // (such as in transient states)\n            // don't bother starting the activity.\n\n            if (\n            // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state\n            !_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {\n              break;\n            } // Invoked services\n\n            if (activity.type === ActionTypes.Invoke) {\n              var invokeSource = toInvokeSource(activity.src);\n              var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;\n              var id = activity.id,\n                data = activity.data;\n              if (!IS_PRODUCTION) {\n                warn(!('forward' in activity),\n                // tslint:disable-next-line:max-line-length\n                \"`forward` property is deprecated (found in invocation of '\".concat(activity.src, \"' in in machine '\").concat(_this.machine.id, \"'). \") + \"Please use `autoForward` instead.\");\n              }\n              var autoForward = 'autoForward' in activity ? activity.autoForward : !!activity.forward;\n              if (!serviceCreator) {\n                // tslint:disable-next-line:no-console\n                if (!IS_PRODUCTION) {\n                  warn(false, \"No service found for invocation '\".concat(activity.src, \"' in machine '\").concat(_this.machine.id, \"'.\"));\n                }\n                return;\n              }\n              var resolvedData = data ? mapContext(data, context, _event) : undefined;\n              if (typeof serviceCreator === 'string') {\n                // TODO: warn\n                return;\n              }\n              var source = isFunction(serviceCreator) ? serviceCreator(context, _event.data, {\n                data: resolvedData,\n                src: invokeSource,\n                meta: activity.meta\n              }) : serviceCreator;\n              if (!source) {\n                // TODO: warn?\n                return;\n              }\n              var options = void 0;\n              if (isMachine(source)) {\n                source = resolvedData ? source.withContext(resolvedData) : source;\n                options = {\n                  autoForward: autoForward\n                };\n              }\n              _this.spawn(source, id, options);\n            } else {\n              _this.spawnActivity(activity);\n            }\n            break;\n          }\n        case stop:\n          {\n            _this.stopChild(action.activity.id);\n            break;\n          }\n        case log:\n          var _a = action,\n            label = _a.label,\n            value = _a.value;\n          if (label) {\n            _this.logger(label, value);\n          } else {\n            _this.logger(value);\n          }\n          break;\n        default:\n          if (!IS_PRODUCTION) {\n            warn(false, \"No implementation found for action type '\".concat(action.type, \"'\"));\n          }\n          break;\n      }\n    };\n    var resolvedOptions = __assign(__assign({}, Interpreter.defaultOptions), options);\n    var clock = resolvedOptions.clock,\n      logger = resolvedOptions.logger,\n      parent = resolvedOptions.parent,\n      id = resolvedOptions.id;\n    var resolvedId = id !== undefined ? id : machine.id;\n    this.id = resolvedId;\n    this.logger = logger;\n    this.clock = clock;\n    this.parent = parent;\n    this.options = resolvedOptions;\n    this.scheduler = new Scheduler({\n      deferEvents: this.options.deferEvents\n    });\n    this.sessionId = registry.bookId();\n  }\n  Object.defineProperty(Interpreter.prototype, \"initialState\", {\n    get: function () {\n      var _this = this;\n      if (this._initialState) {\n        return this._initialState;\n      }\n      return provide(this, function () {\n        _this._initialState = _this.machine.initialState;\n        return _this._initialState;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Interpreter.prototype, \"state\", {\n    /**\r\n     * @deprecated Use `.getSnapshot()` instead.\r\n     */\n    get: function () {\n      if (!IS_PRODUCTION) {\n        warn(this.status !== InterpreterStatus.NotStarted, \"Attempted to read state from uninitialized service '\".concat(this.id, \"'. Make sure the service is started first.\"));\n      }\n      return this._state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Executes the actions of the given state, with that state's `context` and `event`.\r\n   *\r\n   * @param state The state whose actions will be executed\r\n   * @param actionsConfig The action implementations to use\r\n   */\n\n  Interpreter.prototype.execute = function (state, actionsConfig) {\n    var e_1, _a;\n    try {\n      for (var _b = __values(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var action = _c.value;\n        this.exec(action, state, actionsConfig);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  Interpreter.prototype.update = function (state, _event) {\n    var e_2, _a, e_3, _b, e_4, _c, e_5, _d;\n    var _this = this; // Attach session ID to state\n\n    state._sessionid = this.sessionId; // Update state\n\n    this._state = state; // Execute actions\n\n    if ((!this.machine.config.predictableActionArguments ||\n    // this is currently required to execute initial actions as the `initialState` gets cached\n    // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns\n    _event === initEvent) && this.options.execute) {\n      this.execute(this.state);\n    } else {\n      var item = void 0;\n      while (item = this._outgoingQueue.shift()) {\n        item[0].send(item[1]);\n      }\n    } // Update children\n\n    this.children.forEach(function (child) {\n      _this.state.children[child.id] = child;\n    }); // Dev tools\n\n    if (this.devTools) {\n      this.devTools.send(_event.data, state);\n    } // Execute listeners\n\n    if (state.event) {\n      try {\n        for (var _e = __values(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var listener = _f.value;\n          listener(state.event);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n    try {\n      for (var _g = __values(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {\n        var listener = _h.value;\n        listener(state, state.event);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    try {\n      for (var _j = __values(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {\n        var contextListener = _k.value;\n        contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_k && !_k.done && (_c = _j.return)) _c.call(_j);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    if (this.state.done) {\n      // get final child state node\n      var finalChildStateNode = state.configuration.find(function (sn) {\n        return sn.type === 'final' && sn.parent === _this.machine;\n      });\n      var doneData = finalChildStateNode && finalChildStateNode.doneData ? mapContext(finalChildStateNode.doneData, state.context, _event) : undefined;\n      this._doneEvent = doneInvoke(this.id, doneData);\n      try {\n        for (var _l = __values(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {\n          var listener = _m.value;\n          listener(this._doneEvent);\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (_m && !_m.done && (_d = _l.return)) _d.call(_l);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n      this._stop();\n      this._stopChildren();\n      registry.free(this.sessionId);\n    }\n  };\n  /*\r\n   * Adds a listener that is notified whenever a state transition happens. The listener is called with\r\n   * the next state and the event object that caused the state transition.\r\n   *\r\n   * @param listener The state listener\r\n   */\n\n  Interpreter.prototype.onTransition = function (listener) {\n    this.listeners.add(listener); // Send current state to listener\n\n    if (this.status === InterpreterStatus.Running) {\n      listener(this.state, this.state.event);\n    }\n    return this;\n  };\n  Interpreter.prototype.subscribe = function (nextListenerOrObserver, _,\n  // TODO: error listener\n  completeListener) {\n    var _this = this;\n    var observer = toObserver(nextListenerOrObserver, _, completeListener);\n    this.listeners.add(observer.next); // Send current state to listener\n\n    if (this.status !== InterpreterStatus.NotStarted) {\n      observer.next(this.state);\n    }\n    var completeOnce = function () {\n      _this.doneListeners.delete(completeOnce);\n      _this.stopListeners.delete(completeOnce);\n      observer.complete();\n    };\n    if (this.status === InterpreterStatus.Stopped) {\n      observer.complete();\n    } else {\n      this.onDone(completeOnce);\n      this.onStop(completeOnce);\n    }\n    return {\n      unsubscribe: function () {\n        _this.listeners.delete(observer.next);\n        _this.doneListeners.delete(completeOnce);\n        _this.stopListeners.delete(completeOnce);\n      }\n    };\n  };\n  /**\r\n   * Adds an event listener that is notified whenever an event is sent to the running interpreter.\r\n   * @param listener The event listener\r\n   */\n\n  Interpreter.prototype.onEvent = function (listener) {\n    this.eventListeners.add(listener);\n    return this;\n  };\n  /**\r\n   * Adds an event listener that is notified whenever a `send` event occurs.\r\n   * @param listener The event listener\r\n   */\n\n  Interpreter.prototype.onSend = function (listener) {\n    this.sendListeners.add(listener);\n    return this;\n  };\n  /**\r\n   * Adds a context listener that is notified whenever the state context changes.\r\n   * @param listener The context listener\r\n   */\n\n  Interpreter.prototype.onChange = function (listener) {\n    this.contextListeners.add(listener);\n    return this;\n  };\n  /**\r\n   * Adds a listener that is notified when the machine is stopped.\r\n   * @param listener The listener\r\n   */\n\n  Interpreter.prototype.onStop = function (listener) {\n    this.stopListeners.add(listener);\n    return this;\n  };\n  /**\r\n   * Adds a state listener that is notified when the statechart has reached its final state.\r\n   * @param listener The state listener\r\n   */\n\n  Interpreter.prototype.onDone = function (listener) {\n    if (this.status === InterpreterStatus.Stopped && this._doneEvent) {\n      listener(this._doneEvent);\n    } else {\n      this.doneListeners.add(listener);\n    }\n    return this;\n  };\n  /**\r\n   * Removes a listener.\r\n   * @param listener The listener to remove\r\n   */\n\n  Interpreter.prototype.off = function (listener) {\n    this.listeners.delete(listener);\n    this.eventListeners.delete(listener);\n    this.sendListeners.delete(listener);\n    this.stopListeners.delete(listener);\n    this.doneListeners.delete(listener);\n    this.contextListeners.delete(listener);\n    return this;\n  };\n  /**\r\n   * Starts the interpreter from the given state, or the initial state.\r\n   * @param initialState The state to start the statechart from\r\n   */\n\n  Interpreter.prototype.start = function (initialState) {\n    var _this = this;\n    if (this.status === InterpreterStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)\n    // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call\n    // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions\n    // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)\n\n    this.machine._init();\n    registry.register(this.sessionId, this);\n    this.initialized = true;\n    this.status = InterpreterStatus.Running;\n    var resolvedState = initialState === undefined ? this.initialState : provide(this, function () {\n      return isStateConfig(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(State.from(initialState, _this.machine.context));\n    });\n    if (this.options.devTools) {\n      this.attachDev();\n    }\n    this.scheduler.initialize(function () {\n      _this.update(resolvedState, initEvent);\n    });\n    return this;\n  };\n  Interpreter.prototype._stopChildren = function () {\n    // TODO: think about converting those to actions\n    this.children.forEach(function (child) {\n      if (isFunction(child.stop)) {\n        child.stop();\n      }\n    });\n    this.children.clear();\n  };\n  Interpreter.prototype._stop = function () {\n    var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;\n    try {\n      for (var _f = __values(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {\n        var listener = _g.value;\n        this.listeners.delete(listener);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n    try {\n      for (var _h = __values(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {\n        var listener = _j.value; // call listener, then remove\n\n        listener();\n        this.stopListeners.delete(listener);\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n    try {\n      for (var _k = __values(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {\n        var listener = _l.value;\n        this.contextListeners.delete(listener);\n      }\n    } catch (e_8_1) {\n      e_8 = {\n        error: e_8_1\n      };\n    } finally {\n      try {\n        if (_l && !_l.done && (_c = _k.return)) _c.call(_k);\n      } finally {\n        if (e_8) throw e_8.error;\n      }\n    }\n    try {\n      for (var _m = __values(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {\n        var listener = _o.value;\n        this.doneListeners.delete(listener);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n    if (!this.initialized) {\n      // Interpreter already stopped; do nothing\n      return this;\n    }\n    this.initialized = false;\n    this.status = InterpreterStatus.Stopped;\n    this._initialState = undefined;\n    try {\n      // we are going to stop within the current sync frame\n      // so we can safely just cancel this here as nothing async should be fired anyway\n      for (var _p = __values(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {\n        var key = _q.value;\n        this.clock.clearTimeout(this.delayedEventsMap[key]);\n      }\n    } catch (e_10_1) {\n      e_10 = {\n        error: e_10_1\n      };\n    } finally {\n      try {\n        if (_q && !_q.done && (_e = _p.return)) _e.call(_p);\n      } finally {\n        if (e_10) throw e_10.error;\n      }\n    } // clear everything that might be enqueued\n\n    this.scheduler.clear();\n    this.scheduler = new Scheduler({\n      deferEvents: this.options.deferEvents\n    });\n  };\n  /**\r\n   * Stops the interpreter and unsubscribe all listeners.\r\n   *\r\n   * This will also notify the `onStop` listeners.\r\n   */\n\n  Interpreter.prototype.stop = function () {\n    // TODO: add warning for stopping non-root interpreters\n    var _this = this; // grab the current scheduler as it will be replaced in _stop\n\n    var scheduler = this.scheduler;\n    this._stop(); // let what is currently processed to be finished\n\n    scheduler.schedule(function () {\n      var _a;\n      if ((_a = _this._state) === null || _a === void 0 ? void 0 : _a.done) {\n        return;\n      } // it feels weird to handle this here but we need to handle this even slightly \"out of band\"\n\n      var _event = toSCXMLEvent({\n        type: 'xstate.stop'\n      });\n      var nextState = provide(_this, function () {\n        var exitActions = flatten(__spreadArray([], __read(_this.state.configuration), false).sort(function (a, b) {\n          return b.order - a.order;\n        }).map(function (stateNode) {\n          return toActionObjects(stateNode.onExit, _this.machine.options.actions);\n        }));\n        var _a = __read(resolveActions(_this.machine, _this.state, _this.state.context, _event, [{\n            type: 'exit',\n            actions: exitActions\n          }], _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2),\n          resolvedActions = _a[0],\n          updatedContext = _a[1];\n        var newState = new State({\n          value: _this.state.value,\n          context: updatedContext,\n          _event: _event,\n          _sessionid: _this.sessionId,\n          historyValue: undefined,\n          history: _this.state,\n          actions: resolvedActions.filter(function (action) {\n            return !isRaisableAction(action);\n          }),\n          activities: {},\n          events: [],\n          configuration: [],\n          transitions: [],\n          children: {},\n          done: _this.state.done,\n          tags: _this.state.tags,\n          machine: _this.machine\n        });\n        newState.changed = true;\n        return newState;\n      });\n      _this.update(nextState, _event);\n      _this._stopChildren();\n      registry.free(_this.sessionId);\n    });\n    return this;\n  };\n  Interpreter.prototype.batch = function (events) {\n    var _this = this;\n    if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {\n      // tslint:disable-next-line:no-console\n      if (!IS_PRODUCTION) {\n        warn(false, \"\".concat(events.length, \" event(s) were sent to uninitialized service \\\"\").concat(this.machine.id, \"\\\" and are deferred. Make sure .start() is called for this service.\\nEvent: \").concat(JSON.stringify(event)));\n      }\n    } else if (this.status !== InterpreterStatus.Running) {\n      throw new Error(\n      // tslint:disable-next-line:max-line-length\n      \"\".concat(events.length, \" event(s) were sent to uninitialized service \\\"\").concat(this.machine.id, \"\\\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\"));\n    }\n    if (!events.length) {\n      return;\n    }\n    var exec = !!this.machine.config.predictableActionArguments && this._exec;\n    this.scheduler.schedule(function () {\n      var e_11, _a;\n      var nextState = _this.state;\n      var batchChanged = false;\n      var batchedActions = [];\n      var _loop_1 = function (event_1) {\n        var _event = toSCXMLEvent(event_1);\n        _this.forward(_event);\n        nextState = provide(_this, function () {\n          return _this.machine.transition(nextState, _event, undefined, exec || undefined);\n        });\n        batchedActions.push.apply(batchedActions, __spreadArray([], __read(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function (a) {\n          return bindActionToState(a, nextState);\n        })), false));\n        batchChanged = batchChanged || !!nextState.changed;\n      };\n      try {\n        for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {\n          var event_1 = events_1_1.value;\n          _loop_1(event_1);\n        }\n      } catch (e_11_1) {\n        e_11 = {\n          error: e_11_1\n        };\n      } finally {\n        try {\n          if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);\n        } finally {\n          if (e_11) throw e_11.error;\n        }\n      }\n      nextState.changed = batchChanged;\n      nextState.actions = batchedActions;\n      _this.update(nextState, toSCXMLEvent(events[events.length - 1]));\n    });\n  };\n  /**\r\n   * Returns a send function bound to this interpreter instance.\r\n   *\r\n   * @param event The event to be sent by the sender.\r\n   */\n\n  Interpreter.prototype.sender = function (event) {\n    return this.send.bind(this, event);\n  };\n  Interpreter.prototype._nextState = function (event, exec) {\n    var _this = this;\n    if (exec === void 0) {\n      exec = !!this.machine.config.predictableActionArguments && this._exec;\n    }\n    var _event = toSCXMLEvent(event);\n    if (_event.name.indexOf(errorPlatform) === 0 && !this.state.nextEvents.some(function (nextEvent) {\n      return nextEvent.indexOf(errorPlatform) === 0;\n    })) {\n      throw _event.data.data;\n    }\n    var nextState = provide(this, function () {\n      return _this.machine.transition(_this.state, _event, undefined, exec || undefined);\n    });\n    return nextState;\n  };\n  /**\r\n   * Returns the next state given the interpreter's current state and the event.\r\n   *\r\n   * This is a pure method that does _not_ update the interpreter's state.\r\n   *\r\n   * @param event The event to determine the next state\r\n   */\n\n  Interpreter.prototype.nextState = function (event) {\n    return this._nextState(event, false);\n  };\n  Interpreter.prototype.forward = function (event) {\n    var e_12, _a;\n    try {\n      for (var _b = __values(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var id = _c.value;\n        var child = this.children.get(id);\n        if (!child) {\n          throw new Error(\"Unable to forward event '\".concat(event, \"' from interpreter '\").concat(this.id, \"' to nonexistant child '\").concat(id, \"'.\"));\n        }\n        child.send(event);\n      }\n    } catch (e_12_1) {\n      e_12 = {\n        error: e_12_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_12) throw e_12.error;\n      }\n    }\n  };\n  Interpreter.prototype.defer = function (sendAction) {\n    var _this = this;\n    var timerId = this.clock.setTimeout(function () {\n      if ('to' in sendAction && sendAction.to) {\n        _this.sendTo(sendAction._event, sendAction.to, true);\n      } else {\n        _this.send(sendAction._event);\n      }\n    }, sendAction.delay);\n    if (sendAction.id) {\n      this.delayedEventsMap[sendAction.id] = timerId;\n    }\n  };\n  Interpreter.prototype.cancel = function (sendId) {\n    this.clock.clearTimeout(this.delayedEventsMap[sendId]);\n    delete this.delayedEventsMap[sendId];\n  };\n  Interpreter.prototype.exec = function (action, state, actionFunctionMap) {\n    if (actionFunctionMap === void 0) {\n      actionFunctionMap = this.machine.options.actions;\n    }\n    this._exec(action, state.context, state._event, actionFunctionMap);\n  };\n  Interpreter.prototype.removeChild = function (childId) {\n    var _a;\n    this.children.delete(childId);\n    this.forwardTo.delete(childId); // this.state might not exist at the time this is called,\n    // such as when a child is added then removed while initializing the state\n\n    (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];\n  };\n  Interpreter.prototype.stopChild = function (childId) {\n    var child = this.children.get(childId);\n    if (!child) {\n      return;\n    }\n    this.removeChild(childId);\n    if (isFunction(child.stop)) {\n      child.stop();\n    }\n  };\n  Interpreter.prototype.spawn = function (entity, name, options) {\n    if (this.status !== InterpreterStatus.Running) {\n      return createDeferredActor(entity, name);\n    }\n    if (isPromiseLike(entity)) {\n      return this.spawnPromise(Promise.resolve(entity), name);\n    } else if (isFunction(entity)) {\n      return this.spawnCallback(entity, name);\n    } else if (isSpawnedActor(entity)) {\n      return this.spawnActor(entity, name);\n    } else if (isObservable(entity)) {\n      return this.spawnObservable(entity, name);\n    } else if (isMachine(entity)) {\n      return this.spawnMachine(entity, __assign(__assign({}, options), {\n        id: name\n      }));\n    } else if (isBehavior(entity)) {\n      return this.spawnBehavior(entity, name);\n    } else {\n      throw new Error(\"Unable to spawn entity \\\"\".concat(name, \"\\\" of type \\\"\").concat(typeof entity, \"\\\".\"));\n    }\n  };\n  Interpreter.prototype.spawnMachine = function (machine, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var childService = new Interpreter(machine, __assign(__assign({}, this.options), {\n      parent: this,\n      id: options.id || machine.id\n    }));\n    var resolvedOptions = __assign(__assign({}, DEFAULT_SPAWN_OPTIONS), options);\n    if (resolvedOptions.sync) {\n      childService.onTransition(function (state) {\n        _this.send(update, {\n          state: state,\n          id: childService.id\n        });\n      });\n    }\n    var actor = childService;\n    this.children.set(childService.id, actor);\n    if (resolvedOptions.autoForward) {\n      this.forwardTo.add(childService.id);\n    }\n    childService.onDone(function (doneEvent) {\n      _this.removeChild(childService.id);\n      _this.send(toSCXMLEvent(doneEvent, {\n        origin: childService.id\n      }));\n    }).start();\n    return actor;\n  };\n  Interpreter.prototype.spawnBehavior = function (behavior, id) {\n    var actorRef = spawnBehavior(behavior, {\n      id: id,\n      parent: this\n    });\n    this.children.set(id, actorRef);\n    return actorRef;\n  };\n  Interpreter.prototype.spawnPromise = function (promise, id) {\n    var _a;\n    var _this = this;\n    var canceled = false;\n    var resolvedData;\n    promise.then(function (response) {\n      if (!canceled) {\n        resolvedData = response;\n        _this.removeChild(id);\n        _this.send(toSCXMLEvent(doneInvoke(id, response), {\n          origin: id\n        }));\n      }\n    }, function (errorData) {\n      if (!canceled) {\n        _this.removeChild(id);\n        var errorEvent = error(id, errorData);\n        try {\n          // Send \"error.platform.id\" to this (parent).\n          _this.send(toSCXMLEvent(errorEvent, {\n            origin: id\n          }));\n        } catch (error) {\n          reportUnhandledExceptionOnInvocation(errorData, error, id);\n          if (_this.devTools) {\n            _this.devTools.send(errorEvent, _this.state);\n          }\n          if (_this.machine.strict) {\n            // it would be better to always stop the state machine if unhandled\n            // exception/promise rejection happens but because we don't want to\n            // break existing code so enforce it on strict mode only especially so\n            // because documentation says that onError is optional\n            _this.stop();\n          }\n        }\n      }\n    });\n    var actor = (_a = {\n      id: id,\n      send: function () {\n        return void 0;\n      },\n      subscribe: function (next, handleError, complete) {\n        var observer = toObserver(next, handleError, complete);\n        var unsubscribed = false;\n        promise.then(function (response) {\n          if (unsubscribed) {\n            return;\n          }\n          observer.next(response);\n          if (unsubscribed) {\n            return;\n          }\n          observer.complete();\n        }, function (err) {\n          if (unsubscribed) {\n            return;\n          }\n          observer.error(err);\n        });\n        return {\n          unsubscribe: function () {\n            return unsubscribed = true;\n          }\n        };\n      },\n      stop: function () {\n        canceled = true;\n      },\n      toJSON: function () {\n        return {\n          id: id\n        };\n      },\n      getSnapshot: function () {\n        return resolvedData;\n      }\n    }, _a[symbolObservable] = function () {\n      return this;\n    }, _a);\n    this.children.set(id, actor);\n    return actor;\n  };\n  Interpreter.prototype.spawnCallback = function (callback, id) {\n    var _a;\n    var _this = this;\n    var canceled = false;\n    var receivers = new Set();\n    var listeners = new Set();\n    var emitted;\n    var receive = function (e) {\n      emitted = e;\n      listeners.forEach(function (listener) {\n        return listener(e);\n      });\n      if (canceled) {\n        return;\n      }\n      _this.send(toSCXMLEvent(e, {\n        origin: id\n      }));\n    };\n    var callbackStop;\n    try {\n      callbackStop = callback(receive, function (newListener) {\n        receivers.add(newListener);\n      });\n    } catch (err) {\n      this.send(error(id, err));\n    }\n    if (isPromiseLike(callbackStop)) {\n      // it turned out to be an async function, can't reliably check this before calling `callback`\n      // because transpiled async functions are not recognizable\n      return this.spawnPromise(callbackStop, id);\n    }\n    var actor = (_a = {\n      id: id,\n      send: function (event) {\n        return receivers.forEach(function (receiver) {\n          return receiver(event);\n        });\n      },\n      subscribe: function (next) {\n        var observer = toObserver(next);\n        listeners.add(observer.next);\n        return {\n          unsubscribe: function () {\n            listeners.delete(observer.next);\n          }\n        };\n      },\n      stop: function () {\n        canceled = true;\n        if (isFunction(callbackStop)) {\n          callbackStop();\n        }\n      },\n      toJSON: function () {\n        return {\n          id: id\n        };\n      },\n      getSnapshot: function () {\n        return emitted;\n      }\n    }, _a[symbolObservable] = function () {\n      return this;\n    }, _a);\n    this.children.set(id, actor);\n    return actor;\n  };\n  Interpreter.prototype.spawnObservable = function (source, id) {\n    var _a;\n    var _this = this;\n    var emitted;\n    var subscription = source.subscribe(function (value) {\n      emitted = value;\n      _this.send(toSCXMLEvent(value, {\n        origin: id\n      }));\n    }, function (err) {\n      _this.removeChild(id);\n      _this.send(toSCXMLEvent(error(id, err), {\n        origin: id\n      }));\n    }, function () {\n      _this.removeChild(id);\n      _this.send(toSCXMLEvent(doneInvoke(id), {\n        origin: id\n      }));\n    });\n    var actor = (_a = {\n      id: id,\n      send: function () {\n        return void 0;\n      },\n      subscribe: function (next, handleError, complete) {\n        return source.subscribe(next, handleError, complete);\n      },\n      stop: function () {\n        return subscription.unsubscribe();\n      },\n      getSnapshot: function () {\n        return emitted;\n      },\n      toJSON: function () {\n        return {\n          id: id\n        };\n      }\n    }, _a[symbolObservable] = function () {\n      return this;\n    }, _a);\n    this.children.set(id, actor);\n    return actor;\n  };\n  Interpreter.prototype.spawnActor = function (actor, name) {\n    this.children.set(name, actor);\n    return actor;\n  };\n  Interpreter.prototype.spawnActivity = function (activity) {\n    var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;\n    if (!implementation) {\n      if (!IS_PRODUCTION) {\n        warn(false, \"No implementation found for activity '\".concat(activity.type, \"'\"));\n      } // tslint:disable-next-line:no-console\n\n      return;\n    } // Start implementation\n\n    var dispose = implementation(this.state.context, activity);\n    this.spawnEffect(activity.id, dispose);\n  };\n  Interpreter.prototype.spawnEffect = function (id, dispose) {\n    var _a;\n    this.children.set(id, (_a = {\n      id: id,\n      send: function () {\n        return void 0;\n      },\n      subscribe: function () {\n        return {\n          unsubscribe: function () {\n            return void 0;\n          }\n        };\n      },\n      stop: dispose || undefined,\n      getSnapshot: function () {\n        return undefined;\n      },\n      toJSON: function () {\n        return {\n          id: id\n        };\n      }\n    }, _a[symbolObservable] = function () {\n      return this;\n    }, _a));\n  };\n  Interpreter.prototype.attachDev = function () {\n    var global = getGlobal();\n    if (this.options.devTools && global) {\n      if (global.__REDUX_DEVTOOLS_EXTENSION__) {\n        var devToolsOptions = typeof this.options.devTools === 'object' ? this.options.devTools : undefined;\n        this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect(__assign(__assign({\n          name: this.id,\n          autoPause: true,\n          stateSanitizer: function (state) {\n            return {\n              value: state.value,\n              context: state.context,\n              actions: state.actions\n            };\n          }\n        }, devToolsOptions), {\n          features: __assign({\n            jump: false,\n            skip: false\n          }, devToolsOptions ? devToolsOptions.features : undefined)\n        }), this.machine);\n        this.devTools.init(this.state);\n      } // add XState-specific dev tooling hook\n\n      registerService(this);\n    }\n  };\n  Interpreter.prototype.toJSON = function () {\n    return {\n      id: this.id\n    };\n  };\n  Interpreter.prototype[symbolObservable] = function () {\n    return this;\n  };\n  Interpreter.prototype.getSnapshot = function () {\n    if (this.status === InterpreterStatus.NotStarted) {\n      return this.initialState;\n    }\n    return this._state;\n  };\n  /**\r\n   * The default interpreter options:\r\n   *\r\n   * - `clock` uses the global `setTimeout` and `clearTimeout` functions\r\n   * - `logger` uses the global `console.log()` method\r\n   */\n\n  Interpreter.defaultOptions = {\n    execute: true,\n    deferEvents: true,\n    clock: {\n      setTimeout: function (fn, ms) {\n        return setTimeout(fn, ms);\n      },\n      clearTimeout: function (id) {\n        return clearTimeout(id);\n      }\n    },\n    logger: /*#__PURE__*/console.log.bind(console),\n    devTools: false\n  };\n  Interpreter.interpret = interpret;\n  return Interpreter;\n}();\nvar resolveSpawnOptions = function (nameOrOptions) {\n  if (isString(nameOrOptions)) {\n    return __assign(__assign({}, DEFAULT_SPAWN_OPTIONS), {\n      name: nameOrOptions\n    });\n  }\n  return __assign(__assign(__assign({}, DEFAULT_SPAWN_OPTIONS), {\n    name: uniqueId()\n  }), nameOrOptions);\n};\nfunction spawn(entity, nameOrOptions) {\n  var resolvedOptions = resolveSpawnOptions(nameOrOptions);\n  return consume(function (service) {\n    if (!IS_PRODUCTION) {\n      var isLazyEntity = isMachine(entity) || isFunction(entity);\n      warn(!!service || isLazyEntity, \"Attempted to spawn an Actor (ID: \\\"\".concat(isMachine(entity) ? entity.id : 'undefined', \"\\\") outside of a service. This will have no effect.\"));\n    }\n    if (service) {\n      return service.spawn(entity, resolvedOptions.name, resolvedOptions);\n    } else {\n      return createDeferredActor(entity, resolvedOptions.name);\n    }\n  });\n}\n/**\r\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\r\n *\r\n * @param machine The machine to interpret\r\n * @param options Interpreter options\r\n */\n\nfunction interpret(machine, options) {\n  var interpreter = new Interpreter(machine, options);\n  return interpreter;\n}\nexport { Interpreter, InterpreterStatus, interpret, spawn };","map":{"version":3,"names":["__values","__spreadArray","__read","__assign","SpecialTargets","ActionTypes","isStateConfig","State","bindActionToState","errorPlatform","update","error","error$1","log","stop","start","cancel","send","raise","initEvent","doneInvoke","toActionObjects","resolveActions","getActionFunction","IS_PRODUCTION","warn","mapContext","toObserver","isFunction","toSCXMLEvent","flatten","isRaisableAction","isPromiseLike","isObservable","isMachine","isBehavior","reportUnhandledExceptionOnInvocation","symbolObservable","isArray","toEventObject","isString","isActor","toInvokeSource","uniqueId","Scheduler","createDeferredActor","isSpawnedActor","registry","getGlobal","registerService","provide","consume","spawnBehavior","DEFAULT_SPAWN_OPTIONS","sync","autoForward","InterpreterStatus","Interpreter","machine","options","defaultOptions","_this","delayedEventsMap","listeners","Set","contextListeners","stopListeners","doneListeners","eventListeners","sendListeners","initialized","status","NotStarted","children","Map","forwardTo","_outgoingQueue","init","event","payload","batch","state","_event","Stopped","concat","name","id","JSON","stringify","data","Running","deferEvents","Error","scheduler","schedule","forward","nextState","_nextState","_state","sendTo","to","immediate","isParent","parent","Parent","target","Internal","get","undefined","type","done","scxmlEvent","origin","sessionId","config","predictableActionArguments","push","_exec","action","context","actionFunctionMap","actions","actionOrExec","exec","err","sendAction_1","defer","sendAction","delay","sendId","activity","activities","Invoke","invokeSource","src","serviceCreator","services","resolvedData","source","meta","withContext","spawn","spawnActivity","stopChild","_a","label","value","logger","resolvedOptions","clock","resolvedId","bookId","Object","defineProperty","prototype","_initialState","initialState","enumerable","configurable","execute","actionsConfig","e_1","_b","_c","next","e_1_1","return","call","e_2","e_3","e_4","e_5","_d","_sessionid","item","shift","forEach","child","devTools","_e","_f","listener","e_2_1","_g","_h","e_3_1","_j","_k","contextListener","history","e_4_1","finalChildStateNode","configuration","find","sn","doneData","_doneEvent","_l","_m","e_5_1","_stop","_stopChildren","free","onTransition","add","subscribe","nextListenerOrObserver","_","completeListener","observer","completeOnce","delete","complete","onDone","onStop","unsubscribe","onEvent","onSend","onChange","off","_init","register","resolvedState","resolveState","from","attachDev","initialize","clear","e_6","e_7","e_8","e_9","e_10","e_6_1","e_7_1","e_8_1","_o","e_9_1","_p","keys","_q","key","clearTimeout","e_10_1","exitActions","sort","a","b","order","map","stateNode","onExit","preserveActionOrder","resolvedActions","updatedContext","newState","historyValue","filter","events","transitions","tags","changed","length","e_11","batchChanged","batchedActions","_loop_1","event_1","transition","apply","events_1","events_1_1","e_11_1","sender","bind","indexOf","nextEvents","some","nextEvent","e_12","e_12_1","timerId","setTimeout","removeChild","childId","entity","spawnPromise","Promise","resolve","spawnCallback","spawnActor","spawnObservable","spawnMachine","childService","actor","set","doneEvent","behavior","actorRef","promise","canceled","then","response","errorData","errorEvent","strict","handleError","unsubscribed","toJSON","getSnapshot","callback","receivers","emitted","receive","e","callbackStop","newListener","receiver","subscription","implementation","dispose","spawnEffect","global","__REDUX_DEVTOOLS_EXTENSION__","devToolsOptions","connect","autoPause","stateSanitizer","features","jump","skip","fn","ms","console","interpret","resolveSpawnOptions","nameOrOptions","service","isLazyEntity","interpreter"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/xstate/es/interpreter.js"],"sourcesContent":["import { __values, __spreadArray, __read, __assign } from './_virtual/_tslib.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { isStateConfig, State, bindActionToState } from './State.js';\nimport { errorPlatform, update, error as error$1, log, stop, start, cancel, send, raise } from './actionTypes.js';\nimport { initEvent, doneInvoke, toActionObjects, resolveActions, error, getActionFunction } from './actions.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { warn, mapContext, toObserver, isFunction, toSCXMLEvent, flatten, isRaisableAction, isPromiseLike, isObservable, isMachine, isBehavior, reportUnhandledExceptionOnInvocation, symbolObservable, isArray, toEventObject, isString, isActor, toInvokeSource, uniqueId } from './utils.js';\nimport { Scheduler } from './scheduler.js';\nimport { createDeferredActor, isSpawnedActor } from './Actor.js';\nimport { registry } from './registry.js';\nimport { getGlobal, registerService } from './devTools.js';\nimport { provide, consume } from './serviceScope.js';\nimport { spawnBehavior } from './behaviors.js';\n\nvar DEFAULT_SPAWN_OPTIONS = {\n  sync: false,\n  autoForward: false\n};\nvar InterpreterStatus;\n\n(function (InterpreterStatus) {\n  InterpreterStatus[InterpreterStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  InterpreterStatus[InterpreterStatus[\"Running\"] = 1] = \"Running\";\n  InterpreterStatus[InterpreterStatus[\"Stopped\"] = 2] = \"Stopped\";\n})(InterpreterStatus || (InterpreterStatus = {}));\n\nvar Interpreter =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.\r\n   *\r\n   * @param machine The machine to be interpreted\r\n   * @param options Interpreter options\r\n   */\n  function Interpreter(machine, options) {\n    if (options === void 0) {\n      options = Interpreter.defaultOptions;\n    }\n\n    var _this = this;\n\n    this.machine = machine;\n    this.delayedEventsMap = {};\n    this.listeners = new Set();\n    this.contextListeners = new Set();\n    this.stopListeners = new Set();\n    this.doneListeners = new Set();\n    this.eventListeners = new Set();\n    this.sendListeners = new Set();\n    /**\r\n     * Whether the service is started.\r\n     */\n\n    this.initialized = false;\n    this.status = InterpreterStatus.NotStarted;\n    this.children = new Map();\n    this.forwardTo = new Set();\n    this._outgoingQueue = [];\n    /**\r\n     * Alias for Interpreter.prototype.start\r\n     */\n\n    this.init = this.start;\n    /**\r\n     * Sends an event to the running interpreter to trigger a transition.\r\n     *\r\n     * An array of events (batched) can be sent as well, which will send all\r\n     * batched events to the running interpreter. The listeners will be\r\n     * notified only **once** when all events are processed.\r\n     *\r\n     * @param event The event(s) to send\r\n     */\n\n    this.send = function (event, payload) {\n      if (isArray(event)) {\n        _this.batch(event);\n\n        return _this.state;\n      }\n\n      var _event = toSCXMLEvent(toEventObject(event, payload));\n\n      if (_this.status === InterpreterStatus.Stopped) {\n        // do nothing\n        if (!IS_PRODUCTION) {\n          warn(false, \"Event \\\"\".concat(_event.name, \"\\\" was sent to stopped service \\\"\").concat(_this.machine.id, \"\\\". This service has already reached its final state, and will not transition.\\nEvent: \").concat(JSON.stringify(_event.data)));\n        }\n\n        return _this.state;\n      }\n\n      if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {\n        throw new Error(\"Event \\\"\".concat(_event.name, \"\\\" was sent to uninitialized service \\\"\").concat(_this.machine.id // tslint:disable-next-line:max-line-length\n        , \"\\\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\\nEvent: \").concat(JSON.stringify(_event.data)));\n      }\n\n      _this.scheduler.schedule(function () {\n        // Forward copy of event to child actors\n        _this.forward(_event);\n\n        var nextState = _this._nextState(_event);\n\n        _this.update(nextState, _event);\n      });\n\n      return _this._state; // TODO: deprecate (should return void)\n      // tslint:disable-next-line:semicolon\n    };\n\n    this.sendTo = function (event, to, immediate) {\n      var isParent = _this.parent && (to === SpecialTargets.Parent || _this.parent.id === to);\n      var target = isParent ? _this.parent : isString(to) ? to === SpecialTargets.Internal ? _this : _this.children.get(to) || registry.get(to) : isActor(to) ? to : undefined;\n\n      if (!target) {\n        if (!isParent) {\n          throw new Error(\"Unable to send event to child '\".concat(to, \"' from service '\").concat(_this.id, \"'.\"));\n        } // tslint:disable-next-line:no-console\n\n\n        if (!IS_PRODUCTION) {\n          warn(false, \"Service '\".concat(_this.id, \"' has no parent: unable to send event \").concat(event.type));\n        }\n\n        return;\n      }\n\n      if ('machine' in target) {\n        // perhaps those events should be rejected in the parent\n        // but atm it doesn't have easy access to all of the information that is required to do it reliably\n        if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target || // we need to send events to the parent from exit handlers of a machine that reached its final state\n        _this.state.done) {\n          // Send SCXML events to machines\n          var scxmlEvent = __assign(__assign({}, event), {\n            name: event.name === error$1 ? \"\".concat(error(_this.id)) : event.name,\n            origin: _this.sessionId\n          });\n\n          if (!immediate && _this.machine.config.predictableActionArguments) {\n            _this._outgoingQueue.push([target, scxmlEvent]);\n          } else {\n            target.send(scxmlEvent);\n          }\n        }\n      } else {\n        // Send normal events to other targets\n        if (!immediate && _this.machine.config.predictableActionArguments) {\n          _this._outgoingQueue.push([target, event.data]);\n        } else {\n          target.send(event.data);\n        }\n      }\n    };\n\n    this._exec = function (action, context, _event, actionFunctionMap) {\n      if (actionFunctionMap === void 0) {\n        actionFunctionMap = _this.machine.options.actions;\n      }\n\n      var actionOrExec = action.exec || getActionFunction(action.type, actionFunctionMap);\n      var exec = isFunction(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;\n\n      if (exec) {\n        try {\n          return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {\n            action: action,\n            state: _this.state,\n            _event: _event\n          } : {\n            action: action,\n            _event: _event\n          });\n        } catch (err) {\n          if (_this.parent) {\n            _this.parent.send({\n              type: 'xstate.error',\n              data: err\n            });\n          }\n\n          throw err;\n        }\n      }\n\n      switch (action.type) {\n        case raise:\n          {\n            // if raise action reached the interpreter then it's a delayed one\n            var sendAction_1 = action;\n\n            _this.defer(sendAction_1);\n\n            break;\n          }\n\n        case send:\n          var sendAction = action;\n\n          if (typeof sendAction.delay === 'number') {\n            _this.defer(sendAction);\n\n            return;\n          } else {\n            if (sendAction.to) {\n              _this.sendTo(sendAction._event, sendAction.to, _event === initEvent);\n            } else {\n              _this.send(sendAction._event);\n            }\n          }\n\n          break;\n\n        case cancel:\n          _this.cancel(action.sendId);\n\n          break;\n\n        case start:\n          {\n            if (_this.status !== InterpreterStatus.Running) {\n              return;\n            }\n\n            var activity = action.activity; // If the activity will be stopped right after it's started\n            // (such as in transient states)\n            // don't bother starting the activity.\n\n            if ( // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state\n            !_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {\n              break;\n            } // Invoked services\n\n\n            if (activity.type === ActionTypes.Invoke) {\n              var invokeSource = toInvokeSource(activity.src);\n              var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;\n              var id = activity.id,\n                  data = activity.data;\n\n              if (!IS_PRODUCTION) {\n                warn(!('forward' in activity), // tslint:disable-next-line:max-line-length\n                \"`forward` property is deprecated (found in invocation of '\".concat(activity.src, \"' in in machine '\").concat(_this.machine.id, \"'). \") + \"Please use `autoForward` instead.\");\n              }\n\n              var autoForward = 'autoForward' in activity ? activity.autoForward : !!activity.forward;\n\n              if (!serviceCreator) {\n                // tslint:disable-next-line:no-console\n                if (!IS_PRODUCTION) {\n                  warn(false, \"No service found for invocation '\".concat(activity.src, \"' in machine '\").concat(_this.machine.id, \"'.\"));\n                }\n\n                return;\n              }\n\n              var resolvedData = data ? mapContext(data, context, _event) : undefined;\n\n              if (typeof serviceCreator === 'string') {\n                // TODO: warn\n                return;\n              }\n\n              var source = isFunction(serviceCreator) ? serviceCreator(context, _event.data, {\n                data: resolvedData,\n                src: invokeSource,\n                meta: activity.meta\n              }) : serviceCreator;\n\n              if (!source) {\n                // TODO: warn?\n                return;\n              }\n\n              var options = void 0;\n\n              if (isMachine(source)) {\n                source = resolvedData ? source.withContext(resolvedData) : source;\n                options = {\n                  autoForward: autoForward\n                };\n              }\n\n              _this.spawn(source, id, options);\n            } else {\n              _this.spawnActivity(activity);\n            }\n\n            break;\n          }\n\n        case stop:\n          {\n            _this.stopChild(action.activity.id);\n\n            break;\n          }\n\n        case log:\n          var _a = action,\n              label = _a.label,\n              value = _a.value;\n\n          if (label) {\n            _this.logger(label, value);\n          } else {\n            _this.logger(value);\n          }\n\n          break;\n\n        default:\n          if (!IS_PRODUCTION) {\n            warn(false, \"No implementation found for action type '\".concat(action.type, \"'\"));\n          }\n\n          break;\n      }\n    };\n\n    var resolvedOptions = __assign(__assign({}, Interpreter.defaultOptions), options);\n\n    var clock = resolvedOptions.clock,\n        logger = resolvedOptions.logger,\n        parent = resolvedOptions.parent,\n        id = resolvedOptions.id;\n    var resolvedId = id !== undefined ? id : machine.id;\n    this.id = resolvedId;\n    this.logger = logger;\n    this.clock = clock;\n    this.parent = parent;\n    this.options = resolvedOptions;\n    this.scheduler = new Scheduler({\n      deferEvents: this.options.deferEvents\n    });\n    this.sessionId = registry.bookId();\n  }\n\n  Object.defineProperty(Interpreter.prototype, \"initialState\", {\n    get: function () {\n      var _this = this;\n\n      if (this._initialState) {\n        return this._initialState;\n      }\n\n      return provide(this, function () {\n        _this._initialState = _this.machine.initialState;\n        return _this._initialState;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Interpreter.prototype, \"state\", {\n    /**\r\n     * @deprecated Use `.getSnapshot()` instead.\r\n     */\n    get: function () {\n      if (!IS_PRODUCTION) {\n        warn(this.status !== InterpreterStatus.NotStarted, \"Attempted to read state from uninitialized service '\".concat(this.id, \"'. Make sure the service is started first.\"));\n      }\n\n      return this._state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Executes the actions of the given state, with that state's `context` and `event`.\r\n   *\r\n   * @param state The state whose actions will be executed\r\n   * @param actionsConfig The action implementations to use\r\n   */\n\n  Interpreter.prototype.execute = function (state, actionsConfig) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var action = _c.value;\n        this.exec(action, state, actionsConfig);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  Interpreter.prototype.update = function (state, _event) {\n    var e_2, _a, e_3, _b, e_4, _c, e_5, _d;\n\n    var _this = this; // Attach session ID to state\n\n\n    state._sessionid = this.sessionId; // Update state\n\n    this._state = state; // Execute actions\n\n    if ((!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached\n    // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns\n    _event === initEvent) && this.options.execute) {\n      this.execute(this.state);\n    } else {\n      var item = void 0;\n\n      while (item = this._outgoingQueue.shift()) {\n        item[0].send(item[1]);\n      }\n    } // Update children\n\n\n    this.children.forEach(function (child) {\n      _this.state.children[child.id] = child;\n    }); // Dev tools\n\n    if (this.devTools) {\n      this.devTools.send(_event.data, state);\n    } // Execute listeners\n\n\n    if (state.event) {\n      try {\n        for (var _e = __values(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var listener = _f.value;\n          listener(state.event);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n\n    try {\n      for (var _g = __values(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {\n        var listener = _h.value;\n        listener(state, state.event);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    try {\n      for (var _j = __values(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {\n        var contextListener = _k.value;\n        contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_k && !_k.done && (_c = _j.return)) _c.call(_j);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    if (this.state.done) {\n      // get final child state node\n      var finalChildStateNode = state.configuration.find(function (sn) {\n        return sn.type === 'final' && sn.parent === _this.machine;\n      });\n      var doneData = finalChildStateNode && finalChildStateNode.doneData ? mapContext(finalChildStateNode.doneData, state.context, _event) : undefined;\n      this._doneEvent = doneInvoke(this.id, doneData);\n\n      try {\n        for (var _l = __values(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {\n          var listener = _m.value;\n          listener(this._doneEvent);\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (_m && !_m.done && (_d = _l.return)) _d.call(_l);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n\n      this._stop();\n\n      this._stopChildren();\n\n      registry.free(this.sessionId);\n    }\n  };\n  /*\r\n   * Adds a listener that is notified whenever a state transition happens. The listener is called with\r\n   * the next state and the event object that caused the state transition.\r\n   *\r\n   * @param listener The state listener\r\n   */\n\n\n  Interpreter.prototype.onTransition = function (listener) {\n    this.listeners.add(listener); // Send current state to listener\n\n    if (this.status === InterpreterStatus.Running) {\n      listener(this.state, this.state.event);\n    }\n\n    return this;\n  };\n\n  Interpreter.prototype.subscribe = function (nextListenerOrObserver, _, // TODO: error listener\n  completeListener) {\n    var _this = this;\n\n    var observer = toObserver(nextListenerOrObserver, _, completeListener);\n    this.listeners.add(observer.next); // Send current state to listener\n\n    if (this.status !== InterpreterStatus.NotStarted) {\n      observer.next(this.state);\n    }\n\n    var completeOnce = function () {\n      _this.doneListeners.delete(completeOnce);\n\n      _this.stopListeners.delete(completeOnce);\n\n      observer.complete();\n    };\n\n    if (this.status === InterpreterStatus.Stopped) {\n      observer.complete();\n    } else {\n      this.onDone(completeOnce);\n      this.onStop(completeOnce);\n    }\n\n    return {\n      unsubscribe: function () {\n        _this.listeners.delete(observer.next);\n\n        _this.doneListeners.delete(completeOnce);\n\n        _this.stopListeners.delete(completeOnce);\n      }\n    };\n  };\n  /**\r\n   * Adds an event listener that is notified whenever an event is sent to the running interpreter.\r\n   * @param listener The event listener\r\n   */\n\n\n  Interpreter.prototype.onEvent = function (listener) {\n    this.eventListeners.add(listener);\n    return this;\n  };\n  /**\r\n   * Adds an event listener that is notified whenever a `send` event occurs.\r\n   * @param listener The event listener\r\n   */\n\n\n  Interpreter.prototype.onSend = function (listener) {\n    this.sendListeners.add(listener);\n    return this;\n  };\n  /**\r\n   * Adds a context listener that is notified whenever the state context changes.\r\n   * @param listener The context listener\r\n   */\n\n\n  Interpreter.prototype.onChange = function (listener) {\n    this.contextListeners.add(listener);\n    return this;\n  };\n  /**\r\n   * Adds a listener that is notified when the machine is stopped.\r\n   * @param listener The listener\r\n   */\n\n\n  Interpreter.prototype.onStop = function (listener) {\n    this.stopListeners.add(listener);\n    return this;\n  };\n  /**\r\n   * Adds a state listener that is notified when the statechart has reached its final state.\r\n   * @param listener The state listener\r\n   */\n\n\n  Interpreter.prototype.onDone = function (listener) {\n    if (this.status === InterpreterStatus.Stopped && this._doneEvent) {\n      listener(this._doneEvent);\n    } else {\n      this.doneListeners.add(listener);\n    }\n\n    return this;\n  };\n  /**\r\n   * Removes a listener.\r\n   * @param listener The listener to remove\r\n   */\n\n\n  Interpreter.prototype.off = function (listener) {\n    this.listeners.delete(listener);\n    this.eventListeners.delete(listener);\n    this.sendListeners.delete(listener);\n    this.stopListeners.delete(listener);\n    this.doneListeners.delete(listener);\n    this.contextListeners.delete(listener);\n    return this;\n  };\n  /**\r\n   * Starts the interpreter from the given state, or the initial state.\r\n   * @param initialState The state to start the statechart from\r\n   */\n\n\n  Interpreter.prototype.start = function (initialState) {\n    var _this = this;\n\n    if (this.status === InterpreterStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)\n    // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call\n    // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions\n    // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)\n\n\n    this.machine._init();\n\n    registry.register(this.sessionId, this);\n    this.initialized = true;\n    this.status = InterpreterStatus.Running;\n    var resolvedState = initialState === undefined ? this.initialState : provide(this, function () {\n      return isStateConfig(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(State.from(initialState, _this.machine.context));\n    });\n\n    if (this.options.devTools) {\n      this.attachDev();\n    }\n\n    this.scheduler.initialize(function () {\n      _this.update(resolvedState, initEvent);\n    });\n    return this;\n  };\n\n  Interpreter.prototype._stopChildren = function () {\n    // TODO: think about converting those to actions\n    this.children.forEach(function (child) {\n      if (isFunction(child.stop)) {\n        child.stop();\n      }\n    });\n    this.children.clear();\n  };\n\n  Interpreter.prototype._stop = function () {\n    var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;\n\n    try {\n      for (var _f = __values(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {\n        var listener = _g.value;\n        this.listeners.delete(listener);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    try {\n      for (var _h = __values(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {\n        var listener = _j.value; // call listener, then remove\n\n        listener();\n        this.stopListeners.delete(listener);\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n\n    try {\n      for (var _k = __values(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {\n        var listener = _l.value;\n        this.contextListeners.delete(listener);\n      }\n    } catch (e_8_1) {\n      e_8 = {\n        error: e_8_1\n      };\n    } finally {\n      try {\n        if (_l && !_l.done && (_c = _k.return)) _c.call(_k);\n      } finally {\n        if (e_8) throw e_8.error;\n      }\n    }\n\n    try {\n      for (var _m = __values(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {\n        var listener = _o.value;\n        this.doneListeners.delete(listener);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    if (!this.initialized) {\n      // Interpreter already stopped; do nothing\n      return this;\n    }\n\n    this.initialized = false;\n    this.status = InterpreterStatus.Stopped;\n    this._initialState = undefined;\n\n    try {\n      // we are going to stop within the current sync frame\n      // so we can safely just cancel this here as nothing async should be fired anyway\n      for (var _p = __values(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {\n        var key = _q.value;\n        this.clock.clearTimeout(this.delayedEventsMap[key]);\n      }\n    } catch (e_10_1) {\n      e_10 = {\n        error: e_10_1\n      };\n    } finally {\n      try {\n        if (_q && !_q.done && (_e = _p.return)) _e.call(_p);\n      } finally {\n        if (e_10) throw e_10.error;\n      }\n    } // clear everything that might be enqueued\n\n\n    this.scheduler.clear();\n    this.scheduler = new Scheduler({\n      deferEvents: this.options.deferEvents\n    });\n  };\n  /**\r\n   * Stops the interpreter and unsubscribe all listeners.\r\n   *\r\n   * This will also notify the `onStop` listeners.\r\n   */\n\n\n  Interpreter.prototype.stop = function () {\n    // TODO: add warning for stopping non-root interpreters\n    var _this = this; // grab the current scheduler as it will be replaced in _stop\n\n\n    var scheduler = this.scheduler;\n\n    this._stop(); // let what is currently processed to be finished\n\n\n    scheduler.schedule(function () {\n      var _a;\n\n      if ((_a = _this._state) === null || _a === void 0 ? void 0 : _a.done) {\n        return;\n      } // it feels weird to handle this here but we need to handle this even slightly \"out of band\"\n\n\n      var _event = toSCXMLEvent({\n        type: 'xstate.stop'\n      });\n\n      var nextState = provide(_this, function () {\n        var exitActions = flatten(__spreadArray([], __read(_this.state.configuration), false).sort(function (a, b) {\n          return b.order - a.order;\n        }).map(function (stateNode) {\n          return toActionObjects(stateNode.onExit, _this.machine.options.actions);\n        }));\n\n        var _a = __read(resolveActions(_this.machine, _this.state, _this.state.context, _event, [{\n          type: 'exit',\n          actions: exitActions\n        }], _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2),\n            resolvedActions = _a[0],\n            updatedContext = _a[1];\n\n        var newState = new State({\n          value: _this.state.value,\n          context: updatedContext,\n          _event: _event,\n          _sessionid: _this.sessionId,\n          historyValue: undefined,\n          history: _this.state,\n          actions: resolvedActions.filter(function (action) {\n            return !isRaisableAction(action);\n          }),\n          activities: {},\n          events: [],\n          configuration: [],\n          transitions: [],\n          children: {},\n          done: _this.state.done,\n          tags: _this.state.tags,\n          machine: _this.machine\n        });\n        newState.changed = true;\n        return newState;\n      });\n\n      _this.update(nextState, _event);\n\n      _this._stopChildren();\n\n      registry.free(_this.sessionId);\n    });\n    return this;\n  };\n\n  Interpreter.prototype.batch = function (events) {\n    var _this = this;\n\n    if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {\n      // tslint:disable-next-line:no-console\n      if (!IS_PRODUCTION) {\n        warn(false, \"\".concat(events.length, \" event(s) were sent to uninitialized service \\\"\").concat(this.machine.id, \"\\\" and are deferred. Make sure .start() is called for this service.\\nEvent: \").concat(JSON.stringify(event)));\n      }\n    } else if (this.status !== InterpreterStatus.Running) {\n      throw new Error( // tslint:disable-next-line:max-line-length\n      \"\".concat(events.length, \" event(s) were sent to uninitialized service \\\"\").concat(this.machine.id, \"\\\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\"));\n    }\n\n    if (!events.length) {\n      return;\n    }\n\n    var exec = !!this.machine.config.predictableActionArguments && this._exec;\n    this.scheduler.schedule(function () {\n      var e_11, _a;\n\n      var nextState = _this.state;\n      var batchChanged = false;\n      var batchedActions = [];\n\n      var _loop_1 = function (event_1) {\n        var _event = toSCXMLEvent(event_1);\n\n        _this.forward(_event);\n\n        nextState = provide(_this, function () {\n          return _this.machine.transition(nextState, _event, undefined, exec || undefined);\n        });\n        batchedActions.push.apply(batchedActions, __spreadArray([], __read(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function (a) {\n          return bindActionToState(a, nextState);\n        })), false));\n        batchChanged = batchChanged || !!nextState.changed;\n      };\n\n      try {\n        for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {\n          var event_1 = events_1_1.value;\n\n          _loop_1(event_1);\n        }\n      } catch (e_11_1) {\n        e_11 = {\n          error: e_11_1\n        };\n      } finally {\n        try {\n          if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);\n        } finally {\n          if (e_11) throw e_11.error;\n        }\n      }\n\n      nextState.changed = batchChanged;\n      nextState.actions = batchedActions;\n\n      _this.update(nextState, toSCXMLEvent(events[events.length - 1]));\n    });\n  };\n  /**\r\n   * Returns a send function bound to this interpreter instance.\r\n   *\r\n   * @param event The event to be sent by the sender.\r\n   */\n\n\n  Interpreter.prototype.sender = function (event) {\n    return this.send.bind(this, event);\n  };\n\n  Interpreter.prototype._nextState = function (event, exec) {\n    var _this = this;\n\n    if (exec === void 0) {\n      exec = !!this.machine.config.predictableActionArguments && this._exec;\n    }\n\n    var _event = toSCXMLEvent(event);\n\n    if (_event.name.indexOf(errorPlatform) === 0 && !this.state.nextEvents.some(function (nextEvent) {\n      return nextEvent.indexOf(errorPlatform) === 0;\n    })) {\n      throw _event.data.data;\n    }\n\n    var nextState = provide(this, function () {\n      return _this.machine.transition(_this.state, _event, undefined, exec || undefined);\n    });\n    return nextState;\n  };\n  /**\r\n   * Returns the next state given the interpreter's current state and the event.\r\n   *\r\n   * This is a pure method that does _not_ update the interpreter's state.\r\n   *\r\n   * @param event The event to determine the next state\r\n   */\n\n\n  Interpreter.prototype.nextState = function (event) {\n    return this._nextState(event, false);\n  };\n\n  Interpreter.prototype.forward = function (event) {\n    var e_12, _a;\n\n    try {\n      for (var _b = __values(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var id = _c.value;\n        var child = this.children.get(id);\n\n        if (!child) {\n          throw new Error(\"Unable to forward event '\".concat(event, \"' from interpreter '\").concat(this.id, \"' to nonexistant child '\").concat(id, \"'.\"));\n        }\n\n        child.send(event);\n      }\n    } catch (e_12_1) {\n      e_12 = {\n        error: e_12_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_12) throw e_12.error;\n      }\n    }\n  };\n\n  Interpreter.prototype.defer = function (sendAction) {\n    var _this = this;\n\n    var timerId = this.clock.setTimeout(function () {\n      if ('to' in sendAction && sendAction.to) {\n        _this.sendTo(sendAction._event, sendAction.to, true);\n      } else {\n        _this.send(sendAction._event);\n      }\n    }, sendAction.delay);\n\n    if (sendAction.id) {\n      this.delayedEventsMap[sendAction.id] = timerId;\n    }\n  };\n\n  Interpreter.prototype.cancel = function (sendId) {\n    this.clock.clearTimeout(this.delayedEventsMap[sendId]);\n    delete this.delayedEventsMap[sendId];\n  };\n\n  Interpreter.prototype.exec = function (action, state, actionFunctionMap) {\n    if (actionFunctionMap === void 0) {\n      actionFunctionMap = this.machine.options.actions;\n    }\n\n    this._exec(action, state.context, state._event, actionFunctionMap);\n  };\n\n  Interpreter.prototype.removeChild = function (childId) {\n    var _a;\n\n    this.children.delete(childId);\n    this.forwardTo.delete(childId); // this.state might not exist at the time this is called,\n    // such as when a child is added then removed while initializing the state\n\n    (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];\n  };\n\n  Interpreter.prototype.stopChild = function (childId) {\n    var child = this.children.get(childId);\n\n    if (!child) {\n      return;\n    }\n\n    this.removeChild(childId);\n\n    if (isFunction(child.stop)) {\n      child.stop();\n    }\n  };\n\n  Interpreter.prototype.spawn = function (entity, name, options) {\n    if (this.status !== InterpreterStatus.Running) {\n      return createDeferredActor(entity, name);\n    }\n\n    if (isPromiseLike(entity)) {\n      return this.spawnPromise(Promise.resolve(entity), name);\n    } else if (isFunction(entity)) {\n      return this.spawnCallback(entity, name);\n    } else if (isSpawnedActor(entity)) {\n      return this.spawnActor(entity, name);\n    } else if (isObservable(entity)) {\n      return this.spawnObservable(entity, name);\n    } else if (isMachine(entity)) {\n      return this.spawnMachine(entity, __assign(__assign({}, options), {\n        id: name\n      }));\n    } else if (isBehavior(entity)) {\n      return this.spawnBehavior(entity, name);\n    } else {\n      throw new Error(\"Unable to spawn entity \\\"\".concat(name, \"\\\" of type \\\"\").concat(typeof entity, \"\\\".\"));\n    }\n  };\n\n  Interpreter.prototype.spawnMachine = function (machine, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var childService = new Interpreter(machine, __assign(__assign({}, this.options), {\n      parent: this,\n      id: options.id || machine.id\n    }));\n\n    var resolvedOptions = __assign(__assign({}, DEFAULT_SPAWN_OPTIONS), options);\n\n    if (resolvedOptions.sync) {\n      childService.onTransition(function (state) {\n        _this.send(update, {\n          state: state,\n          id: childService.id\n        });\n      });\n    }\n\n    var actor = childService;\n    this.children.set(childService.id, actor);\n\n    if (resolvedOptions.autoForward) {\n      this.forwardTo.add(childService.id);\n    }\n\n    childService.onDone(function (doneEvent) {\n      _this.removeChild(childService.id);\n\n      _this.send(toSCXMLEvent(doneEvent, {\n        origin: childService.id\n      }));\n    }).start();\n    return actor;\n  };\n\n  Interpreter.prototype.spawnBehavior = function (behavior, id) {\n    var actorRef = spawnBehavior(behavior, {\n      id: id,\n      parent: this\n    });\n    this.children.set(id, actorRef);\n    return actorRef;\n  };\n\n  Interpreter.prototype.spawnPromise = function (promise, id) {\n    var _a;\n\n    var _this = this;\n\n    var canceled = false;\n    var resolvedData;\n    promise.then(function (response) {\n      if (!canceled) {\n        resolvedData = response;\n\n        _this.removeChild(id);\n\n        _this.send(toSCXMLEvent(doneInvoke(id, response), {\n          origin: id\n        }));\n      }\n    }, function (errorData) {\n      if (!canceled) {\n        _this.removeChild(id);\n\n        var errorEvent = error(id, errorData);\n\n        try {\n          // Send \"error.platform.id\" to this (parent).\n          _this.send(toSCXMLEvent(errorEvent, {\n            origin: id\n          }));\n        } catch (error) {\n          reportUnhandledExceptionOnInvocation(errorData, error, id);\n\n          if (_this.devTools) {\n            _this.devTools.send(errorEvent, _this.state);\n          }\n\n          if (_this.machine.strict) {\n            // it would be better to always stop the state machine if unhandled\n            // exception/promise rejection happens but because we don't want to\n            // break existing code so enforce it on strict mode only especially so\n            // because documentation says that onError is optional\n            _this.stop();\n          }\n        }\n      }\n    });\n    var actor = (_a = {\n      id: id,\n      send: function () {\n        return void 0;\n      },\n      subscribe: function (next, handleError, complete) {\n        var observer = toObserver(next, handleError, complete);\n        var unsubscribed = false;\n        promise.then(function (response) {\n          if (unsubscribed) {\n            return;\n          }\n\n          observer.next(response);\n\n          if (unsubscribed) {\n            return;\n          }\n\n          observer.complete();\n        }, function (err) {\n          if (unsubscribed) {\n            return;\n          }\n\n          observer.error(err);\n        });\n        return {\n          unsubscribe: function () {\n            return unsubscribed = true;\n          }\n        };\n      },\n      stop: function () {\n        canceled = true;\n      },\n      toJSON: function () {\n        return {\n          id: id\n        };\n      },\n      getSnapshot: function () {\n        return resolvedData;\n      }\n    }, _a[symbolObservable] = function () {\n      return this;\n    }, _a);\n    this.children.set(id, actor);\n    return actor;\n  };\n\n  Interpreter.prototype.spawnCallback = function (callback, id) {\n    var _a;\n\n    var _this = this;\n\n    var canceled = false;\n    var receivers = new Set();\n    var listeners = new Set();\n    var emitted;\n\n    var receive = function (e) {\n      emitted = e;\n      listeners.forEach(function (listener) {\n        return listener(e);\n      });\n\n      if (canceled) {\n        return;\n      }\n\n      _this.send(toSCXMLEvent(e, {\n        origin: id\n      }));\n    };\n\n    var callbackStop;\n\n    try {\n      callbackStop = callback(receive, function (newListener) {\n        receivers.add(newListener);\n      });\n    } catch (err) {\n      this.send(error(id, err));\n    }\n\n    if (isPromiseLike(callbackStop)) {\n      // it turned out to be an async function, can't reliably check this before calling `callback`\n      // because transpiled async functions are not recognizable\n      return this.spawnPromise(callbackStop, id);\n    }\n\n    var actor = (_a = {\n      id: id,\n      send: function (event) {\n        return receivers.forEach(function (receiver) {\n          return receiver(event);\n        });\n      },\n      subscribe: function (next) {\n        var observer = toObserver(next);\n        listeners.add(observer.next);\n        return {\n          unsubscribe: function () {\n            listeners.delete(observer.next);\n          }\n        };\n      },\n      stop: function () {\n        canceled = true;\n\n        if (isFunction(callbackStop)) {\n          callbackStop();\n        }\n      },\n      toJSON: function () {\n        return {\n          id: id\n        };\n      },\n      getSnapshot: function () {\n        return emitted;\n      }\n    }, _a[symbolObservable] = function () {\n      return this;\n    }, _a);\n    this.children.set(id, actor);\n    return actor;\n  };\n\n  Interpreter.prototype.spawnObservable = function (source, id) {\n    var _a;\n\n    var _this = this;\n\n    var emitted;\n    var subscription = source.subscribe(function (value) {\n      emitted = value;\n\n      _this.send(toSCXMLEvent(value, {\n        origin: id\n      }));\n    }, function (err) {\n      _this.removeChild(id);\n\n      _this.send(toSCXMLEvent(error(id, err), {\n        origin: id\n      }));\n    }, function () {\n      _this.removeChild(id);\n\n      _this.send(toSCXMLEvent(doneInvoke(id), {\n        origin: id\n      }));\n    });\n    var actor = (_a = {\n      id: id,\n      send: function () {\n        return void 0;\n      },\n      subscribe: function (next, handleError, complete) {\n        return source.subscribe(next, handleError, complete);\n      },\n      stop: function () {\n        return subscription.unsubscribe();\n      },\n      getSnapshot: function () {\n        return emitted;\n      },\n      toJSON: function () {\n        return {\n          id: id\n        };\n      }\n    }, _a[symbolObservable] = function () {\n      return this;\n    }, _a);\n    this.children.set(id, actor);\n    return actor;\n  };\n\n  Interpreter.prototype.spawnActor = function (actor, name) {\n    this.children.set(name, actor);\n    return actor;\n  };\n\n  Interpreter.prototype.spawnActivity = function (activity) {\n    var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;\n\n    if (!implementation) {\n      if (!IS_PRODUCTION) {\n        warn(false, \"No implementation found for activity '\".concat(activity.type, \"'\"));\n      } // tslint:disable-next-line:no-console\n\n\n      return;\n    } // Start implementation\n\n\n    var dispose = implementation(this.state.context, activity);\n    this.spawnEffect(activity.id, dispose);\n  };\n\n  Interpreter.prototype.spawnEffect = function (id, dispose) {\n    var _a;\n\n    this.children.set(id, (_a = {\n      id: id,\n      send: function () {\n        return void 0;\n      },\n      subscribe: function () {\n        return {\n          unsubscribe: function () {\n            return void 0;\n          }\n        };\n      },\n      stop: dispose || undefined,\n      getSnapshot: function () {\n        return undefined;\n      },\n      toJSON: function () {\n        return {\n          id: id\n        };\n      }\n    }, _a[symbolObservable] = function () {\n      return this;\n    }, _a));\n  };\n\n  Interpreter.prototype.attachDev = function () {\n    var global = getGlobal();\n\n    if (this.options.devTools && global) {\n      if (global.__REDUX_DEVTOOLS_EXTENSION__) {\n        var devToolsOptions = typeof this.options.devTools === 'object' ? this.options.devTools : undefined;\n        this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect(__assign(__assign({\n          name: this.id,\n          autoPause: true,\n          stateSanitizer: function (state) {\n            return {\n              value: state.value,\n              context: state.context,\n              actions: state.actions\n            };\n          }\n        }, devToolsOptions), {\n          features: __assign({\n            jump: false,\n            skip: false\n          }, devToolsOptions ? devToolsOptions.features : undefined)\n        }), this.machine);\n        this.devTools.init(this.state);\n      } // add XState-specific dev tooling hook\n\n\n      registerService(this);\n    }\n  };\n\n  Interpreter.prototype.toJSON = function () {\n    return {\n      id: this.id\n    };\n  };\n\n  Interpreter.prototype[symbolObservable] = function () {\n    return this;\n  };\n\n  Interpreter.prototype.getSnapshot = function () {\n    if (this.status === InterpreterStatus.NotStarted) {\n      return this.initialState;\n    }\n\n    return this._state;\n  };\n  /**\r\n   * The default interpreter options:\r\n   *\r\n   * - `clock` uses the global `setTimeout` and `clearTimeout` functions\r\n   * - `logger` uses the global `console.log()` method\r\n   */\n\n\n  Interpreter.defaultOptions = {\n    execute: true,\n    deferEvents: true,\n    clock: {\n      setTimeout: function (fn, ms) {\n        return setTimeout(fn, ms);\n      },\n      clearTimeout: function (id) {\n        return clearTimeout(id);\n      }\n    },\n    logger: /*#__PURE__*/console.log.bind(console),\n    devTools: false\n  };\n  Interpreter.interpret = interpret;\n  return Interpreter;\n}();\n\nvar resolveSpawnOptions = function (nameOrOptions) {\n  if (isString(nameOrOptions)) {\n    return __assign(__assign({}, DEFAULT_SPAWN_OPTIONS), {\n      name: nameOrOptions\n    });\n  }\n\n  return __assign(__assign(__assign({}, DEFAULT_SPAWN_OPTIONS), {\n    name: uniqueId()\n  }), nameOrOptions);\n};\n\nfunction spawn(entity, nameOrOptions) {\n  var resolvedOptions = resolveSpawnOptions(nameOrOptions);\n  return consume(function (service) {\n    if (!IS_PRODUCTION) {\n      var isLazyEntity = isMachine(entity) || isFunction(entity);\n      warn(!!service || isLazyEntity, \"Attempted to spawn an Actor (ID: \\\"\".concat(isMachine(entity) ? entity.id : 'undefined', \"\\\") outside of a service. This will have no effect.\"));\n    }\n\n    if (service) {\n      return service.spawn(entity, resolvedOptions.name, resolvedOptions);\n    } else {\n      return createDeferredActor(entity, resolvedOptions.name);\n    }\n  });\n}\n/**\r\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\r\n *\r\n * @param machine The machine to interpret\r\n * @param options Interpreter options\r\n */\n\nfunction interpret(machine, options) {\n  var interpreter = new Interpreter(machine, options);\n  return interpreter;\n}\n\nexport { Interpreter, InterpreterStatus, interpret, spawn };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}