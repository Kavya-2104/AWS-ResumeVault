{"ast":null,"code":"import { Sha256 } from '@aws-crypto/sha256-js';\nimport { getCrypto, base64Encoder } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst CODE_VERIFIER_CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n/**\n *\n * @param length Desired length of the code verifier.\n *\n * **NOTE:** According to the [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1)\n * A code verifier must be with a length >= 43 and <= 128.\n *\n * @returns An object that contains the generated `codeVerifier` and a method\n * `toCodeChallenge` to generate the code challenge from the `codeVerifier`\n * following the spec of [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).\n */\nconst generateCodeVerifier = length => {\n  const randomBytes = new Uint8Array(length);\n  getCrypto().getRandomValues(randomBytes);\n  let value = '';\n  let codeChallenge;\n  for (let byte of randomBytes) {\n    value += CODE_VERIFIER_CHARSET.charAt(byte % CODE_VERIFIER_CHARSET.length);\n  }\n  return {\n    value,\n    method: 'S256',\n    toCodeChallenge() {\n      if (codeChallenge) {\n        return codeChallenge;\n      }\n      codeChallenge = generateCodeChallenge(value);\n      return codeChallenge;\n    }\n  };\n};\nfunction generateCodeChallenge(codeVerifier) {\n  const awsCryptoHash = new Sha256();\n  awsCryptoHash.update(codeVerifier);\n  const codeChallenge = removePaddingChar(base64Encoder.convert(awsCryptoHash.digestSync(), {\n    urlSafe: true\n  }));\n  return codeChallenge;\n}\nfunction removePaddingChar(base64Encoded) {\n  return base64Encoded.replace(/=/g, '');\n}\nexport { generateCodeVerifier };","map":{"version":3,"names":["CODE_VERIFIER_CHARSET","generateCodeVerifier","length","randomBytes","Uint8Array","getCrypto","getRandomValues","value","codeChallenge","byte","charAt","method","toCodeChallenge","generateCodeChallenge","codeVerifier","awsCryptoHash","Sha256","update","removePaddingChar","base64Encoder","convert","digestSync","urlSafe","base64Encoded","replace"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\utils\\oauth\\generateCodeVerifier.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Sha256 } from '@aws-crypto/sha256-js';\nimport { base64Encoder, getCrypto } from '@aws-amplify/core/internals/utils';\nconst CODE_VERIFIER_CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n/**\n *\n * @param length Desired length of the code verifier.\n *\n * **NOTE:** According to the [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1)\n * A code verifier must be with a length >= 43 and <= 128.\n *\n * @returns An object that contains the generated `codeVerifier` and a method\n * `toCodeChallenge` to generate the code challenge from the `codeVerifier`\n * following the spec of [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).\n */\nexport const generateCodeVerifier = (length) => {\n    const randomBytes = new Uint8Array(length);\n    getCrypto().getRandomValues(randomBytes);\n    let value = '';\n    let codeChallenge;\n    for (let byte of randomBytes) {\n        value += CODE_VERIFIER_CHARSET.charAt(byte % CODE_VERIFIER_CHARSET.length);\n    }\n    return {\n        value,\n        method: 'S256',\n        toCodeChallenge() {\n            if (codeChallenge) {\n                return codeChallenge;\n            }\n            codeChallenge = generateCodeChallenge(value);\n            return codeChallenge;\n        },\n    };\n};\nfunction generateCodeChallenge(codeVerifier) {\n    const awsCryptoHash = new Sha256();\n    awsCryptoHash.update(codeVerifier);\n    const codeChallenge = removePaddingChar(base64Encoder.convert(awsCryptoHash.digestSync(), { urlSafe: true }));\n    return codeChallenge;\n}\nfunction removePaddingChar(base64Encoded) {\n    return base64Encoded.replace(/=/g, '');\n}\n"],"mappings":";;;AAAA;AACA;AAGA,MAAMA,qBAAqB,GAAG,gEAAgE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACC,oBAAoB,GAAIC,MAAM,IAAK;EAC5C,MAAMC,WAAW,GAAG,IAAIC,UAAU,CAACF,MAAM,CAAC;EAC1CG,SAAS,EAAE,CAACC,eAAe,CAACH,WAAW,CAAC;EACxC,IAAII,KAAK,GAAG,EAAE;EACd,IAAIC,aAAa;EACjB,KAAK,IAAIC,IAAI,IAAIN,WAAW,EAAE;IAC1BI,KAAK,IAAIP,qBAAqB,CAACU,MAAM,CAACD,IAAI,GAAGT,qBAAqB,CAACE,MAAM,CAAC;EAClF;EACI,OAAO;IACHK,KAAK;IACLI,MAAM,EAAE,MAAM;IACdC,eAAeA,CAAA,EAAG;MACd,IAAIJ,aAAa,EAAE;QACf,OAAOA,aAAa;MACpC;MACYA,aAAa,GAAGK,qBAAqB,CAACN,KAAK,CAAC;MAC5C,OAAOC,aAAa;IAChC;EACA,CAAK;AACL;AACA,SAASK,qBAAqBA,CAACC,YAAY,EAAE;EACzC,MAAMC,aAAa,GAAG,IAAIC,MAAM,EAAE;EAClCD,aAAa,CAACE,MAAM,CAACH,YAAY,CAAC;EAClC,MAAMN,aAAa,GAAGU,iBAAiB,CAACC,aAAa,CAACC,OAAO,CAACL,aAAa,CAACM,UAAU,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAI,CAAE,CAAC,CAAC;EAC7G,OAAOd,aAAa;AACxB;AACA,SAASU,iBAAiBA,CAACK,aAAa,EAAE;EACtC,OAAOA,aAAa,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}