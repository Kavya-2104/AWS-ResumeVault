{"ast":null,"code":"import { useMemo } from 'react';\nimport useAuthenticator from '../useAuthenticator/useAuthenticator.mjs';\nimport { getRouteMachineSelector, resolveDefault, resolveVerifyUserRoute, resolveSignUpRoute, resolveSignInRoute, resolveSetupTotpRoute, resolveForgotPasswordRoute, resolveForceNewPasswordRoute, resolveConfirmVerifyUserRoute, resolveConfirmSignUpRoute, resolveConfirmSignInRoute, resolveConfirmResetPasswordRoute, routeSelector } from './utils.mjs';\nfunction useAuthenticatorRoute({\n  components\n}) {\n  const {\n    route\n  } = useAuthenticator(routeSelector);\n  const routeMachineSelector = useMemo(() => getRouteMachineSelector(route), [route]);\n  // `useAuthenticator` exposes both state machine (example: `toSignIn`) and non-state machine\n  // props (example: `getTotpSecretCode`). `routeSelector` specifies which state machine props\n  // should be returned for a specific route.\n  // Only state machine props specified by the current `routeSelector` will have their current value\n  // returned by `useAuthenticator`, non-machine props returned will always be the current value\n  const routeSelectorProps = useAuthenticator(routeMachineSelector);\n  const {\n    ConfirmResetPassword,\n    ConfirmSignIn,\n    ConfirmSignUp,\n    ConfirmVerifyUser,\n    ForceNewPassword,\n    ForgotPassword,\n    SetupTotp,\n    SignIn,\n    SignUp,\n    VerifyUser\n  } = components;\n  switch (route) {\n    case 'confirmResetPassword':\n      {\n        return resolveConfirmResetPasswordRoute(ConfirmResetPassword, routeSelectorProps);\n      }\n    case 'confirmSignIn':\n      {\n        return resolveConfirmSignInRoute(ConfirmSignIn, routeSelectorProps);\n      }\n    case 'confirmSignUp':\n      {\n        return resolveConfirmSignUpRoute(ConfirmSignUp, routeSelectorProps);\n      }\n    case 'confirmVerifyUser':\n      {\n        return resolveConfirmVerifyUserRoute(ConfirmVerifyUser, routeSelectorProps);\n      }\n    case 'forceNewPassword':\n      {\n        return resolveForceNewPasswordRoute(ForceNewPassword, routeSelectorProps);\n      }\n    case 'forgotPassword':\n      {\n        return resolveForgotPasswordRoute(ForgotPassword, routeSelectorProps);\n      }\n    case 'setupTotp':\n      {\n        return resolveSetupTotpRoute(SetupTotp, routeSelectorProps);\n      }\n    case 'signIn':\n      {\n        return resolveSignInRoute(SignIn, routeSelectorProps);\n      }\n    case 'signUp':\n      {\n        return resolveSignUpRoute(SignUp, routeSelectorProps);\n      }\n    case 'verifyUser':\n      {\n        return resolveVerifyUserRoute(VerifyUser, routeSelectorProps);\n      }\n    default:\n      {\n        return resolveDefault();\n      }\n  }\n}\nexport { useAuthenticatorRoute as default };","map":{"version":3,"names":["useMemo","useAuthenticator","getRouteMachineSelector","resolveDefault","resolveVerifyUserRoute","resolveSignUpRoute","resolveSignInRoute","resolveSetupTotpRoute","resolveForgotPasswordRoute","resolveForceNewPasswordRoute","resolveConfirmVerifyUserRoute","resolveConfirmSignUpRoute","resolveConfirmSignInRoute","resolveConfirmResetPasswordRoute","routeSelector","useAuthenticatorRoute","components","route","routeMachineSelector","routeSelectorProps","ConfirmResetPassword","ConfirmSignIn","ConfirmSignUp","ConfirmVerifyUser","ForceNewPassword","ForgotPassword","SetupTotp","SignIn","SignUp","VerifyUser","default"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/useAuthenticatorRoute.mjs"],"sourcesContent":["import { useMemo } from 'react';\nimport useAuthenticator from '../useAuthenticator/useAuthenticator.mjs';\nimport { getRouteMachineSelector, resolveDefault, resolveVerifyUserRoute, resolveSignUpRoute, resolveSignInRoute, resolveSetupTotpRoute, resolveForgotPasswordRoute, resolveForceNewPasswordRoute, resolveConfirmVerifyUserRoute, resolveConfirmSignUpRoute, resolveConfirmSignInRoute, resolveConfirmResetPasswordRoute, routeSelector } from './utils.mjs';\n\nfunction useAuthenticatorRoute({ components, }) {\n    const { route } = useAuthenticator(routeSelector);\n    const routeMachineSelector = useMemo(() => getRouteMachineSelector(route), [route]);\n    // `useAuthenticator` exposes both state machine (example: `toSignIn`) and non-state machine\n    // props (example: `getTotpSecretCode`). `routeSelector` specifies which state machine props\n    // should be returned for a specific route.\n    // Only state machine props specified by the current `routeSelector` will have their current value\n    // returned by `useAuthenticator`, non-machine props returned will always be the current value\n    const routeSelectorProps = useAuthenticator(routeMachineSelector);\n    const { ConfirmResetPassword, ConfirmSignIn, ConfirmSignUp, ConfirmVerifyUser, ForceNewPassword, ForgotPassword, SetupTotp, SignIn, SignUp, VerifyUser, } = components;\n    switch (route) {\n        case 'confirmResetPassword': {\n            return resolveConfirmResetPasswordRoute(ConfirmResetPassword, routeSelectorProps);\n        }\n        case 'confirmSignIn': {\n            return resolveConfirmSignInRoute(ConfirmSignIn, routeSelectorProps);\n        }\n        case 'confirmSignUp': {\n            return resolveConfirmSignUpRoute(ConfirmSignUp, routeSelectorProps);\n        }\n        case 'confirmVerifyUser': {\n            return resolveConfirmVerifyUserRoute(ConfirmVerifyUser, routeSelectorProps);\n        }\n        case 'forceNewPassword': {\n            return resolveForceNewPasswordRoute(ForceNewPassword, routeSelectorProps);\n        }\n        case 'forgotPassword': {\n            return resolveForgotPasswordRoute(ForgotPassword, routeSelectorProps);\n        }\n        case 'setupTotp': {\n            return resolveSetupTotpRoute(SetupTotp, routeSelectorProps);\n        }\n        case 'signIn': {\n            return resolveSignInRoute(SignIn, routeSelectorProps);\n        }\n        case 'signUp': {\n            return resolveSignUpRoute(SignUp, routeSelectorProps);\n        }\n        case 'verifyUser': {\n            return resolveVerifyUserRoute(VerifyUser, routeSelectorProps);\n        }\n        default: {\n            return resolveDefault();\n        }\n    }\n}\n\nexport { useAuthenticatorRoute as default };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAOC,gBAAgB,MAAM,0CAA0C;AACvE,SAASC,uBAAuB,EAAEC,cAAc,EAAEC,sBAAsB,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,qBAAqB,EAAEC,0BAA0B,EAAEC,4BAA4B,EAAEC,6BAA6B,EAAEC,yBAAyB,EAAEC,yBAAyB,EAAEC,gCAAgC,EAAEC,aAAa,QAAQ,aAAa;AAE5V,SAASC,qBAAqBA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAC5C,MAAM;IAAEC;EAAM,CAAC,GAAGhB,gBAAgB,CAACa,aAAa,CAAC;EACjD,MAAMI,oBAAoB,GAAGlB,OAAO,CAAC,MAAME,uBAAuB,CAACe,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACnF;EACA;EACA;EACA;EACA;EACA,MAAME,kBAAkB,GAAGlB,gBAAgB,CAACiB,oBAAoB,CAAC;EACjE,MAAM;IAAEE,oBAAoB;IAAEC,aAAa;IAAEC,aAAa;IAAEC,iBAAiB;IAAEC,gBAAgB;IAAEC,cAAc;IAAEC,SAAS;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGb,UAAU;EACtK,QAAQC,KAAK;IACT,KAAK,sBAAsB;MAAE;QACzB,OAAOJ,gCAAgC,CAACO,oBAAoB,EAAED,kBAAkB,CAAC;MACrF;IACA,KAAK,eAAe;MAAE;QAClB,OAAOP,yBAAyB,CAACS,aAAa,EAAEF,kBAAkB,CAAC;MACvE;IACA,KAAK,eAAe;MAAE;QAClB,OAAOR,yBAAyB,CAACW,aAAa,EAAEH,kBAAkB,CAAC;MACvE;IACA,KAAK,mBAAmB;MAAE;QACtB,OAAOT,6BAA6B,CAACa,iBAAiB,EAAEJ,kBAAkB,CAAC;MAC/E;IACA,KAAK,kBAAkB;MAAE;QACrB,OAAOV,4BAA4B,CAACe,gBAAgB,EAAEL,kBAAkB,CAAC;MAC7E;IACA,KAAK,gBAAgB;MAAE;QACnB,OAAOX,0BAA0B,CAACiB,cAAc,EAAEN,kBAAkB,CAAC;MACzE;IACA,KAAK,WAAW;MAAE;QACd,OAAOZ,qBAAqB,CAACmB,SAAS,EAAEP,kBAAkB,CAAC;MAC/D;IACA,KAAK,QAAQ;MAAE;QACX,OAAOb,kBAAkB,CAACqB,MAAM,EAAER,kBAAkB,CAAC;MACzD;IACA,KAAK,QAAQ;MAAE;QACX,OAAOd,kBAAkB,CAACuB,MAAM,EAAET,kBAAkB,CAAC;MACzD;IACA,KAAK,YAAY;MAAE;QACf,OAAOf,sBAAsB,CAACyB,UAAU,EAAEV,kBAAkB,CAAC;MACjE;IACA;MAAS;QACL,OAAOhB,cAAc,CAAC,CAAC;MAC3B;EACJ;AACJ;AAEA,SAASY,qBAAqB,IAAIe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}