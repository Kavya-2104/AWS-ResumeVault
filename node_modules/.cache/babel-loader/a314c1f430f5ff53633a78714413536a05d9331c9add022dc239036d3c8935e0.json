{"ast":null,"code":"import { isDesignToken, cssNameTransform } from '@aws-amplify/ui';\nexport { classNameModifier, classNameModifierByFlag } from '@aws-amplify/ui';\nimport { isThemeStylePropKey } from '../types/theme.mjs';\nimport { stylePropsToThemeKeys } from './constants.mjs';\nconst strHasLength = str => typeof str === 'string' && str.length > 0;\nconst isEmptyString = value => typeof value === 'string' && value.length === 0;\nconst isNullOrEmptyString = value => value == null || isEmptyString(value);\n/**\n * Create a consecutive integer array from start value to end value.\n * @param start start value\n * @param end end value\n * @returns an integer array with elements from start to end consecutively\n */\nconst getConsecutiveIntArray = (start, end) => {\n  const length = end - start + 1;\n  return Array.from({\n    length\n  }, (_, idx) => idx + start);\n};\n/**\n * TS helper function to make using Object.keys more typesafe\n */\nconst objectKeys = obj => {\n  return Object.keys(obj);\n};\nconst getCSSVariableIfValueIsThemeKey = (propKey, value, tokens) => {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  // For shorthand properties like `padding` which can accept 1, 2, 3, or 4 values\n  // run this function on each value. This would not work on CSS shorthands that\n  // mix types, like border which is a composite of borderWidth, borderStyle, and\n  // borderColor.\n  if (value.includes(' ')) {\n    return value.split(' ').map(val => getCSSVariableIfValueIsThemeKey(propKey, val, tokens)).join(' ');\n  }\n  if (isThemeStylePropKey(propKey)) {\n    const path = value.split('.');\n    const tokenKey = stylePropsToThemeKeys[propKey];\n    let tokenProps = tokens[tokenKey];\n    for (let i = 0; i < path.length; i++) {\n      if (tokenProps) {\n        // overwrite tokenProps with next nested value of tokenProps\n        tokenProps = tokenProps[path[i]];\n        continue;\n      }\n      break;\n    }\n    return isDesignToken(tokenProps) ? `var(--${cssNameTransform({\n      path: [stylePropsToThemeKeys[propKey], ...path]\n    })})` : value;\n  }\n  return value;\n};\nexport { getCSSVariableIfValueIsThemeKey, getConsecutiveIntArray, isEmptyString, isNullOrEmptyString, objectKeys, strHasLength };","map":{"version":3,"names":["isDesignToken","cssNameTransform","classNameModifier","classNameModifierByFlag","isThemeStylePropKey","stylePropsToThemeKeys","strHasLength","str","length","isEmptyString","value","isNullOrEmptyString","getConsecutiveIntArray","start","end","Array","from","_","idx","objectKeys","obj","Object","keys","getCSSVariableIfValueIsThemeKey","propKey","tokens","includes","split","map","val","join","path","tokenKey","tokenProps","i"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/utils.mjs"],"sourcesContent":["import { isDesignToken, cssNameTransform } from '@aws-amplify/ui';\nexport { classNameModifier, classNameModifierByFlag } from '@aws-amplify/ui';\nimport { isThemeStylePropKey } from '../types/theme.mjs';\nimport { stylePropsToThemeKeys } from './constants.mjs';\n\nconst strHasLength = (str) => typeof str === 'string' && str.length > 0;\nconst isEmptyString = (value) => typeof value === 'string' && value.length === 0;\nconst isNullOrEmptyString = (value) => value == null || isEmptyString(value);\n/**\n * Create a consecutive integer array from start value to end value.\n * @param start start value\n * @param end end value\n * @returns an integer array with elements from start to end consecutively\n */\nconst getConsecutiveIntArray = (start, end) => {\n    const length = end - start + 1;\n    return Array.from({ length }, (_, idx) => idx + start);\n};\n/**\n * TS helper function to make using Object.keys more typesafe\n */\nconst objectKeys = (obj) => {\n    return Object.keys(obj);\n};\nconst getCSSVariableIfValueIsThemeKey = (propKey, value, tokens) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    // For shorthand properties like `padding` which can accept 1, 2, 3, or 4 values\n    // run this function on each value. This would not work on CSS shorthands that\n    // mix types, like border which is a composite of borderWidth, borderStyle, and\n    // borderColor.\n    if (value.includes(' ')) {\n        return value\n            .split(' ')\n            .map((val) => getCSSVariableIfValueIsThemeKey(propKey, val, tokens))\n            .join(' ');\n    }\n    if (isThemeStylePropKey(propKey)) {\n        const path = value.split('.');\n        const tokenKey = stylePropsToThemeKeys[propKey];\n        let tokenProps = tokens[tokenKey];\n        for (let i = 0; i < path.length; i++) {\n            if (tokenProps) {\n                // overwrite tokenProps with next nested value of tokenProps\n                tokenProps = tokenProps[path[i]];\n                continue;\n            }\n            break;\n        }\n        return isDesignToken(tokenProps)\n            ? `var(--${cssNameTransform({\n                path: [stylePropsToThemeKeys[propKey], ...path],\n            })})`\n            : value;\n    }\n    return value;\n};\n\nexport { getCSSVariableIfValueIsThemeKey, getConsecutiveIntArray, isEmptyString, isNullOrEmptyString, objectKeys, strHasLength };\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,gBAAgB,QAAQ,iBAAiB;AACjE,SAASC,iBAAiB,EAAEC,uBAAuB,QAAQ,iBAAiB;AAC5E,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,qBAAqB,QAAQ,iBAAiB;AAEvD,MAAMC,YAAY,GAAIC,GAAG,IAAK,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,MAAM,GAAG,CAAC;AACvE,MAAMC,aAAa,GAAIC,KAAK,IAAK,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACF,MAAM,KAAK,CAAC;AAChF,MAAMG,mBAAmB,GAAID,KAAK,IAAKA,KAAK,IAAI,IAAI,IAAID,aAAa,CAACC,KAAK,CAAC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,sBAAsB,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAK;EAC3C,MAAMN,MAAM,GAAGM,GAAG,GAAGD,KAAK,GAAG,CAAC;EAC9B,OAAOE,KAAK,CAACC,IAAI,CAAC;IAAER;EAAO,CAAC,EAAE,CAACS,CAAC,EAAEC,GAAG,KAAKA,GAAG,GAAGL,KAAK,CAAC;AAC1D,CAAC;AACD;AACA;AACA;AACA,MAAMM,UAAU,GAAIC,GAAG,IAAK;EACxB,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC;AAC3B,CAAC;AACD,MAAMG,+BAA+B,GAAGA,CAACC,OAAO,EAAEd,KAAK,EAAEe,MAAM,KAAK;EAChE,IAAI,OAAOf,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAOA,KAAK;EAChB;EACA;EACA;EACA;EACA;EACA,IAAIA,KAAK,CAACgB,QAAQ,CAAC,GAAG,CAAC,EAAE;IACrB,OAAOhB,KAAK,CACPiB,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,GAAG,IAAKN,+BAA+B,CAACC,OAAO,EAAEK,GAAG,EAAEJ,MAAM,CAAC,CAAC,CACnEK,IAAI,CAAC,GAAG,CAAC;EAClB;EACA,IAAI1B,mBAAmB,CAACoB,OAAO,CAAC,EAAE;IAC9B,MAAMO,IAAI,GAAGrB,KAAK,CAACiB,KAAK,CAAC,GAAG,CAAC;IAC7B,MAAMK,QAAQ,GAAG3B,qBAAqB,CAACmB,OAAO,CAAC;IAC/C,IAAIS,UAAU,GAAGR,MAAM,CAACO,QAAQ,CAAC;IACjC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACvB,MAAM,EAAE0B,CAAC,EAAE,EAAE;MAClC,IAAID,UAAU,EAAE;QACZ;QACAA,UAAU,GAAGA,UAAU,CAACF,IAAI,CAACG,CAAC,CAAC,CAAC;QAChC;MACJ;MACA;IACJ;IACA,OAAOlC,aAAa,CAACiC,UAAU,CAAC,GACzB,SAAQhC,gBAAgB,CAAC;MACxB8B,IAAI,EAAE,CAAC1B,qBAAqB,CAACmB,OAAO,CAAC,EAAE,GAAGO,IAAI;IAClD,CAAC,CAAE,GAAE,GACHrB,KAAK;EACf;EACA,OAAOA,KAAK;AAChB,CAAC;AAED,SAASa,+BAA+B,EAAEX,sBAAsB,EAAEH,aAAa,EAAEE,mBAAmB,EAAEQ,UAAU,EAAEb,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}