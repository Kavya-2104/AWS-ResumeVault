{"ast":null,"code":"import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler, defaultConfig, buildHttpRpcRequest, getSharedHeaders } from './base.mjs';\nimport { parseJsonError, parseJsonBody } from '@aws-amplify/core/internals/aws-client-utils';\nimport { assertServiceError } from '../../../../../errors/utils/assertServiceError.mjs';\nimport { AuthError } from '../../../../../errors/AuthError.mjs';\nconst buildUserPoolSerializer = operation => (input, endpoint) => {\n  const headers = getSharedHeaders(operation);\n  const body = JSON.stringify(input);\n  return buildHttpRpcRequest(endpoint, headers, body);\n};\nconst buildUserPoolDeserializer = () => {\n  return async response => {\n    if (response.statusCode >= 300) {\n      const error = await parseJsonError(response);\n      assertServiceError(error);\n      throw new AuthError({\n        name: error.name,\n        message: error.message\n      });\n    } else {\n      const body = await parseJsonBody(response);\n      return body;\n    }\n  };\n};\nconst handleEmptyResponseDeserializer = () => {\n  return async response => {\n    if (response.statusCode >= 300) {\n      const error = await parseJsonError(response);\n      assertServiceError(error);\n      throw new AuthError({\n        name: error.name,\n        message: error.message\n      });\n    } else {\n      return undefined;\n    }\n  };\n};\nconst initiateAuth = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('InitiateAuth'), buildUserPoolDeserializer(), defaultConfig);\nconst revokeToken = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('RevokeToken'), buildUserPoolDeserializer(), defaultConfig);\nconst signUp = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('SignUp'), buildUserPoolDeserializer(), defaultConfig);\nconst confirmSignUp = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ConfirmSignUp'), buildUserPoolDeserializer(), defaultConfig);\nconst forgotPassword = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ForgotPassword'), buildUserPoolDeserializer(), defaultConfig);\nconst confirmForgotPassword = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ConfirmForgotPassword'), buildUserPoolDeserializer(), defaultConfig);\nconst respondToAuthChallenge = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('RespondToAuthChallenge'), buildUserPoolDeserializer(), defaultConfig);\nconst resendConfirmationCode = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ResendConfirmationCode'), buildUserPoolDeserializer(), defaultConfig);\nconst verifySoftwareToken = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('VerifySoftwareToken'), buildUserPoolDeserializer(), defaultConfig);\nconst associateSoftwareToken = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('AssociateSoftwareToken'), buildUserPoolDeserializer(), defaultConfig);\nconst setUserMFAPreference = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('SetUserMFAPreference'), buildUserPoolDeserializer(), defaultConfig);\nconst getUser = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('GetUser'), buildUserPoolDeserializer(), defaultConfig);\nconst changePassword = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ChangePassword'), buildUserPoolDeserializer(), defaultConfig);\nconst confirmDevice = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ConfirmDevice'), buildUserPoolDeserializer(), defaultConfig);\nconst forgetDevice = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ForgetDevice'), handleEmptyResponseDeserializer(), defaultConfig);\nconst deleteUser = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('DeleteUser'), handleEmptyResponseDeserializer(), defaultConfig);\nconst getUserAttributeVerificationCode = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('GetUserAttributeVerificationCode'), buildUserPoolDeserializer(), defaultConfig);\nconst globalSignOut = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('GlobalSignOut'), buildUserPoolDeserializer(), defaultConfig);\nconst updateUserAttributes = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('UpdateUserAttributes'), buildUserPoolDeserializer(), defaultConfig);\nconst verifyUserAttribute = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('VerifyUserAttribute'), buildUserPoolDeserializer(), defaultConfig);\nconst updateDeviceStatus = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('UpdateDeviceStatus'), buildUserPoolDeserializer(), defaultConfig);\nconst listDevices = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ListDevices'), buildUserPoolDeserializer(), defaultConfig);\nconst deleteUserAttributes = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('DeleteUserAttributes'), buildUserPoolDeserializer(), defaultConfig);\nexport { associateSoftwareToken, changePassword, confirmDevice, confirmForgotPassword, confirmSignUp, deleteUser, deleteUserAttributes, forgetDevice, forgotPassword, getUser, getUserAttributeVerificationCode, globalSignOut, initiateAuth, listDevices, resendConfirmationCode, respondToAuthChallenge, revokeToken, setUserMFAPreference, signUp, updateDeviceStatus, updateUserAttributes, verifySoftwareToken, verifyUserAttribute };","map":{"version":3,"names":["buildUserPoolSerializer","operation","input","endpoint","headers","getSharedHeaders","body","JSON","stringify","buildHttpRpcRequest","buildUserPoolDeserializer","response","statusCode","error","parseJsonError","assertServiceError","AuthError","name","message","parseJsonBody","handleEmptyResponseDeserializer","undefined","initiateAuth","composeServiceApi","cognitoUserPoolTransferHandler","defaultConfig","revokeToken","signUp","confirmSignUp","forgotPassword","confirmForgotPassword","respondToAuthChallenge","resendConfirmationCode","verifySoftwareToken","associateSoftwareToken","setUserMFAPreference","getUser","changePassword","confirmDevice","forgetDevice","deleteUser","getUserAttributeVerificationCode","globalSignOut","updateUserAttributes","verifyUserAttribute","updateDeviceStatus","listDevices","deleteUserAttributes"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\utils\\clients\\CognitoIdentityProvider\\index.ts"],"sourcesContent":["import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { buildHttpRpcRequest, cognitoUserPoolTransferHandler, defaultConfig, getSharedHeaders, } from './base';\nimport { parseJsonBody, parseJsonError, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { assertServiceError } from '../../../../../errors/utils/assertServiceError';\nimport { AuthError } from '../../../../../errors/AuthError';\nconst buildUserPoolSerializer = (operation) => (input, endpoint) => {\n    const headers = getSharedHeaders(operation);\n    const body = JSON.stringify(input);\n    return buildHttpRpcRequest(endpoint, headers, body);\n};\nconst buildUserPoolDeserializer = () => {\n    return async (response) => {\n        if (response.statusCode >= 300) {\n            const error = await parseJsonError(response);\n            assertServiceError(error);\n            throw new AuthError({ name: error.name, message: error.message });\n        }\n        else {\n            const body = await parseJsonBody(response);\n            return body;\n        }\n    };\n};\nconst handleEmptyResponseDeserializer = () => {\n    return async (response) => {\n        if (response.statusCode >= 300) {\n            const error = await parseJsonError(response);\n            assertServiceError(error);\n            throw new AuthError({ name: error.name, message: error.message });\n        }\n        else {\n            return undefined;\n        }\n    };\n};\nexport const initiateAuth = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('InitiateAuth'), buildUserPoolDeserializer(), defaultConfig);\nexport const revokeToken = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('RevokeToken'), buildUserPoolDeserializer(), defaultConfig);\nexport const signUp = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('SignUp'), buildUserPoolDeserializer(), defaultConfig);\nexport const confirmSignUp = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ConfirmSignUp'), buildUserPoolDeserializer(), defaultConfig);\nexport const forgotPassword = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ForgotPassword'), buildUserPoolDeserializer(), defaultConfig);\nexport const confirmForgotPassword = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ConfirmForgotPassword'), buildUserPoolDeserializer(), defaultConfig);\nexport const respondToAuthChallenge = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('RespondToAuthChallenge'), buildUserPoolDeserializer(), defaultConfig);\nexport const resendConfirmationCode = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ResendConfirmationCode'), buildUserPoolDeserializer(), defaultConfig);\nexport const verifySoftwareToken = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('VerifySoftwareToken'), buildUserPoolDeserializer(), defaultConfig);\nexport const associateSoftwareToken = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('AssociateSoftwareToken'), buildUserPoolDeserializer(), defaultConfig);\nexport const setUserMFAPreference = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('SetUserMFAPreference'), buildUserPoolDeserializer(), defaultConfig);\nexport const getUser = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('GetUser'), buildUserPoolDeserializer(), defaultConfig);\nexport const changePassword = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ChangePassword'), buildUserPoolDeserializer(), defaultConfig);\nexport const confirmDevice = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ConfirmDevice'), buildUserPoolDeserializer(), defaultConfig);\nexport const forgetDevice = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ForgetDevice'), handleEmptyResponseDeserializer(), defaultConfig);\nexport const deleteUser = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('DeleteUser'), handleEmptyResponseDeserializer(), defaultConfig);\nexport const getUserAttributeVerificationCode = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('GetUserAttributeVerificationCode'), buildUserPoolDeserializer(), defaultConfig);\nexport const globalSignOut = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('GlobalSignOut'), buildUserPoolDeserializer(), defaultConfig);\nexport const updateUserAttributes = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('UpdateUserAttributes'), buildUserPoolDeserializer(), defaultConfig);\nexport const verifyUserAttribute = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('VerifyUserAttribute'), buildUserPoolDeserializer(), defaultConfig);\nexport const updateDeviceStatus = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('UpdateDeviceStatus'), buildUserPoolDeserializer(), defaultConfig);\nexport const listDevices = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('ListDevices'), buildUserPoolDeserializer(), defaultConfig);\nexport const deleteUserAttributes = composeServiceApi(cognitoUserPoolTransferHandler, buildUserPoolSerializer('DeleteUserAttributes'), buildUserPoolDeserializer(), defaultConfig);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}