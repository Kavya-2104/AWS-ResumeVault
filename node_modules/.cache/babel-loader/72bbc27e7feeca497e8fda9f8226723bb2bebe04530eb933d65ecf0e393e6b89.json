{"ast":null,"code":"function isTokenExpired({\n  expiresAt,\n  clockDrift\n}) {\n  const currentTime = Date.now();\n  return currentTime + clockDrift > expiresAt;\n}\nclass AuthClass {\n  constructor() {}\n  /**\n   * Configure Auth category\n   *\n   * @internal\n   *\n   * @param authResourcesConfig - Resources configurations required by Auth providers.\n   * @param authOptions - Client options used by library\n   *\n   * @returns void\n   */\n  configure(authResourcesConfig, authOptions) {\n    this.authConfig = authResourcesConfig;\n    this.authOptions = authOptions;\n  }\n  async fetchAuthSession(options = {}) {\n    let tokens;\n    let credentialsAndIdentityId;\n    let userSub;\n    // Get tokens will throw if session cannot be refreshed (network or service error) or return null if not available\n    tokens = await this.getTokens(options);\n    if (tokens) {\n      userSub = tokens.accessToken?.payload?.sub;\n      // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n      credentialsAndIdentityId = await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n        authConfig: this.authConfig,\n        tokens,\n        authenticated: true,\n        forceRefresh: options.forceRefresh\n      });\n    } else {\n      // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n      credentialsAndIdentityId = await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n        authConfig: this.authConfig,\n        authenticated: false,\n        forceRefresh: options.forceRefresh\n      });\n    }\n    return {\n      tokens,\n      credentials: credentialsAndIdentityId?.credentials,\n      identityId: credentialsAndIdentityId?.identityId,\n      userSub\n    };\n  }\n  async clearCredentials() {\n    if (this.authOptions?.credentialsProvider) {\n      return await this.authOptions.credentialsProvider.clearCredentialsAndIdentityId();\n    }\n  }\n  async getTokens(options) {\n    return (await this.authOptions?.tokenProvider?.getTokens(options)) ?? undefined;\n  }\n}\nexport { AuthClass, isTokenExpired };","map":{"version":3,"names":["isTokenExpired","expiresAt","clockDrift","currentTime","Date","now","AuthClass","constructor","configure","authResourcesConfig","authOptions","authConfig","fetchAuthSession","options","tokens","credentialsAndIdentityId","userSub","getTokens","accessToken","payload","sub","credentialsProvider","getCredentialsAndIdentityId","authenticated","forceRefresh","credentials","identityId","clearCredentials","clearCredentialsAndIdentityId","tokenProvider","undefined"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\singleton\\Auth\\index.ts"],"sourcesContent":["export function isTokenExpired({ expiresAt, clockDrift, }) {\n    const currentTime = Date.now();\n    return currentTime + clockDrift > expiresAt;\n}\nexport class AuthClass {\n    constructor() { }\n    /**\n     * Configure Auth category\n     *\n     * @internal\n     *\n     * @param authResourcesConfig - Resources configurations required by Auth providers.\n     * @param authOptions - Client options used by library\n     *\n     * @returns void\n     */\n    configure(authResourcesConfig, authOptions) {\n        this.authConfig = authResourcesConfig;\n        this.authOptions = authOptions;\n    }\n    async fetchAuthSession(options = {}) {\n        let tokens;\n        let credentialsAndIdentityId;\n        let userSub;\n        // Get tokens will throw if session cannot be refreshed (network or service error) or return null if not available\n        tokens = await this.getTokens(options);\n        if (tokens) {\n            userSub = tokens.accessToken?.payload?.sub;\n            // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n            credentialsAndIdentityId =\n                await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n                    authConfig: this.authConfig,\n                    tokens,\n                    authenticated: true,\n                    forceRefresh: options.forceRefresh,\n                });\n        }\n        else {\n            // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n            credentialsAndIdentityId =\n                await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n                    authConfig: this.authConfig,\n                    authenticated: false,\n                    forceRefresh: options.forceRefresh,\n                });\n        }\n        return {\n            tokens,\n            credentials: credentialsAndIdentityId?.credentials,\n            identityId: credentialsAndIdentityId?.identityId,\n            userSub,\n        };\n    }\n    async clearCredentials() {\n        if (this.authOptions?.credentialsProvider) {\n            return await this.authOptions.credentialsProvider.clearCredentialsAndIdentityId();\n        }\n    }\n    async getTokens(options) {\n        return ((await this.authOptions?.tokenProvider?.getTokens(options)) ?? undefined);\n    }\n}\n"],"mappings":"AAAO,SAASA,cAAcA,CAAC;EAAEC,SAAS;EAAEC;AAAU,CAAG,EAAE;EACvD,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,EAAE;EAC9B,OAAOF,WAAW,GAAGD,UAAU,GAAGD,SAAS;AAC/C;AACO,MAAMK,SAAS,CAAC;EACnBC,WAAWA,CAAA,EAAG;EAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAASA,CAACC,mBAAmB,EAAEC,WAAW,EAAE;IACxC,IAAI,CAACC,UAAU,GAAGF,mBAAmB;IACrC,IAAI,CAACC,WAAW,GAAGA,WAAW;EACtC;EACI,MAAME,gBAAgBA,CAACC,OAAO,GAAG,EAAE,EAAE;IACjC,IAAIC,MAAM;IACV,IAAIC,wBAAwB;IAC5B,IAAIC,OAAO;IACnB;IACQF,MAAM,GAAG,MAAM,IAAI,CAACG,SAAS,CAACJ,OAAO,CAAC;IACtC,IAAIC,MAAM,EAAE;MACRE,OAAO,GAAGF,MAAM,CAACI,WAAW,EAAEC,OAAO,EAAEC,GAAG;MACtD;MACYL,wBAAwB,GACpB,MAAM,IAAI,CAACL,WAAW,EAAEW,mBAAmB,EAAEC,2BAA2B,CAAC;QACrEX,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BG,MAAM;QACNS,aAAa,EAAE,IAAI;QACnBC,YAAY,EAAEX,OAAO,CAACW;MAC1C,CAAiB,CAAC;IAClB,CAAS,MACI;MACb;MACYT,wBAAwB,GACpB,MAAM,IAAI,CAACL,WAAW,EAAEW,mBAAmB,EAAEC,2BAA2B,CAAC;QACrEX,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BY,aAAa,EAAE,KAAK;QACpBC,YAAY,EAAEX,OAAO,CAACW;MAC1C,CAAiB,CAAC;IAClB;IACQ,OAAO;MACHV,MAAM;MACNW,WAAW,EAAEV,wBAAwB,EAAEU,WAAW;MAClDC,UAAU,EAAEX,wBAAwB,EAAEW,UAAU;MAChDV;IACZ,CAAS;EACT;EACI,MAAMW,gBAAgBA,CAAA,EAAG;IACrB,IAAI,IAAI,CAACjB,WAAW,EAAEW,mBAAmB,EAAE;MACvC,OAAO,MAAM,IAAI,CAACX,WAAW,CAACW,mBAAmB,CAACO,6BAA6B,EAAE;IAC7F;EACA;EACI,MAAMX,SAASA,CAACJ,OAAO,EAAE;IACrB,OAAQ,CAAC,MAAM,IAAI,CAACH,WAAW,EAAEmB,aAAa,EAAEZ,SAAS,CAACJ,OAAO,CAAC,KAAKiB,SAAS;EACxF;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}