{"ast":null,"code":"const SIGN_IN_STEP_MFA_CONFIRMATION = ['CONFIRM_SIGN_IN_WITH_SMS_CODE', 'CONFIRM_SIGN_IN_WITH_TOTP_CODE'];\n// response next step guards\nconst shouldConfirmSignInWithNewPassword = (_, {\n  data\n}) => data?.nextStep.signInStep === 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED';\nconst shouldResetPasswordFromSignIn = (_, {\n  data\n}) => data?.nextStep?.signInStep === 'RESET_PASSWORD';\nconst shouldConfirmSignUpFromSignIn = (_, {\n  data\n}) => data?.nextStep.signInStep === 'CONFIRM_SIGN_UP';\nconst shouldAutoSignIn = (_, {\n  data\n}) => data?.nextStep.signUpStep === 'COMPLETE_AUTO_SIGN_IN';\nconst hasCompletedSignIn = (_, {\n  data\n}) => data?.nextStep.signInStep === 'DONE';\nconst hasCompletedSignUp = (_, {\n  data\n}) => data?.nextStep.signUpStep === 'DONE';\nconst hasCompletedResetPassword = (_, {\n  data\n}) => data?.nextStep.resetPasswordStep === 'DONE';\n// actor done guards read `step` from actor exit event\nconst hasCompletedAttributeConfirmation = (_, {\n  data\n}) => data?.step === 'CONFIRM_ATTRIBUTE_COMPLETE';\nconst isConfirmUserAttributeStep = (_, {\n  data\n}) => data?.step === 'CONFIRM_ATTRIBUTE_WITH_CODE';\nconst isShouldConfirmUserAttributeStep = (_, {\n  data\n}) => data?.step === 'SHOULD_CONFIRM_USER_ATTRIBUTE';\nconst isResetPasswordStep = (_, {\n  data\n}) => data?.step === 'RESET_PASSWORD';\nconst isConfirmSignUpStep = (_, {\n  data\n}) => data?.step === 'CONFIRM_SIGN_UP';\n// actor entry guards read `step` from actor context\nconst shouldConfirmSignIn = ({\n  step\n}) => SIGN_IN_STEP_MFA_CONFIRMATION.includes(step);\nconst shouldSetupTotp = ({\n  step\n}) => step === 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP';\nconst shouldResetPassword = ({\n  step\n}) => step === 'RESET_PASSWORD';\nconst shouldConfirmResetPassword = ({\n  step\n}) => step === 'CONFIRM_RESET_PASSWORD_WITH_CODE';\nconst shouldConfirmSignUp = ({\n  step\n}) => step === 'CONFIRM_SIGN_UP';\n// miscellaneous guards\nconst shouldVerifyAttribute = (_, {\n  data\n}) => {\n  const {\n    phone_number_verified,\n    email_verified\n  } = data;\n  // email/phone_verified is returned as a string\n  const emailNotVerified = email_verified === undefined || email_verified === 'false';\n  const phoneNotVerified = phone_number_verified === undefined || phone_number_verified === 'false';\n  // only request verification if both email and phone are not verified\n  return emailNotVerified && phoneNotVerified;\n};\n/**\n * This guard covers an edge case that exists in the current state of the UI.\n * As of now, our ConfirmSignUp screen only supports showing an input for a\n * confirmation code. However, a Cognito UserPool can instead verify users\n * through a link that gets emailed to them. If a user verifies through the\n * link and then they click on the \"Resend Code\" button, they will get an error\n * saying that the user has already been confirmed. If we encounter that error,\n * we want to just funnel them through the rest of the flow. In the future, we will\n * want to update our UI to support both confirmation codes and links.\n *\n * https://github.com/aws-amplify/amplify-ui/issues/219\n */\nconst isUserAlreadyConfirmed = (_, {\n  data\n}) => data.message === 'User is already confirmed.';\nconst GUARDS = {\n  hasCompletedAttributeConfirmation,\n  hasCompletedResetPassword,\n  hasCompletedSignIn,\n  hasCompletedSignUp,\n  isConfirmSignUpStep,\n  isConfirmUserAttributeStep,\n  isResetPasswordStep,\n  isShouldConfirmUserAttributeStep,\n  isUserAlreadyConfirmed,\n  shouldAutoSignIn,\n  shouldConfirmResetPassword,\n  shouldConfirmSignIn,\n  shouldConfirmSignInWithNewPassword,\n  shouldConfirmSignUp,\n  shouldConfirmSignUpFromSignIn,\n  shouldResetPassword,\n  shouldResetPasswordFromSignIn,\n  shouldSetupTotp,\n  shouldVerifyAttribute\n};\nexport { GUARDS as default };","map":{"version":3,"names":["SIGN_IN_STEP_MFA_CONFIRMATION","shouldConfirmSignInWithNewPassword","_","data","nextStep","signInStep","shouldResetPasswordFromSignIn","shouldConfirmSignUpFromSignIn","shouldAutoSignIn","signUpStep","hasCompletedSignIn","hasCompletedSignUp","hasCompletedResetPassword","resetPasswordStep","hasCompletedAttributeConfirmation","step","isConfirmUserAttributeStep","isShouldConfirmUserAttributeStep","isResetPasswordStep","isConfirmSignUpStep","shouldConfirmSignIn","includes","shouldSetupTotp","shouldResetPassword","shouldConfirmResetPassword","shouldConfirmSignUp","shouldVerifyAttribute","phone_number_verified","email_verified","emailNotVerified","undefined","phoneNotVerified","isUserAlreadyConfirmed","message","GUARDS","default"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/guards.mjs"],"sourcesContent":["const SIGN_IN_STEP_MFA_CONFIRMATION = [\n    'CONFIRM_SIGN_IN_WITH_SMS_CODE',\n    'CONFIRM_SIGN_IN_WITH_TOTP_CODE',\n];\n// response next step guards\nconst shouldConfirmSignInWithNewPassword = (_, { data }) => data?.nextStep.signInStep ===\n    'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED';\nconst shouldResetPasswordFromSignIn = (_, { data }) => data?.nextStep?.signInStep === 'RESET_PASSWORD';\nconst shouldConfirmSignUpFromSignIn = (_, { data }) => data?.nextStep.signInStep === 'CONFIRM_SIGN_UP';\nconst shouldAutoSignIn = (_, { data }) => data?.nextStep.signUpStep === 'COMPLETE_AUTO_SIGN_IN';\nconst hasCompletedSignIn = (_, { data }) => data?.nextStep.signInStep === 'DONE';\nconst hasCompletedSignUp = (_, { data }) => data?.nextStep.signUpStep === 'DONE';\nconst hasCompletedResetPassword = (_, { data }) => data?.nextStep.resetPasswordStep === 'DONE';\n// actor done guards read `step` from actor exit event\nconst hasCompletedAttributeConfirmation = (_, { data }) => data?.step === 'CONFIRM_ATTRIBUTE_COMPLETE';\nconst isConfirmUserAttributeStep = (_, { data }) => data?.step === 'CONFIRM_ATTRIBUTE_WITH_CODE';\nconst isShouldConfirmUserAttributeStep = (_, { data }) => data?.step === 'SHOULD_CONFIRM_USER_ATTRIBUTE';\nconst isResetPasswordStep = (_, { data }) => data?.step === 'RESET_PASSWORD';\nconst isConfirmSignUpStep = (_, { data }) => data?.step === 'CONFIRM_SIGN_UP';\n// actor entry guards read `step` from actor context\nconst shouldConfirmSignIn = ({ step }) => SIGN_IN_STEP_MFA_CONFIRMATION.includes(step);\nconst shouldSetupTotp = ({ step }) => step === 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP';\nconst shouldResetPassword = ({ step }) => step === 'RESET_PASSWORD';\nconst shouldConfirmResetPassword = ({ step }) => step === 'CONFIRM_RESET_PASSWORD_WITH_CODE';\nconst shouldConfirmSignUp = ({ step }) => step === 'CONFIRM_SIGN_UP';\n// miscellaneous guards\nconst shouldVerifyAttribute = (_, { data }) => {\n    const { phone_number_verified, email_verified } = data;\n    // email/phone_verified is returned as a string\n    const emailNotVerified = email_verified === undefined || email_verified === 'false';\n    const phoneNotVerified = phone_number_verified === undefined || phone_number_verified === 'false';\n    // only request verification if both email and phone are not verified\n    return emailNotVerified && phoneNotVerified;\n};\n/**\n * This guard covers an edge case that exists in the current state of the UI.\n * As of now, our ConfirmSignUp screen only supports showing an input for a\n * confirmation code. However, a Cognito UserPool can instead verify users\n * through a link that gets emailed to them. If a user verifies through the\n * link and then they click on the \"Resend Code\" button, they will get an error\n * saying that the user has already been confirmed. If we encounter that error,\n * we want to just funnel them through the rest of the flow. In the future, we will\n * want to update our UI to support both confirmation codes and links.\n *\n * https://github.com/aws-amplify/amplify-ui/issues/219\n */\nconst isUserAlreadyConfirmed = (_, { data }) => data.message === 'User is already confirmed.';\nconst GUARDS = {\n    hasCompletedAttributeConfirmation,\n    hasCompletedResetPassword,\n    hasCompletedSignIn,\n    hasCompletedSignUp,\n    isConfirmSignUpStep,\n    isConfirmUserAttributeStep,\n    isResetPasswordStep,\n    isShouldConfirmUserAttributeStep,\n    isUserAlreadyConfirmed,\n    shouldAutoSignIn,\n    shouldConfirmResetPassword,\n    shouldConfirmSignIn,\n    shouldConfirmSignInWithNewPassword,\n    shouldConfirmSignUp,\n    shouldConfirmSignUpFromSignIn,\n    shouldResetPassword,\n    shouldResetPasswordFromSignIn,\n    shouldSetupTotp,\n    shouldVerifyAttribute,\n};\n\nexport { GUARDS as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}