{"ast":null,"code":"import { __assign, __spreadArray, __read, __values } from './_virtual/_tslib.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { init, raise as raise$1, send as send$1, update, log as log$1, cancel as cancel$1, assign as assign$1, error as error$1, stop as stop$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\nimport * as actionTypes from './actionTypes.js';\nexport { actionTypes };\nimport { toSCXMLEvent, isString, isFunction, toEventObject, getEventType, updateContext, flatten, isArray, toArray, toGuard, evaluateGuard, warn } from './utils.js';\nimport { IS_PRODUCTION } from './environment.js';\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = __assign(__assign(__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n  return actionObject;\n}\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\nfunction raise(event, options) {\n  return {\n    type: raise$1,\n    event: typeof event === 'function' ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options === null || options === void 0 ? void 0 : options.id\n  };\n}\nfunction resolveRaise(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  };\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n  return __assign(__assign({}, action), {\n    type: raise$1,\n    _event: resolvedEvent,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @deprecated Use the `sendTo(...)` action creator instead.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    // TODO: don't auto-generate IDs here like that\n    // there is too big chance of the ID collision\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\nfunction sendTo(actor, event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\nfunction stop(actorRef) {\n  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\nfunction done(id, data) {\n  var type = \"\".concat(ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n  eventObject.toString = function () {\n    return type;\n  };\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n  eventObject.toString = function () {\n    return type;\n  };\n  return eventObject;\n}\nfunction error(id, data) {\n  var type = \"\".concat(ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n  eventObject.toString = function () {\n    return type;\n  };\n  return eventObject;\n}\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction forwardTo(target, options) {\n  if (!IS_PRODUCTION && (!target || typeof target === 'function')) {\n    var originalTarget_1 = target;\n    target = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, __spreadArray([], __read(args), false)) : originalTarget_1;\n      if (!resolvedTarget) {\n        throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n      }\n      return resolvedTarget;\n    };\n  }\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\nvar pluckAssigns = function (actionBlocks) {\n  var e_1, _a;\n  var assignActions = [];\n  try {\n    for (var actionBlocks_1 = __values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {\n      var block = actionBlocks_1_1.value;\n      var i = 0;\n      while (i < block.actions.length) {\n        if (block.actions[i].type === assign$1) {\n          assignActions.push(block.actions[i]);\n          block.actions.splice(i, 1);\n          continue;\n        }\n        i++;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return assignActions;\n};\nfunction resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n  var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var deferredToBlockEnd = [];\n  function handleAction(blockType, actionObject) {\n    var _a;\n    switch (actionObject.type) {\n      case raise$1:\n        {\n          var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);\n          if (predictableExec && typeof raisedAction.delay === 'number') {\n            predictableExec(raisedAction, updatedContext, _event);\n          }\n          return raisedAction;\n        }\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          var configuredDelay = actionObject.delay; // warn after resolving as we can create better contextual message here\n\n          warn(!isString(configuredDelay) || typeof sendAction.delay === 'number',\n          // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(configuredDelay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n        if (predictableExec && sendAction.to !== SpecialTargets.Internal) {\n          if (blockType === 'entry') {\n            deferredToBlockEnd.push(sendAction);\n          } else {\n            predictableExec(sendAction, updatedContext, _event);\n          }\n        }\n        return sendAction;\n      case log$1:\n        {\n          var resolved = resolveLog(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n          if (!matchedActions) {\n            return [];\n          }\n          var _b = __read(resolveActions(machine, currentState, updatedContext, _event, [{\n              type: blockType,\n              actions: toActionObjects(toArray(matchedActions), machine.options.actions)\n            }], predictableExec, preserveActionOrder), 2),\n            resolvedActionsFromChoose = _b[0],\n            resolvedContextFromChoose = _b[1];\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n          if (!matchedActions) {\n            return [];\n          }\n          var _c = __read(resolveActions(machine, currentState, updatedContext, _event, [{\n              type: blockType,\n              actions: toActionObjects(toArray(matchedActions), machine.options.actions)\n            }], predictableExec, preserveActionOrder), 2),\n            resolvedActionsFromPure = _c[0],\n            resolvedContext = _c[1];\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n      case stop$1:\n        {\n          var resolved = resolveStop(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);\n          return resolved;\n        }\n      case assign$1:\n        {\n          updatedContext = updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n        if (predictableExec) {\n          predictableExec(resolvedActionObject, updatedContext, _event);\n        } else if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          var wrapped = __assign(__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));\n            }\n          });\n          resolvedActionObject = wrapped;\n        }\n        return resolvedActionObject;\n    }\n  }\n  function processBlock(block) {\n    var e_2, _a;\n    var resolvedActions = [];\n    try {\n      for (var _b = __values(block.actions), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var action = _c.value;\n        var resolved = handleAction(block.type, action);\n        if (resolved) {\n          resolvedActions = resolvedActions.concat(resolved);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    deferredToBlockEnd.forEach(function (action) {\n      predictableExec(action, updatedContext, _event);\n    });\n    deferredToBlockEnd.length = 0;\n    return resolvedActions;\n  }\n  var resolvedActions = flatten(actionBlocks.map(processBlock));\n  return [resolvedActions, updatedContext];\n}\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, isActionObject, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, resolveStop, respond, send, sendParent, sendTo, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };","map":{"version":3,"names":["__assign","__spreadArray","__read","__values","SpecialTargets","ActionTypes","init","raise","raise$1","send","send$1","update","log","log$1","cancel","cancel$1","assign","assign$1","error","error$1","stop","stop$1","pure","pure$1","choose","choose$1","actionTypes","toSCXMLEvent","isString","isFunction","toEventObject","getEventType","updateContext","flatten","isArray","toArray","toGuard","evaluateGuard","warn","IS_PRODUCTION","initEvent","type","getActionFunction","actionType","actionFunctionMap","undefined","toActionObject","action","actionObject","exec","name","toString","toActionObjects","actions","map","subAction","toActivityDefinition","id","event","options","delay","resolveRaise","ctx","_event","delaysMap","meta","resolvedEvent","data","resolvedDelay","configDelay","to","resolveSend","resolvedTarget","sendParent","Parent","sendTo","actor","sendUpdate","respond","_","__","_a","origin","defaultLogExpr","context","expr","label","resolveLog","value","sendId","start","activity","activityDef","Start","actorRef","Stop","resolveStop","actorRefOrString","resolvedActorRef","assignment","isActionObject","after","delayRef","idSuffix","concat","After","done","DoneState","eventObject","doneInvoke","DoneInvoke","ErrorPlatform","getActions","Pure","get","forwardTo","target","originalTarget_1","args","_i","arguments","length","apply","Error","escalate","errorData","conds","Choose","pluckAssigns","actionBlocks","e_1","assignActions","actionBlocks_1","actionBlocks_1_1","next","block","i","push","splice","e_1_1","return","call","resolveActions","machine","currentState","currentContext","predictableExec","preserveActionOrder","updatedContext","preservedContexts","deferredToBlockEnd","handleAction","blockType","raisedAction","delays","sendAction","configuredDelay","Internal","resolved","chooseAction","matchedActions","find","condition","guard","cond","guards","_b","resolvedActionsFromChoose","resolvedContextFromChoose","_c","resolvedActionsFromPure","resolvedContext","resolvedActionObject","exec_1","contextIndex_1","wrapped","_ctx","processBlock","e_2","resolvedActions","e_2_1","forEach"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/xstate/es/actions.js"],"sourcesContent":["import { __assign, __spreadArray, __read, __values } from './_virtual/_tslib.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { init, raise as raise$1, send as send$1, update, log as log$1, cancel as cancel$1, assign as assign$1, error as error$1, stop as stop$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\nimport * as actionTypes from './actionTypes.js';\nexport { actionTypes };\nimport { toSCXMLEvent, isString, isFunction, toEventObject, getEventType, updateContext, flatten, isArray, toArray, toGuard, evaluateGuard, warn } from './utils.js';\nimport { IS_PRODUCTION } from './environment.js';\n\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = __assign(__assign(__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\nfunction raise(event, options) {\n  return {\n    type: raise$1,\n    event: typeof event === 'function' ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options === null || options === void 0 ? void 0 : options.id\n  };\n}\nfunction resolveRaise(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  };\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  return __assign(__assign({}, action), {\n    type: raise$1,\n    _event: resolvedEvent,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @deprecated Use the `sendTo(...)` action creator instead.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    // TODO: don't auto-generate IDs here like that\n    // there is too big chance of the ID collision\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\nfunction sendTo(actor, event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\nfunction stop(actorRef) {\n  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\nfunction done(id, data) {\n  var type = \"\".concat(ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction error(id, data) {\n  var type = \"\".concat(ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction forwardTo(target, options) {\n  if (!IS_PRODUCTION && (!target || typeof target === 'function')) {\n    var originalTarget_1 = target;\n\n    target = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, __spreadArray([], __read(args), false)) : originalTarget_1;\n\n      if (!resolvedTarget) {\n        throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n      }\n\n      return resolvedTarget;\n    };\n  }\n\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\n\nvar pluckAssigns = function (actionBlocks) {\n  var e_1, _a;\n\n  var assignActions = [];\n\n  try {\n    for (var actionBlocks_1 = __values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {\n      var block = actionBlocks_1_1.value;\n      var i = 0;\n\n      while (i < block.actions.length) {\n        if (block.actions[i].type === assign$1) {\n          assignActions.push(block.actions[i]);\n          block.actions.splice(i, 1);\n          continue;\n        }\n\n        i++;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return assignActions;\n};\n\nfunction resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var deferredToBlockEnd = [];\n\n  function handleAction(blockType, actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case raise$1:\n        {\n          var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);\n\n          if (predictableExec && typeof raisedAction.delay === 'number') {\n            predictableExec(raisedAction, updatedContext, _event);\n          }\n\n          return raisedAction;\n        }\n\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          var configuredDelay = actionObject.delay; // warn after resolving as we can create better contextual message here\n\n          warn(!isString(configuredDelay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(configuredDelay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        if (predictableExec && sendAction.to !== SpecialTargets.Internal) {\n          if (blockType === 'entry') {\n            deferredToBlockEnd.push(sendAction);\n          } else {\n            predictableExec(sendAction, updatedContext, _event);\n          }\n        }\n\n        return sendAction;\n\n      case log$1:\n        {\n          var resolved = resolveLog(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = __read(resolveActions(machine, currentState, updatedContext, _event, [{\n            type: blockType,\n            actions: toActionObjects(toArray(matchedActions), machine.options.actions)\n          }], predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = __read(resolveActions(machine, currentState, updatedContext, _event, [{\n            type: blockType,\n            actions: toActionObjects(toArray(matchedActions), machine.options.actions)\n          }], predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case stop$1:\n        {\n          var resolved = resolveStop(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);\n          return resolved;\n        }\n\n      case assign$1:\n        {\n          updatedContext = updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (predictableExec) {\n          predictableExec(resolvedActionObject, updatedContext, _event);\n        } else if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n\n          var wrapped = __assign(__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));\n            }\n          });\n\n          resolvedActionObject = wrapped;\n        }\n\n        return resolvedActionObject;\n    }\n  }\n\n  function processBlock(block) {\n    var e_2, _a;\n\n    var resolvedActions = [];\n\n    try {\n      for (var _b = __values(block.actions), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var action = _c.value;\n        var resolved = handleAction(block.type, action);\n\n        if (resolved) {\n          resolvedActions = resolvedActions.concat(resolved);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    deferredToBlockEnd.forEach(function (action) {\n      predictableExec(action, updatedContext, _event);\n    });\n    deferredToBlockEnd.length = 0;\n    return resolvedActions;\n  }\n\n  var resolvedActions = flatten(actionBlocks.map(processBlock));\n  return [resolvedActions, updatedContext];\n}\n\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, isActionObject, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, resolveStop, respond, send, sendParent, sendTo, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}