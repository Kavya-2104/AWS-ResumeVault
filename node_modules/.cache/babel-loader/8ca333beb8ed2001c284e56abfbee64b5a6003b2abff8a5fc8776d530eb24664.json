{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserAttributeVerificationCode } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resends user's confirmation code when updating attributes while authenticated.\n *\n * @param input - The SendUserAttributeVerificationCodeInput object\n * @returns SendUserAttributeVerificationCodeOutput\n * @throws - {@link GetUserAttributeVerificationException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nconst sendUserAttributeVerificationCode = async input => {\n  const {\n    userAttributeKey,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const clientMetadata = options?.clientMetadata;\n  assertTokenProviderConfig(authConfig);\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const {\n    CodeDeliveryDetails\n  } = await getUserAttributeVerificationCode({\n    region: getRegion(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SendUserAttributeVerificationCode)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    ClientMetadata: clientMetadata,\n    AttributeName: userAttributeKey\n  });\n  const {\n    DeliveryMedium,\n    AttributeName,\n    Destination\n  } = {\n    ...CodeDeliveryDetails\n  };\n  return {\n    destination: Destination,\n    deliveryMedium: DeliveryMedium,\n    attributeName: AttributeName\n  };\n};\nexport { sendUserAttributeVerificationCode };","map":{"version":3,"names":["sendUserAttributeVerificationCode","input","userAttributeKey","options","authConfig","Amplify","getConfig","Auth","Cognito","clientMetadata","assertTokenProviderConfig","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","CodeDeliveryDetails","getUserAttributeVerificationCode","region","getRegion","userPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SendUserAttributeVerificationCode","AccessToken","accessToken","toString","ClientMetadata","AttributeName","DeliveryMedium","Destination","destination","deliveryMedium","attributeName"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\sendUserAttributeVerificationCode.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { getUserAttributeVerificationCode } from '../utils/clients/CognitoIdentityProvider';\nimport { assertAuthTokens } from '../utils/types';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { getAuthUserAgentValue } from '../../../utils';\n/**\n * Resends user's confirmation code when updating attributes while authenticated.\n *\n * @param input - The SendUserAttributeVerificationCodeInput object\n * @returns SendUserAttributeVerificationCodeOutput\n * @throws - {@link GetUserAttributeVerificationException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport const sendUserAttributeVerificationCode = async (input) => {\n    const { userAttributeKey, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const clientMetadata = options?.clientMetadata;\n    assertTokenProviderConfig(authConfig);\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const { CodeDeliveryDetails } = await getUserAttributeVerificationCode({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SendUserAttributeVerificationCode),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        ClientMetadata: clientMetadata,\n        AttributeName: userAttributeKey,\n    });\n    const { DeliveryMedium, AttributeName, Destination } = {\n        ...CodeDeliveryDetails,\n    };\n    return {\n        destination: Destination,\n        deliveryMedium: DeliveryMedium,\n        attributeName: AttributeName,\n    };\n};\n"],"mappings":";;;;;;;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,iCAAiC,GAAG,MAAOC,KAAK,IAAK;EAC9D,MAAM;IAAEC,gBAAgB;IAAEC;EAAO,CAAE,GAAGF,KAAK;EAC3C,MAAMG,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpD,MAAMC,cAAc,GAAGN,OAAO,EAAEM,cAAc;EAC9CC,yBAAyB,CAACN,UAAU,CAAC;EACrC,MAAM;IAAEO;EAAM,CAAE,GAAG,MAAMC,gBAAgB,CAAC;IAAEC,YAAY,EAAE;EAAK,CAAE,CAAC;EAClEC,gBAAgB,CAACH,MAAM,CAAC;EACxB,MAAM;IAAEI;EAAmB,CAAE,GAAG,MAAMC,gCAAgC,CAAC;IACnEC,MAAM,EAAEC,SAAS,CAACd,UAAU,CAACe,UAAU,CAAC;IACxCC,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,iCAAiC;EAC1F,CAAK,EAAE;IACCC,WAAW,EAAEb,MAAM,CAACc,WAAW,CAACC,QAAQ,EAAE;IAC1CC,cAAc,EAAElB,cAAc;IAC9BmB,aAAa,EAAE1B;EACvB,CAAK,CAAC;EACF,MAAM;IAAE2B,cAAc;IAAED,aAAa;IAAEE;EAAW,CAAE,GAAG;IACnD,GAAGf;EACX,CAAK;EACD,OAAO;IACHgB,WAAW,EAAED,WAAW;IACxBE,cAAc,EAAEH,cAAc;IAC9BI,aAAa,EAAEL;EACvB,CAAK;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}