{"ast":null,"code":"import { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { StorageValidationErrorCode } from '../../../../errors/types/validation.mjs';\nimport '../../utils/client/base.mjs';\nimport { getPresignedGetObjectUrl } from '../../utils/client/getObject.mjs';\nimport '../../utils/client/listObjectsV2.mjs';\nimport '../../utils/client/putObject.mjs';\nimport '../../utils/client/createMultipartUpload.mjs';\nimport '../../utils/client/uploadPart.mjs';\nimport '../../utils/client/completeMultipartUpload.mjs';\nimport '../../utils/client/listParts.mjs';\nimport '../../utils/client/abortMultipartUpload.mjs';\nimport '../../utils/client/copyObject.mjs';\nimport '../../utils/client/headObject.mjs';\nimport '../../utils/client/deleteObject.mjs';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput.mjs';\nimport { assertValidationError } from '../../../../errors/utils/assertValidationError.mjs';\nimport '../../../../utils/logger.mjs';\nimport { DEFAULT_PRESIGN_EXPIRATION, MAX_URL_EXPIRATION } from '../../utils/constants.mjs';\nimport { getProperties } from './getProperties.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getUrl = async (amplify, input) => {\n  const {\n    key,\n    options\n  } = input;\n  if (options?.validateObjectExistence) {\n    await getProperties(amplify, {\n      key,\n      options\n    }, StorageAction.GetUrl);\n  }\n  const {\n    s3Config,\n    keyPrefix,\n    bucket\n  } = await resolveS3ConfigAndInput(amplify, options);\n  let urlExpirationInSec = options?.expiresIn ?? DEFAULT_PRESIGN_EXPIRATION;\n  const awsCredExpiration = s3Config.credentials?.expiration;\n  if (awsCredExpiration) {\n    const awsCredExpirationInSec = Math.floor((awsCredExpiration.getTime() - Date.now()) / 1000);\n    urlExpirationInSec = Math.min(awsCredExpirationInSec, urlExpirationInSec);\n  }\n  const maxUrlExpirationInSec = MAX_URL_EXPIRATION / 1000;\n  assertValidationError(urlExpirationInSec <= maxUrlExpirationInSec, StorageValidationErrorCode.UrlExpirationMaxLimitExceed);\n  // expiresAt is the minimum of credential expiration and url expiration\n  return {\n    url: await getPresignedGetObjectUrl({\n      ...s3Config,\n      expiration: urlExpirationInSec\n    }, {\n      Bucket: bucket,\n      Key: `${keyPrefix}${key}`\n    }),\n    expiresAt: new Date(Date.now() + urlExpirationInSec * 1000)\n  };\n};\nexport { getUrl };","map":{"version":3,"names":["getUrl","amplify","input","key","options","validateObjectExistence","getProperties","StorageAction","GetUrl","s3Config","keyPrefix","bucket","resolveS3ConfigAndInput","urlExpirationInSec","expiresIn","DEFAULT_PRESIGN_EXPIRATION","awsCredExpiration","credentials","expiration","awsCredExpirationInSec","Math","floor","getTime","Date","now","min","maxUrlExpirationInSec","MAX_URL_EXPIRATION","assertValidationError","StorageValidationErrorCode","UrlExpirationMaxLimitExceed","url","getPresignedGetObjectUrl","Bucket","Key","expiresAt"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\getUrl.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { StorageValidationErrorCode } from '../../../../errors/types/validation';\nimport { getPresignedGetObjectUrl } from '../../utils/client';\nimport { resolveS3ConfigAndInput } from '../../utils';\nimport { assertValidationError } from '../../../../errors/utils/assertValidationError';\nimport { DEFAULT_PRESIGN_EXPIRATION, MAX_URL_EXPIRATION, } from '../../utils/constants';\nimport { getProperties } from './getProperties';\nexport const getUrl = async (amplify, input) => {\n    const { key, options } = input;\n    if (options?.validateObjectExistence) {\n        await getProperties(amplify, { key, options }, StorageAction.GetUrl);\n    }\n    const { s3Config, keyPrefix, bucket } = await resolveS3ConfigAndInput(amplify, options);\n    let urlExpirationInSec = options?.expiresIn ?? DEFAULT_PRESIGN_EXPIRATION;\n    const awsCredExpiration = s3Config.credentials?.expiration;\n    if (awsCredExpiration) {\n        const awsCredExpirationInSec = Math.floor((awsCredExpiration.getTime() - Date.now()) / 1000);\n        urlExpirationInSec = Math.min(awsCredExpirationInSec, urlExpirationInSec);\n    }\n    const maxUrlExpirationInSec = MAX_URL_EXPIRATION / 1000;\n    assertValidationError(urlExpirationInSec <= maxUrlExpirationInSec, StorageValidationErrorCode.UrlExpirationMaxLimitExceed);\n    // expiresAt is the minimum of credential expiration and url expiration\n    return {\n        url: await getPresignedGetObjectUrl({\n            ...s3Config,\n            expiration: urlExpirationInSec,\n        }, {\n            Bucket: bucket,\n            Key: `${keyPrefix}${key}`,\n        }),\n        expiresAt: new Date(Date.now() + urlExpirationInSec * 1000),\n    };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAQY,MAACA,MAAM,GAAG,MAAAA,CAAOC,OAAO,EAAEC,KAAK,KAAK;EAC5C,MAAM;IAAEC,GAAG;IAAEC;EAAO,CAAE,GAAGF,KAAK;EAC9B,IAAIE,OAAO,EAAEC,uBAAuB,EAAE;IAClC,MAAMC,aAAa,CAACL,OAAO,EAAE;MAAEE,GAAG;MAAEC;IAAO,CAAE,EAAEG,aAAa,CAACC,MAAM,CAAC;EAC5E;EACI,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAM,CAAE,GAAG,MAAMC,uBAAuB,CAACX,OAAO,EAAEG,OAAO,CAAC;EACvF,IAAIS,kBAAkB,GAAGT,OAAO,EAAEU,SAAS,IAAIC,0BAA0B;EACzE,MAAMC,iBAAiB,GAAGP,QAAQ,CAACQ,WAAW,EAAEC,UAAU;EAC1D,IAAIF,iBAAiB,EAAE;IACnB,MAAMG,sBAAsB,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,iBAAiB,CAACM,OAAO,EAAE,GAAGC,IAAI,CAACC,GAAG,EAAE,IAAI,IAAI,CAAC;IAC5FX,kBAAkB,GAAGO,IAAI,CAACK,GAAG,CAACN,sBAAsB,EAAEN,kBAAkB,CAAC;EACjF;EACI,MAAMa,qBAAqB,GAAGC,kBAAkB,GAAG,IAAI;EACvDC,qBAAqB,CAACf,kBAAkB,IAAIa,qBAAqB,EAAEG,0BAA0B,CAACC,2BAA2B,CAAC;EAC9H;EACI,OAAO;IACHC,GAAG,EAAE,MAAMC,wBAAwB,CAAC;MAChC,GAAGvB,QAAQ;MACXS,UAAU,EAAEL;IACxB,CAAS,EAAE;MACCoB,MAAM,EAAEtB,MAAM;MACduB,GAAG,EAAG,GAAExB,SAAU,GAAEP,GAAI;IACpC,CAAS,CAAC;IACFgC,SAAS,EAAE,IAAIZ,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,GAAGX,kBAAkB,GAAG,IAAI;EAClE,CAAK;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}