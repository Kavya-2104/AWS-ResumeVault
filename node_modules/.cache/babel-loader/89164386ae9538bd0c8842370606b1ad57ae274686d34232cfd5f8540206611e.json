{"ast":null,"code":"import { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { StorageValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { resolvePrefix } from '../../../utils/resolvePrefix.mjs';\nimport { DEFAULT_ACCESS_LEVEL, LOCAL_TESTING_S3_ENDPOINT } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * resolve the common input options for S3 API handlers from Amplify configuration and library options.\n *\n * @param {AmplifyClassV6} amplify The Amplify instance.\n * @param {S3ApiOptions} apiOptions The input options for S3 provider.\n * @returns {Promise<ResolvedS3ConfigAndInput>} The resolved common input options for S3 API handlers.\n * @throws A {@link StorageError} with `error.name` from {@link StorageValidationErrorCode} indicating invalid\n *   configurations or Amplify library options.\n *\n * @internal\n */\nconst resolveS3ConfigAndInput = async (amplify, apiOptions) => {\n  // identityId is always cached in memory if forceRefresh is not set. So we can safely make calls here.\n  const {\n    credentials,\n    identityId\n  } = await amplify.Auth.fetchAuthSession({\n    forceRefresh: false\n  });\n  assertValidationError(!!credentials, StorageValidationErrorCode.NoCredentials);\n  assertValidationError(!!identityId, StorageValidationErrorCode.NoIdentityId);\n  const {\n    bucket,\n    region,\n    dangerouslyConnectToHttpEndpointForTesting\n  } = amplify.getConfig()?.Storage?.S3 ?? {};\n  assertValidationError(!!bucket, StorageValidationErrorCode.NoBucket);\n  assertValidationError(!!region, StorageValidationErrorCode.NoRegion);\n  const {\n    defaultAccessLevel,\n    prefixResolver = resolvePrefix,\n    isObjectLockEnabled\n  } = amplify.libraryOptions?.Storage?.S3 ?? {};\n  const keyPrefix = await prefixResolver({\n    accessLevel: apiOptions?.accessLevel ?? defaultAccessLevel ?? DEFAULT_ACCESS_LEVEL,\n    // use conditional assign to make tsc happy because StorageOptions is a union type that may not have targetIdentityId\n    targetIdentityId: apiOptions?.accessLevel === 'protected' ? apiOptions?.targetIdentityId ?? identityId : identityId\n  });\n  return {\n    s3Config: {\n      credentials,\n      region,\n      useAccelerateEndpoint: apiOptions?.useAccelerateEndpoint,\n      ...(dangerouslyConnectToHttpEndpointForTesting ? {\n        customEndpoint: LOCAL_TESTING_S3_ENDPOINT,\n        forcePathStyle: true\n      } : {})\n    },\n    bucket,\n    keyPrefix,\n    isObjectLockEnabled\n  };\n};\nexport { resolveS3ConfigAndInput };","map":{"version":3,"names":["resolveS3ConfigAndInput","amplify","apiOptions","credentials","identityId","Auth","fetchAuthSession","forceRefresh","assertValidationError","StorageValidationErrorCode","NoCredentials","NoIdentityId","bucket","region","dangerouslyConnectToHttpEndpointForTesting","getConfig","Storage","S3","NoBucket","NoRegion","defaultAccessLevel","prefixResolver","resolvePrefix","isObjectLockEnabled","libraryOptions","keyPrefix","accessLevel","DEFAULT_ACCESS_LEVEL","targetIdentityId","s3Config","useAccelerateEndpoint","customEndpoint","LOCAL_TESTING_S3_ENDPOINT","forcePathStyle"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\resolveS3ConfigAndInput.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../../../errors/types/validation';\nimport { resolvePrefix as defaultPrefixResolver } from '../../../utils/resolvePrefix';\nimport { DEFAULT_ACCESS_LEVEL, LOCAL_TESTING_S3_ENDPOINT } from './constants';\n/**\n * resolve the common input options for S3 API handlers from Amplify configuration and library options.\n *\n * @param {AmplifyClassV6} amplify The Amplify instance.\n * @param {S3ApiOptions} apiOptions The input options for S3 provider.\n * @returns {Promise<ResolvedS3ConfigAndInput>} The resolved common input options for S3 API handlers.\n * @throws A {@link StorageError} with `error.name` from {@link StorageValidationErrorCode} indicating invalid\n *   configurations or Amplify library options.\n *\n * @internal\n */\nexport const resolveS3ConfigAndInput = async (amplify, apiOptions) => {\n    // identityId is always cached in memory if forceRefresh is not set. So we can safely make calls here.\n    const { credentials, identityId } = await amplify.Auth.fetchAuthSession({\n        forceRefresh: false,\n    });\n    assertValidationError(!!credentials, StorageValidationErrorCode.NoCredentials);\n    assertValidationError(!!identityId, StorageValidationErrorCode.NoIdentityId);\n    const { bucket, region, dangerouslyConnectToHttpEndpointForTesting } = amplify.getConfig()?.Storage?.S3 ?? {};\n    assertValidationError(!!bucket, StorageValidationErrorCode.NoBucket);\n    assertValidationError(!!region, StorageValidationErrorCode.NoRegion);\n    const { defaultAccessLevel, prefixResolver = defaultPrefixResolver, isObjectLockEnabled, } = amplify.libraryOptions?.Storage?.S3 ?? {};\n    const keyPrefix = await prefixResolver({\n        accessLevel: apiOptions?.accessLevel ?? defaultAccessLevel ?? DEFAULT_ACCESS_LEVEL,\n        // use conditional assign to make tsc happy because StorageOptions is a union type that may not have targetIdentityId\n        targetIdentityId: apiOptions?.accessLevel === 'protected'\n            ? apiOptions?.targetIdentityId ?? identityId\n            : identityId,\n    });\n    return {\n        s3Config: {\n            credentials,\n            region,\n            useAccelerateEndpoint: apiOptions?.useAccelerateEndpoint,\n            ...(dangerouslyConnectToHttpEndpointForTesting\n                ? {\n                    customEndpoint: LOCAL_TESTING_S3_ENDPOINT,\n                    forcePathStyle: true,\n                }\n                : {}),\n        },\n        bucket,\n        keyPrefix,\n        isObjectLockEnabled,\n    };\n};\n"],"mappings":";;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,uBAAuB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,UAAU,KAAK;EACtE;EACI,MAAM;IAAEC,WAAW;IAAEC;EAAU,CAAE,GAAG,MAAMH,OAAO,CAACI,IAAI,CAACC,gBAAgB,CAAC;IACpEC,YAAY,EAAE;EACtB,CAAK,CAAC;EACFC,qBAAqB,CAAC,CAAC,CAACL,WAAW,EAAEM,0BAA0B,CAACC,aAAa,CAAC;EAC9EF,qBAAqB,CAAC,CAAC,CAACJ,UAAU,EAAEK,0BAA0B,CAACE,YAAY,CAAC;EAC5E,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAA0C,CAAE,GAAGb,OAAO,CAACc,SAAS,EAAE,EAAEC,OAAO,EAAEC,EAAE,IAAI,EAAE;EAC7GT,qBAAqB,CAAC,CAAC,CAACI,MAAM,EAAEH,0BAA0B,CAACS,QAAQ,CAAC;EACpEV,qBAAqB,CAAC,CAAC,CAACK,MAAM,EAAEJ,0BAA0B,CAACU,QAAQ,CAAC;EACpE,MAAM;IAAEC,kBAAkB;IAAEC,cAAc,GAAGC,aAAqB;IAAEC;EAAmB,CAAG,GAAGtB,OAAO,CAACuB,cAAc,EAAER,OAAO,EAAEC,EAAE,IAAI,EAAE;EACtI,MAAMQ,SAAS,GAAG,MAAMJ,cAAc,CAAC;IACnCK,WAAW,EAAExB,UAAU,EAAEwB,WAAW,IAAIN,kBAAkB,IAAIO,oBAAoB;IAC1F;IACQC,gBAAgB,EAAE1B,UAAU,EAAEwB,WAAW,KAAK,WAAW,GACnDxB,UAAU,EAAE0B,gBAAgB,IAAIxB,UAAU,GAC1CA;EACd,CAAK,CAAC;EACF,OAAO;IACHyB,QAAQ,EAAE;MACN1B,WAAW;MACXU,MAAM;MACNiB,qBAAqB,EAAE5B,UAAU,EAAE4B,qBAAqB;MACxD,IAAIhB,0CAA0C,GACxC;QACEiB,cAAc,EAAEC,yBAAyB;QACzCC,cAAc,EAAE;MACpC,CAAiB,GACC,EAAE;IACpB,CAAS;IACDrB,MAAM;IACNa,SAAS;IACTF;EACR,CAAK;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}