{"ast":null,"code":"import { ConsoleLogger } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore.mjs';\nimport { IdentityIdStorageKeys } from './types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('DefaultIdentityIdStore');\nclass DefaultIdentityIdStore {\n  setAuthConfig(authConfigParam) {\n    assertIdentityPoolIdConfig(authConfigParam.Cognito);\n    this.authConfig = authConfigParam;\n    this._authKeys = createKeysForAuthStorage('Cognito', authConfigParam.Cognito.identityPoolId);\n  }\n  constructor(keyValueStorage) {\n    this._authKeys = {};\n    this.keyValueStorage = keyValueStorage;\n  }\n  async loadIdentityId() {\n    assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n    try {\n      if (this._primaryIdentityId) {\n        return {\n          id: this._primaryIdentityId,\n          type: 'primary'\n        };\n      } else {\n        const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);\n        if (storedIdentityId) {\n          return {\n            id: storedIdentityId,\n            type: 'guest'\n          };\n        }\n        return null;\n      }\n    } catch (err) {\n      logger.log('Error getting stored IdentityId.', err);\n      return null;\n    }\n  }\n  async storeIdentityId(identity) {\n    assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n    if (identity.type === 'guest') {\n      this.keyValueStorage.setItem(this._authKeys.identityId, identity.id);\n      // Clear in-memory storage of primary identityId\n      this._primaryIdentityId = undefined;\n    } else {\n      this._primaryIdentityId = identity.id;\n      // Clear locally stored guest id\n      this.keyValueStorage.removeItem(this._authKeys.identityId);\n    }\n  }\n  async clearIdentityId() {\n    this._primaryIdentityId = undefined;\n    await this.keyValueStorage.removeItem(this._authKeys.identityId);\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(IdentityIdStorageKeys)(`com.amplify.${provider}`, identifier);\n};\nexport { DefaultIdentityIdStore };","map":{"version":3,"names":["logger","ConsoleLogger","DefaultIdentityIdStore","setAuthConfig","authConfigParam","assertIdentityPoolIdConfig","Cognito","authConfig","_authKeys","createKeysForAuthStorage","identityPoolId","constructor","keyValueStorage","loadIdentityId","_primaryIdentityId","id","type","storedIdentityId","getItem","identityId","err","log","storeIdentityId","identity","setItem","undefined","removeItem","clearIdentityId","provider","identifier","getAuthStorageKeys","IdentityIdStorageKeys"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\credentialsProvider\\IdentityIdStore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger, } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore';\nimport { IdentityIdStorageKeys } from './types';\nconst logger = new ConsoleLogger('DefaultIdentityIdStore');\nexport class DefaultIdentityIdStore {\n    setAuthConfig(authConfigParam) {\n        assertIdentityPoolIdConfig(authConfigParam.Cognito);\n        this.authConfig = authConfigParam;\n        this._authKeys = createKeysForAuthStorage('Cognito', authConfigParam.Cognito.identityPoolId);\n    }\n    constructor(keyValueStorage) {\n        this._authKeys = {};\n        this.keyValueStorage = keyValueStorage;\n    }\n    async loadIdentityId() {\n        assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n        try {\n            if (this._primaryIdentityId) {\n                return {\n                    id: this._primaryIdentityId,\n                    type: 'primary',\n                };\n            }\n            else {\n                const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);\n                if (storedIdentityId) {\n                    return {\n                        id: storedIdentityId,\n                        type: 'guest',\n                    };\n                }\n                return null;\n            }\n        }\n        catch (err) {\n            logger.log('Error getting stored IdentityId.', err);\n            return null;\n        }\n    }\n    async storeIdentityId(identity) {\n        assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n        if (identity.type === 'guest') {\n            this.keyValueStorage.setItem(this._authKeys.identityId, identity.id);\n            // Clear in-memory storage of primary identityId\n            this._primaryIdentityId = undefined;\n        }\n        else {\n            this._primaryIdentityId = identity.id;\n            // Clear locally stored guest id\n            this.keyValueStorage.removeItem(this._authKeys.identityId);\n        }\n    }\n    async clearIdentityId() {\n        this._primaryIdentityId = undefined;\n        await this.keyValueStorage.removeItem(this._authKeys.identityId);\n    }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n    return getAuthStorageKeys(IdentityIdStorageKeys)(`com.amplify.${provider}`, identifier);\n};\n"],"mappings":";;;;;AAAA;AACA;AAKA,MAAMA,MAAM,GAAG,IAAIC,aAAa,CAAC,wBAAwB,CAAC;AACnD,MAAMC,sBAAsB,CAAC;EAChCC,aAAaA,CAACC,eAAe,EAAE;IAC3BC,0BAA0B,CAACD,eAAe,CAACE,OAAO,CAAC;IACnD,IAAI,CAACC,UAAU,GAAGH,eAAe;IACjC,IAAI,CAACI,SAAS,GAAGC,wBAAwB,CAAC,SAAS,EAAEL,eAAe,CAACE,OAAO,CAACI,cAAc,CAAC;EACpG;EACIC,WAAWA,CAACC,eAAe,EAAE;IACzB,IAAI,CAACJ,SAAS,GAAG,EAAE;IACnB,IAAI,CAACI,eAAe,GAAGA,eAAe;EAC9C;EACI,MAAMC,cAAcA,CAAA,EAAG;IACnBR,0BAA0B,CAAC,IAAI,CAACE,UAAU,EAAED,OAAO,CAAC;IACpD,IAAI;MACA,IAAI,IAAI,CAACQ,kBAAkB,EAAE;QACzB,OAAO;UACHC,EAAE,EAAE,IAAI,CAACD,kBAAkB;UAC3BE,IAAI,EAAE;QAC1B,CAAiB;MACjB,CAAa,MACI;QACD,MAAMC,gBAAgB,GAAG,MAAM,IAAI,CAACL,eAAe,CAACM,OAAO,CAAC,IAAI,CAACV,SAAS,CAACW,UAAU,CAAC;QACtF,IAAIF,gBAAgB,EAAE;UAClB,OAAO;YACHF,EAAE,EAAEE,gBAAgB;YACpBD,IAAI,EAAE;UAC9B,CAAqB;QACrB;QACgB,OAAO,IAAI;MAC3B;IACA,CAAS,CACD,OAAOI,GAAG,EAAE;MACRpB,MAAM,CAACqB,GAAG,CAAC,kCAAkC,EAAED,GAAG,CAAC;MACnD,OAAO,IAAI;IACvB;EACA;EACI,MAAME,eAAeA,CAACC,QAAQ,EAAE;IAC5BlB,0BAA0B,CAAC,IAAI,CAACE,UAAU,EAAED,OAAO,CAAC;IACpD,IAAIiB,QAAQ,CAACP,IAAI,KAAK,OAAO,EAAE;MAC3B,IAAI,CAACJ,eAAe,CAACY,OAAO,CAAC,IAAI,CAAChB,SAAS,CAACW,UAAU,EAAEI,QAAQ,CAACR,EAAE,CAAC;MAChF;MACY,IAAI,CAACD,kBAAkB,GAAGW,SAAS;IAC/C,CAAS,MACI;MACD,IAAI,CAACX,kBAAkB,GAAGS,QAAQ,CAACR,EAAE;MACjD;MACY,IAAI,CAACH,eAAe,CAACc,UAAU,CAAC,IAAI,CAAClB,SAAS,CAACW,UAAU,CAAC;IACtE;EACA;EACI,MAAMQ,eAAeA,CAAA,EAAG;IACpB,IAAI,CAACb,kBAAkB,GAAGW,SAAS;IACnC,MAAM,IAAI,CAACb,eAAe,CAACc,UAAU,CAAC,IAAI,CAAClB,SAAS,CAACW,UAAU,CAAC;EACxE;AACA;AACA,MAAMV,wBAAwB,GAAGA,CAACmB,QAAQ,EAAEC,UAAU,KAAK;EACvD,OAAOC,kBAAkB,CAACC,qBAAqB,CAAC,CAAE,eAAcH,QAAS,EAAC,EAAEC,UAAU,CAAC;AAC3F,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}