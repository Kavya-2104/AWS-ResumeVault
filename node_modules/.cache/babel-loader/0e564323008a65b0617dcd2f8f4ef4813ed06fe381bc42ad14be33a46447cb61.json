{"ast":null,"code":"import { ConsoleLogger } from '../Logger/ConsoleLogger.mjs';\nimport '../utils/getClientInfo/getClientInfo.mjs';\nimport { isBrowser } from '../utils/isBrowser.mjs';\nimport '../utils/retry/retry.mjs';\nimport { AmplifyError } from '../errors/AmplifyError.mjs';\nimport '../types/errors.mjs';\nimport '../errors/errorHelpers.mjs';\nimport { assert, ServiceWorkerErrorCode } from './errorHelpers.mjs';\nimport 'uuid';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport '../awsClients/pinpoint/base.mjs';\nimport '../awsClients/pinpoint/errorHelpers.mjs';\nimport '../Cache/index.mjs';\nimport { record } from '../providers/pinpoint/apis/record.mjs';\nimport '../providers/pinpoint/utils/PinpointEventBuffer.mjs';\nimport '../providers/pinpoint/types/errors.mjs';\nimport { Amplify } from '../singleton/Amplify.mjs';\nimport { fetchAuthSession } from '../singleton/apis/fetchAuthSession.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nclass ServiceWorkerClass {\n  constructor() {\n    // The AWS Amplify logger\n    this._logger = new ConsoleLogger('ServiceWorker');\n  }\n  /**\n   * Get the currently active service worker\n   */\n  get serviceWorker() {\n    assert(this._serviceWorker !== undefined, ServiceWorkerErrorCode.UndefinedInstance);\n    return this._serviceWorker;\n  }\n  /**\n   * Register the service-worker.js file in the browser\n   * Make sure the service-worker.js is part of the build\n   * for example with Angular, modify the angular-cli.json file\n   * and add to \"assets\" array \"service-worker.js\"\n   * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n   * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   * @returns {Promise}\n   *\t- resolve(ServiceWorkerRegistration)\n   *\t- reject(Error)\n   **/\n  register(filePath = '/service-worker.js', scope = '/') {\n    this._logger.debug(`registering ${filePath}`);\n    this._logger.debug(`registering service worker with scope ${scope}`);\n    return new Promise((resolve, reject) => {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          scope\n        }).then(registration => {\n          if (registration.installing) {\n            this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            this._serviceWorker = registration.active;\n          }\n          this._registration = registration;\n          this._setupListeners();\n          this._logger.debug(`Service Worker Registration Success: ${registration}`);\n          return resolve(registration);\n        }).catch(error => {\n          this._logger.debug(`Service Worker Registration Failed ${error}`);\n          return reject(new AmplifyError({\n            name: ServiceWorkerErrorCode.Unavailable,\n            message: 'Service Worker not available',\n            underlyingError: error\n          }));\n        });\n      } else {\n        return reject(new AmplifyError({\n          name: ServiceWorkerErrorCode.Unavailable,\n          message: 'Service Worker not available'\n        }));\n      }\n    });\n  }\n  /**\n   * Enable web push notifications. If not subscribed, a new subscription will\n   * be created and registered.\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\n   * \tPush Server Libraries: https://github.com/web-push-libs/\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n   * @param publicKey\n   * @returns {Promise}\n   * \t- resolve(PushSubscription)\n   *  - reject(Error)\n   */\n  enablePush(publicKey) {\n    assert(this._registration !== undefined, ServiceWorkerErrorCode.UndefinedRegistration);\n    this._publicKey = publicKey;\n    return new Promise((resolve, reject) => {\n      if (isBrowser()) {\n        assert(this._registration !== undefined, ServiceWorkerErrorCode.UndefinedRegistration);\n        this._registration.pushManager.getSubscription().then(subscription => {\n          if (subscription) {\n            this._subscription = subscription;\n            this._logger.debug(`User is subscribed to push: ${JSON.stringify(subscription)}`);\n            resolve(subscription);\n          } else {\n            this._logger.debug(`User is NOT subscribed to push`);\n            return this._registration.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey: this._urlB64ToUint8Array(publicKey)\n            }).then(subscription => {\n              this._subscription = subscription;\n              this._logger.debug(`User subscribed: ${JSON.stringify(subscription)}`);\n              resolve(subscription);\n            }).catch(error => {\n              this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        return reject(new AmplifyError({\n          name: ServiceWorkerErrorCode.Unavailable,\n          message: 'Service Worker not available'\n        }));\n      }\n    });\n  }\n  /**\n   * Convert a base64 encoded string to a Uint8 array for the push server key\n   * @param base64String\n   */\n  _urlB64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n  /**\n   * Send a message to the service worker. The service worker needs\n   * to implement `self.addEventListener('message') to handle the\n   * message. This ***currently*** does not work in Safari or IE.\n   * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n   *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n   * @returns {Promise}\n   **/\n  send(message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  }\n  /**\n   * Listen for service worker state change and message events\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n   **/\n  _setupListeners() {\n    this.serviceWorker.addEventListener('statechange', async event => {\n      const currentState = this.serviceWorker.state;\n      this._logger.debug(`ServiceWorker statechange: ${currentState}`);\n      const {\n        appId,\n        region,\n        bufferSize,\n        flushInterval,\n        flushSize,\n        resendLimit\n      } = Amplify.getConfig().Analytics?.Pinpoint ?? {};\n      const {\n        credentials\n      } = await fetchAuthSession();\n      if (appId && region && credentials) {\n        // Pinpoint is configured, record an event\n        record({\n          appId,\n          region,\n          category: 'Core',\n          credentials,\n          bufferSize,\n          flushInterval,\n          flushSize,\n          resendLimit,\n          event: {\n            name: 'ServiceWorker',\n            attributes: {\n              state: currentState\n            }\n          }\n        });\n      }\n    });\n    this.serviceWorker.addEventListener('message', event => {\n      this._logger.debug(`ServiceWorker message event: ${event}`);\n    });\n  }\n}\nexport { ServiceWorkerClass };","map":{"version":3,"names":["ServiceWorkerClass","constructor","_logger","ConsoleLogger","serviceWorker","assert","_serviceWorker","undefined","ServiceWorkerErrorCode","UndefinedInstance","register","filePath","scope","debug","Promise","resolve","reject","navigator","then","registration","installing","waiting","active","_registration","_setupListeners","catch","error","AmplifyError","name","Unavailable","message","underlyingError","enablePush","publicKey","UndefinedRegistration","_publicKey","isBrowser","pushManager","getSubscription","subscription","_subscription","JSON","stringify","subscribe","userVisibleOnly","applicationServerKey","_urlB64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","send","postMessage","addEventListener","event","currentState","state","appId","region","bufferSize","flushInterval","flushSize","resendLimit","Amplify","getConfig","Analytics","Pinpoint","credentials","fetchAuthSession","record","category","attributes"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\ServiceWorker\\ServiceWorker.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger } from '../Logger';\nimport { isBrowser } from '../utils';\nimport { AmplifyError } from '../errors';\nimport { assert, ServiceWorkerErrorCode } from './errorHelpers';\nimport { record } from '../providers/pinpoint';\nimport { Amplify, fetchAuthSession } from '../singleton';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nexport class ServiceWorkerClass {\n    constructor() {\n        // The AWS Amplify logger\n        this._logger = new ConsoleLogger('ServiceWorker');\n    }\n    /**\n     * Get the currently active service worker\n     */\n    get serviceWorker() {\n        assert(this._serviceWorker !== undefined, ServiceWorkerErrorCode.UndefinedInstance);\n        return this._serviceWorker;\n    }\n    /**\n     * Register the service-worker.js file in the browser\n     * Make sure the service-worker.js is part of the build\n     * for example with Angular, modify the angular-cli.json file\n     * and add to \"assets\" array \"service-worker.js\"\n     * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n     * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n     * @returns {Promise}\n     *\t- resolve(ServiceWorkerRegistration)\n     *\t- reject(Error)\n     **/\n    register(filePath = '/service-worker.js', scope = '/') {\n        this._logger.debug(`registering ${filePath}`);\n        this._logger.debug(`registering service worker with scope ${scope}`);\n        return new Promise((resolve, reject) => {\n            if (navigator && 'serviceWorker' in navigator) {\n                navigator.serviceWorker\n                    .register(filePath, {\n                    scope,\n                })\n                    .then(registration => {\n                    if (registration.installing) {\n                        this._serviceWorker = registration.installing;\n                    }\n                    else if (registration.waiting) {\n                        this._serviceWorker = registration.waiting;\n                    }\n                    else if (registration.active) {\n                        this._serviceWorker = registration.active;\n                    }\n                    this._registration = registration;\n                    this._setupListeners();\n                    this._logger.debug(`Service Worker Registration Success: ${registration}`);\n                    return resolve(registration);\n                })\n                    .catch(error => {\n                    this._logger.debug(`Service Worker Registration Failed ${error}`);\n                    return reject(new AmplifyError({\n                        name: ServiceWorkerErrorCode.Unavailable,\n                        message: 'Service Worker not available',\n                        underlyingError: error,\n                    }));\n                });\n            }\n            else {\n                return reject(new AmplifyError({\n                    name: ServiceWorkerErrorCode.Unavailable,\n                    message: 'Service Worker not available',\n                }));\n            }\n        });\n    }\n    /**\n     * Enable web push notifications. If not subscribed, a new subscription will\n     * be created and registered.\n     * \tTest Push Server: https://web-push-codelab.glitch.me/\n     * \tPush Server Libraries: https://github.com/web-push-libs/\n     * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n     * @param publicKey\n     * @returns {Promise}\n     * \t- resolve(PushSubscription)\n     *  - reject(Error)\n     */\n    enablePush(publicKey) {\n        assert(this._registration !== undefined, ServiceWorkerErrorCode.UndefinedRegistration);\n        this._publicKey = publicKey;\n        return new Promise((resolve, reject) => {\n            if (isBrowser()) {\n                assert(this._registration !== undefined, ServiceWorkerErrorCode.UndefinedRegistration);\n                this._registration.pushManager.getSubscription().then(subscription => {\n                    if (subscription) {\n                        this._subscription = subscription;\n                        this._logger.debug(`User is subscribed to push: ${JSON.stringify(subscription)}`);\n                        resolve(subscription);\n                    }\n                    else {\n                        this._logger.debug(`User is NOT subscribed to push`);\n                        return this._registration.pushManager.subscribe({\n                            userVisibleOnly: true,\n                            applicationServerKey: this._urlB64ToUint8Array(publicKey),\n                        })\n                            .then(subscription => {\n                            this._subscription = subscription;\n                            this._logger.debug(`User subscribed: ${JSON.stringify(subscription)}`);\n                            resolve(subscription);\n                        })\n                            .catch(error => {\n                            this._logger.error(error);\n                        });\n                    }\n                });\n            }\n            else {\n                return reject(new AmplifyError({\n                    name: ServiceWorkerErrorCode.Unavailable,\n                    message: 'Service Worker not available',\n                }));\n            }\n        });\n    }\n    /**\n     * Convert a base64 encoded string to a Uint8 array for the push server key\n     * @param base64String\n     */\n    _urlB64ToUint8Array(base64String) {\n        const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n        const base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        const rawData = window.atob(base64);\n        const outputArray = new Uint8Array(rawData.length);\n        for (let i = 0; i < rawData.length; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    }\n    /**\n     * Send a message to the service worker. The service worker needs\n     * to implement `self.addEventListener('message') to handle the\n     * message. This ***currently*** does not work in Safari or IE.\n     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n     *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n     * @returns {Promise}\n     **/\n    send(message) {\n        if (this._serviceWorker) {\n            this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n        }\n    }\n    /**\n     * Listen for service worker state change and message events\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n     **/\n    _setupListeners() {\n        this.serviceWorker.addEventListener('statechange', async (event) => {\n            const currentState = this.serviceWorker.state;\n            this._logger.debug(`ServiceWorker statechange: ${currentState}`);\n            const { appId, region, bufferSize, flushInterval, flushSize, resendLimit, } = Amplify.getConfig().Analytics?.Pinpoint ?? {};\n            const { credentials } = await fetchAuthSession();\n            if (appId && region && credentials) {\n                // Pinpoint is configured, record an event\n                record({\n                    appId,\n                    region,\n                    category: 'Core',\n                    credentials,\n                    bufferSize,\n                    flushInterval,\n                    flushSize,\n                    resendLimit,\n                    event: {\n                        name: 'ServiceWorker',\n                        attributes: {\n                            state: currentState,\n                        },\n                    },\n                });\n            }\n        });\n        this.serviceWorker.addEventListener('message', event => {\n            this._logger.debug(`ServiceWorker message event: ${event}`);\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}