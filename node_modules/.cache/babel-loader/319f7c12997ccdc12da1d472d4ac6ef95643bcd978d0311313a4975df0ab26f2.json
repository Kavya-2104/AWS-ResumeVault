{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base.mjs';\nimport { parseXmlError, parseXmlBody } from './utils/parsePayload.mjs';\nimport { s3TransferHandler } from './runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport './runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError } from './utils/deserializeHelpers.mjs';\nimport { serializeObjectConfigsToHeaders, assignStringVariables, validateS3RequiredParameter, serializePathnameObjectKey } from './utils/serializeHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst copyObjectSerializer = async (input, endpoint) => {\n  const headers = {\n    ...(await serializeObjectConfigsToHeaders(input)),\n    ...assignStringVariables({\n      'x-amz-copy-source': input.CopySource,\n      'x-amz-metadata-directive': input.MetadataDirective\n    })\n  };\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  return {\n    method: 'PUT',\n    headers,\n    url\n  };\n};\nconst copyObjectDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseXmlError(response);\n    throw buildStorageServiceError(error, response.statusCode);\n  } else {\n    await parseXmlBody(response);\n    return {\n      $metadata: parseMetadata(response)\n    };\n  }\n};\nconst copyObject = composeServiceApi(s3TransferHandler, copyObjectSerializer, copyObjectDeserializer, {\n  ...defaultConfig,\n  responseType: 'text'\n});\nexport { copyObject };","map":{"version":3,"names":["copyObjectSerializer","input","endpoint","headers","serializeObjectConfigsToHeaders","assignStringVariables","CopySource","MetadataDirective","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","method","copyObjectDeserializer","response","statusCode","error","parseXmlError","buildStorageServiceError","parseXmlBody","$metadata","parseMetadata","copyObject","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\copyObject.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base';\nimport { buildStorageServiceError, parseXmlBody, parseXmlError, s3TransferHandler, assignStringVariables, serializeObjectConfigsToHeaders, serializePathnameObjectKey, validateS3RequiredParameter, } from './utils';\nconst copyObjectSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await serializeObjectConfigsToHeaders(input)),\n        ...assignStringVariables({\n            'x-amz-copy-source': input.CopySource,\n            'x-amz-metadata-directive': input.MetadataDirective,\n        }),\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    return {\n        method: 'PUT',\n        headers,\n        url,\n    };\n};\nconst copyObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = (await parseXmlError(response));\n        throw buildStorageServiceError(error, response.statusCode);\n    }\n    else {\n        await parseXmlBody(response);\n        return {\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const copyObject = composeServiceApi(s3TransferHandler, copyObjectSerializer, copyObjectDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAMA,MAAMA,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACpD,MAAMC,OAAO,GAAG;IACZ,IAAI,MAAMC,+BAA+B,CAACH,KAAK,CAAC,CAAC;IACjD,GAAGI,qBAAqB,CAAC;MACrB,mBAAmB,EAAEJ,KAAK,CAACK,UAAU;MACrC,0BAA0B,EAAEL,KAAK,CAACM;IAC9C,CAAS;EACT,CAAK;EACD,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACP,QAAQ,CAACM,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACV,KAAK,CAACW,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEP,KAAK,CAACW,GAAG,CAAC;EACzD,OAAO;IACHG,MAAM,EAAE,KAAK;IACbZ,OAAO;IACPK;EACR,CAAK;AACL,CAAC;AACD,MAAMQ,sBAAsB,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAI,MAAMC,aAAa,CAACH,QAAQ,CAAE;IAC7C,MAAMI,wBAAwB,CAACF,KAAK,EAAEF,QAAQ,CAACC,UAAU,CAAC;EAClE,CAAK,MACI;IACD,MAAMI,YAAY,CAACL,QAAQ,CAAC;IAC5B,OAAO;MACHM,SAAS,EAAEC,aAAa,CAACP,QAAQ;IAC7C,CAAS;EACT;AACA,CAAC;AACW,MAACQ,UAAU,GAAGC,iBAAiB,CAACC,iBAAiB,EAAE3B,oBAAoB,EAAEgB,sBAAsB,EAAE;EAAE,GAAGY,aAAa;EAAEC,YAAY,EAAE;AAAM,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}