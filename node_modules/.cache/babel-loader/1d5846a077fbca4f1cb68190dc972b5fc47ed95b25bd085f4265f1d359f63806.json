{"ast":null,"code":"import { __assign } from './_virtual/_tslib.js';\nimport { symbolObservable, toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\nfunction createNullActor(id) {\n  var _a;\n  return _a = {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    getSnapshot: function () {\n      return undefined;\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  }, _a[symbolObservable] = function () {\n    return this;\n  }, _a;\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id); // @ts-ignore\n\n  tempActor.deferred = true;\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    var initialState_1 = tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n    tempActor.getSnapshot = function () {\n      return initialState_1;\n    };\n  }\n  return tempActor;\n}\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\n\nfunction toActorRef(actorRefLike) {\n  var _a;\n  return __assign((_a = {\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    id: 'anonymous',\n    getSnapshot: function () {\n      return undefined;\n    }\n  }, _a[symbolObservable] = function () {\n    return this;\n  }, _a), actorRefLike);\n}\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor, isSpawnedActor, toActorRef };","map":{"version":3,"names":["__assign","symbolObservable","toInvokeSource","mapContext","isMachine","provide","createNullActor","id","_a","send","subscribe","unsubscribe","getSnapshot","undefined","toJSON","createInvocableActor","invokeDefinition","machine","context","_event","invokeSrc","src","serviceCreator","options","services","type","resolvedData","data","tempActor","createDeferredActor","meta","entity","deferred","initialState_1","state","withContext","initialState","isActor","item","e","isSpawnedActor","toActorRef","actorRefLike"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/xstate/es/Actor.js"],"sourcesContent":["import { __assign } from './_virtual/_tslib.js';\nimport { symbolObservable, toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\n\nfunction createNullActor(id) {\n  var _a;\n\n  return _a = {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    getSnapshot: function () {\n      return undefined;\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  }, _a[symbolObservable] = function () {\n    return this;\n  }, _a;\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id); // @ts-ignore\n\n  tempActor.deferred = true;\n\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    var initialState_1 = tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n\n    tempActor.getSnapshot = function () {\n      return initialState_1;\n    };\n  }\n\n  return tempActor;\n}\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\n\nfunction toActorRef(actorRefLike) {\n  var _a;\n\n  return __assign((_a = {\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    id: 'anonymous',\n    getSnapshot: function () {\n      return undefined;\n    }\n  }, _a[symbolObservable] = function () {\n    return this;\n  }, _a), actorRefLike);\n}\n\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor, isSpawnedActor, toActorRef };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}