{"ast":null,"code":"import { Sha256 } from '@aws-crypto/sha256-js';\nimport { base64Encoder, base64Decoder } from '@aws-amplify/core/internals/utils';\nimport { textEncoder } from '../textEncoder/index.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getSignatureString = ({\n  userPoolName,\n  username,\n  challengeParameters,\n  dateNow,\n  hkdf\n}) => {\n  const bufUPIDaToB = textEncoder.convert(userPoolName);\n  const bufUNaToB = textEncoder.convert(username);\n  const bufSBaToB = urlB64ToUint8Array(challengeParameters.SECRET_BLOCK);\n  const bufDNaToB = textEncoder.convert(dateNow);\n  const bufConcat = new Uint8Array(bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength + bufDNaToB.byteLength);\n  bufConcat.set(bufUPIDaToB, 0);\n  bufConcat.set(bufUNaToB, bufUPIDaToB.byteLength);\n  bufConcat.set(bufSBaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength);\n  bufConcat.set(bufDNaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength);\n  const awsCryptoHash = new Sha256(hkdf);\n  awsCryptoHash.update(bufConcat);\n  const resultFromAWSCrypto = awsCryptoHash.digestSync();\n  const signatureString = base64Encoder.convert(resultFromAWSCrypto);\n  return signatureString;\n};\nconst urlB64ToUint8Array = base64String => {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = base64Decoder.convert(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\nexport { getSignatureString };","map":{"version":3,"names":["getSignatureString","userPoolName","username","challengeParameters","dateNow","hkdf","bufUPIDaToB","textEncoder","convert","bufUNaToB","bufSBaToB","urlB64ToUint8Array","SECRET_BLOCK","bufDNaToB","bufConcat","Uint8Array","byteLength","set","awsCryptoHash","Sha256","update","resultFromAWSCrypto","digestSync","signatureString","base64Encoder","base64String","padding","repeat","length","base64","replace","rawData","base64Decoder","outputArray","i","charCodeAt"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\utils\\srp\\getSignatureString.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Sha256 } from '@aws-crypto/sha256-js';\nimport { base64Decoder, base64Encoder, } from '@aws-amplify/core/internals/utils';\nimport { textEncoder } from '../textEncoder';\nexport const getSignatureString = ({ userPoolName, username, challengeParameters, dateNow, hkdf, }) => {\n    const bufUPIDaToB = textEncoder.convert(userPoolName);\n    const bufUNaToB = textEncoder.convert(username);\n    const bufSBaToB = urlB64ToUint8Array(challengeParameters.SECRET_BLOCK);\n    const bufDNaToB = textEncoder.convert(dateNow);\n    const bufConcat = new Uint8Array(bufUPIDaToB.byteLength +\n        bufUNaToB.byteLength +\n        bufSBaToB.byteLength +\n        bufDNaToB.byteLength);\n    bufConcat.set(bufUPIDaToB, 0);\n    bufConcat.set(bufUNaToB, bufUPIDaToB.byteLength);\n    bufConcat.set(bufSBaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength);\n    bufConcat.set(bufDNaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength);\n    const awsCryptoHash = new Sha256(hkdf);\n    awsCryptoHash.update(bufConcat);\n    const resultFromAWSCrypto = awsCryptoHash.digestSync();\n    const signatureString = base64Encoder.convert(resultFromAWSCrypto);\n    return signatureString;\n};\nconst urlB64ToUint8Array = (base64String) => {\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n    const base64 = (base64String + padding)\n        .replace(/\\-/g, '+')\n        .replace(/_/g, '/');\n    const rawData = base64Decoder.convert(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n};\n"],"mappings":";;;;AAAA;AACA;AAIY,MAACA,kBAAkB,GAAGA,CAAC;EAAEC,YAAY;EAAEC,QAAQ;EAAEC,mBAAmB;EAAEC,OAAO;EAAEC;AAAI,CAAG,KAAK;EACnG,MAAMC,WAAW,GAAGC,WAAW,CAACC,OAAO,CAACP,YAAY,CAAC;EACrD,MAAMQ,SAAS,GAAGF,WAAW,CAACC,OAAO,CAACN,QAAQ,CAAC;EAC/C,MAAMQ,SAAS,GAAGC,kBAAkB,CAACR,mBAAmB,CAACS,YAAY,CAAC;EACtE,MAAMC,SAAS,GAAGN,WAAW,CAACC,OAAO,CAACJ,OAAO,CAAC;EAC9C,MAAMU,SAAS,GAAG,IAAIC,UAAU,CAACT,WAAW,CAACU,UAAU,GACnDP,SAAS,CAACO,UAAU,GACpBN,SAAS,CAACM,UAAU,GACpBH,SAAS,CAACG,UAAU,CAAC;EACzBF,SAAS,CAACG,GAAG,CAACX,WAAW,EAAE,CAAC,CAAC;EAC7BQ,SAAS,CAACG,GAAG,CAACR,SAAS,EAAEH,WAAW,CAACU,UAAU,CAAC;EAChDF,SAAS,CAACG,GAAG,CAACP,SAAS,EAAEJ,WAAW,CAACU,UAAU,GAAGP,SAAS,CAACO,UAAU,CAAC;EACvEF,SAAS,CAACG,GAAG,CAACJ,SAAS,EAAEP,WAAW,CAACU,UAAU,GAAGP,SAAS,CAACO,UAAU,GAAGN,SAAS,CAACM,UAAU,CAAC;EAC9F,MAAME,aAAa,GAAG,IAAIC,MAAM,CAACd,IAAI,CAAC;EACtCa,aAAa,CAACE,MAAM,CAACN,SAAS,CAAC;EAC/B,MAAMO,mBAAmB,GAAGH,aAAa,CAACI,UAAU,EAAE;EACtD,MAAMC,eAAe,GAAGC,aAAa,CAAChB,OAAO,CAACa,mBAAmB,CAAC;EAClE,OAAOE,eAAe;AAC1B;AACA,MAAMZ,kBAAkB,GAAIc,YAAY,IAAK;EACzC,MAAMC,OAAO,GAAG,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,GAAIF,YAAY,CAACG,MAAM,GAAG,CAAE,IAAI,CAAC,CAAC;EAC/D,MAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAO,EACjCI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EACvB,MAAMC,OAAO,GAAGC,aAAa,CAACxB,OAAO,CAACqB,MAAM,CAAC;EAC7C,MAAMI,WAAW,GAAG,IAAIlB,UAAU,CAACgB,OAAO,CAACH,MAAM,CAAC;EAClD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACH,MAAM,EAAE,EAAEM,CAAC,EAAE;IACrCD,WAAW,CAACC,CAAC,CAAC,GAAGH,OAAO,CAACI,UAAU,CAACD,CAAC,CAAC;EAC9C;EACI,OAAOD,WAAW;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}