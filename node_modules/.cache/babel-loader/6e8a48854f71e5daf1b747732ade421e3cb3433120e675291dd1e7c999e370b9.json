{"ast":null,"code":"import { forgetDevice as forgetDevice$1 } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertAuthTokens, assertDeviceMetadata } from '../utils/types.mjs';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Forget a remembered device while authenticated.\n *\n * @param input - The ForgetDeviceInput object.\n * @throws - {@link ForgetDeviceException} - Cognito service errors thrown when\n * forgetting device with invalid device key\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function forgetDevice(input) {\n  const {\n    device: {\n      id: externalDeviceKey\n    } = {\n      id: undefined\n    }\n  } = input ?? {};\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata();\n  const currentDeviceKey = deviceMetadata?.deviceKey;\n  if (!externalDeviceKey) assertDeviceMetadata(deviceMetadata);\n  await forgetDevice$1({\n    region: getRegion(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ForgetDevice)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    DeviceKey: externalDeviceKey ?? currentDeviceKey\n  });\n  if (!externalDeviceKey || externalDeviceKey === currentDeviceKey) await tokenOrchestrator.clearDeviceMetadata();\n}\nexport { forgetDevice };","map":{"version":3,"names":["forgetDevice","input","device","id","externalDeviceKey","undefined","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","tokens","fetchAuthSession","assertAuthTokens","deviceMetadata","tokenOrchestrator","getDeviceMetadata","currentDeviceKey","deviceKey","assertDeviceMetadata","forgetDevice$1","region","getRegion","userPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ForgetDevice","AccessToken","accessToken","toString","DeviceKey","clearDeviceMetadata"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\forgetDevice.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { forgetDevice as serviceForgetDevice } from '../utils/clients/CognitoIdentityProvider';\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertAuthTokens, assertDeviceMetadata } from '../utils/types';\nimport { assertTokenProviderConfig, AuthAction, } from '@aws-amplify/core/internals/utils';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { getAuthUserAgentValue } from '../../../utils';\n/**\n * Forget a remembered device while authenticated.\n *\n * @param input - The ForgetDeviceInput object.\n * @throws - {@link ForgetDeviceException} - Cognito service errors thrown when\n * forgetting device with invalid device key\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function forgetDevice(input) {\n    const { device: { id: externalDeviceKey } = { id: undefined } } = input ?? {};\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { tokens } = await fetchAuthSession();\n    assertAuthTokens(tokens);\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata();\n    const currentDeviceKey = deviceMetadata?.deviceKey;\n    if (!externalDeviceKey)\n        assertDeviceMetadata(deviceMetadata);\n    await serviceForgetDevice({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ForgetDevice),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        DeviceKey: externalDeviceKey ?? currentDeviceKey,\n    });\n    if (!externalDeviceKey || externalDeviceKey === currentDeviceKey)\n        await tokenOrchestrator.clearDeviceMetadata();\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,YAAYA,CAACC,KAAK,EAAE;EACtC,MAAM;IAAEC,MAAM,EAAE;MAAEC,EAAE,EAAEC;IAAiB,CAAE,GAAG;MAAED,EAAE,EAAEE;IAAS;EAAE,CAAE,GAAGJ,KAAK,IAAI,EAAE;EAC7E,MAAMK,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM;EAAM,CAAE,GAAG,MAAMC,gBAAgB,EAAE;EAC3CC,gBAAgB,CAACF,MAAM,CAAC;EACxB,MAAMG,cAAc,GAAG,MAAMC,iBAAiB,CAACC,iBAAiB,EAAE;EAClE,MAAMC,gBAAgB,GAAGH,cAAc,EAAEI,SAAS;EAClD,IAAI,CAACf,iBAAiB,EAClBgB,oBAAoB,CAACL,cAAc,CAAC;EACxC,MAAMM,cAAmB,CAAC;IACtBC,MAAM,EAAEC,SAAS,CAACjB,UAAU,CAACkB,UAAU,CAAC;IACxCC,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,YAAY;EACrE,CAAK,EAAE;IACCC,WAAW,EAAEjB,MAAM,CAACkB,WAAW,CAACC,QAAQ,EAAE;IAC1CC,SAAS,EAAE5B,iBAAiB,IAAIc;EACxC,CAAK,CAAC;EACF,IAAI,CAACd,iBAAiB,IAAIA,iBAAiB,KAAKc,gBAAgB,EAC5D,MAAMF,iBAAiB,CAACiB,mBAAmB,EAAE;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}