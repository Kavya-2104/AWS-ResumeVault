{"ast":null,"code":"import { HubInternal } from '@aws-amplify/core/internals/utils';\nimport { signIn } from '../apis/signIn.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { setAutoSignIn, resetAutoSignIn } from '../apis/autoSignIn.mjs';\nimport { AUTO_SIGN_IN_EXCEPTION } from '../../../errors/constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\nfunction handleCodeAutoSignIn(signInInput) {\n  const stopHubListener = HubInternal.listen('auth-internal', async ({\n    payload\n  }) => {\n    switch (payload.event) {\n      case 'confirmSignUp':\n        {\n          const response = payload.data;\n          if (response?.isSignUpComplete) {\n            HubInternal.dispatch('auth-internal', {\n              event: 'autoSignIn'\n            });\n            setAutoSignIn(autoSignInWithCode(signInInput));\n            stopHubListener();\n          }\n        }\n    }\n  });\n  // This will stop the listener if confirmSignUp is not resolved.\n  const timeOutId = setTimeout(() => {\n    stopHubListener();\n    setAutoSignInStarted(false);\n    clearTimeout(timeOutId);\n    resetAutoSignIn();\n  }, MAX_AUTOSIGNIN_POLLING_MS);\n}\nfunction debounce(fun, delay) {\n  let timer;\n  return function (args) {\n    if (!timer) {\n      fun(...args);\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      timer = undefined;\n    }, delay);\n  };\n}\nfunction handleAutoSignInWithLink(signInInput, resolve, reject) {\n  const start = Date.now();\n  const autoSignInPollingIntervalId = setInterval(async () => {\n    const elapsedTime = Date.now() - start;\n    const maxTime = MAX_AUTOSIGNIN_POLLING_MS;\n    if (elapsedTime > maxTime) {\n      clearInterval(autoSignInPollingIntervalId);\n      setAutoSignInStarted(false);\n      reject(new AuthError({\n        name: AUTO_SIGN_IN_EXCEPTION,\n        message: 'The account was not confirmed on time.',\n        recoverySuggestion: 'Try to verify your account by clicking the link sent your email or phone and then login manually.'\n      }));\n      resetAutoSignIn();\n      return;\n    } else {\n      try {\n        const signInOutput = await signIn(signInInput);\n        if (signInOutput.nextStep.signInStep !== 'CONFIRM_SIGN_UP') {\n          resolve(signInOutput);\n          clearInterval(autoSignInPollingIntervalId);\n          setAutoSignInStarted(false);\n          resetAutoSignIn();\n          return;\n        }\n      } catch (error) {\n        clearInterval(autoSignInPollingIntervalId);\n        setAutoSignInStarted(false);\n        reject(error);\n        resetAutoSignIn();\n      }\n    }\n  }, 5000);\n}\nconst debouncedAutoSignInWithLink = debounce(handleAutoSignInWithLink, 300);\nconst debouncedAutoSignWithCodeOrUserConfirmed = debounce(handleAutoSignInWithCodeOrUserConfirmed, 300);\nlet autoSignInStarted = false;\nlet usernameUsedForAutoSignIn;\nfunction setUsernameUsedForAutoSignIn(username) {\n  usernameUsedForAutoSignIn = username;\n}\nfunction isAutoSignInUserUsingConfirmSignUp(username) {\n  return usernameUsedForAutoSignIn === username;\n}\nfunction isAutoSignInStarted() {\n  return autoSignInStarted;\n}\nfunction setAutoSignInStarted(value) {\n  if (value === false) {\n    setUsernameUsedForAutoSignIn(undefined);\n  }\n  autoSignInStarted = value;\n}\nfunction isSignUpComplete(output) {\n  return !!output.UserConfirmed;\n}\nfunction autoSignInWhenUserIsConfirmedWithLink(signInInput) {\n  return async () => {\n    return new Promise(async (resolve, reject) => {\n      debouncedAutoSignInWithLink([signInInput, resolve, reject]);\n    });\n  };\n}\nasync function handleAutoSignInWithCodeOrUserConfirmed(signInInput, resolve, reject) {\n  try {\n    const output = await signIn(signInInput);\n    resolve(output);\n    resetAutoSignIn();\n  } catch (error) {\n    reject(error);\n    resetAutoSignIn();\n  }\n}\nfunction autoSignInWithCode(signInInput) {\n  return async () => {\n    return new Promise(async (resolve, reject) => {\n      debouncedAutoSignWithCodeOrUserConfirmed([signInInput, resolve, reject]);\n    });\n  };\n}\nconst autoSignInUserConfirmed = autoSignInWithCode;\nexport { autoSignInUserConfirmed, autoSignInWhenUserIsConfirmedWithLink, handleCodeAutoSignIn, isAutoSignInStarted, isAutoSignInUserUsingConfirmSignUp, isSignUpComplete, setAutoSignInStarted, setUsernameUsedForAutoSignIn };","map":{"version":3,"names":["MAX_AUTOSIGNIN_POLLING_MS","handleCodeAutoSignIn","signInInput","stopHubListener","HubInternal","listen","payload","event","response","data","isSignUpComplete","dispatch","setAutoSignIn","autoSignInWithCode","timeOutId","setTimeout","setAutoSignInStarted","clearTimeout","resetAutoSignIn","debounce","fun","delay","timer","args","undefined","handleAutoSignInWithLink","resolve","reject","start","Date","now","autoSignInPollingIntervalId","setInterval","elapsedTime","maxTime","clearInterval","AuthError","name","AUTO_SIGN_IN_EXCEPTION","message","recoverySuggestion","signInOutput","signIn","nextStep","signInStep","error","debouncedAutoSignInWithLink","debouncedAutoSignWithCodeOrUserConfirmed","handleAutoSignInWithCodeOrUserConfirmed","autoSignInStarted","usernameUsedForAutoSignIn","setUsernameUsedForAutoSignIn","username","isAutoSignInUserUsingConfirmSignUp","isAutoSignInStarted","value","output","UserConfirmed","autoSignInWhenUserIsConfirmedWithLink","Promise","autoSignInUserConfirmed"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\utils\\signUpHelpers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { HubInternal } from '@aws-amplify/core/internals/utils';\nimport { signIn } from '../apis/signIn';\nimport { AuthError } from '../../../errors/AuthError';\nimport { resetAutoSignIn, setAutoSignIn } from '../apis/autoSignIn';\nimport { AUTO_SIGN_IN_EXCEPTION } from '../../../errors/constants';\nconst MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\nexport function handleCodeAutoSignIn(signInInput) {\n    const stopHubListener = HubInternal.listen('auth-internal', async ({ payload }) => {\n        switch (payload.event) {\n            case 'confirmSignUp': {\n                const response = payload.data;\n                if (response?.isSignUpComplete) {\n                    HubInternal.dispatch('auth-internal', {\n                        event: 'autoSignIn',\n                    });\n                    setAutoSignIn(autoSignInWithCode(signInInput));\n                    stopHubListener();\n                }\n            }\n        }\n    });\n    // This will stop the listener if confirmSignUp is not resolved.\n    const timeOutId = setTimeout(() => {\n        stopHubListener();\n        setAutoSignInStarted(false);\n        clearTimeout(timeOutId);\n        resetAutoSignIn();\n    }, MAX_AUTOSIGNIN_POLLING_MS);\n}\nfunction debounce(fun, delay) {\n    let timer;\n    return function (args) {\n        if (!timer) {\n            fun(...args);\n        }\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            timer = undefined;\n        }, delay);\n    };\n}\nfunction handleAutoSignInWithLink(signInInput, resolve, reject) {\n    const start = Date.now();\n    const autoSignInPollingIntervalId = setInterval(async () => {\n        const elapsedTime = Date.now() - start;\n        const maxTime = MAX_AUTOSIGNIN_POLLING_MS;\n        if (elapsedTime > maxTime) {\n            clearInterval(autoSignInPollingIntervalId);\n            setAutoSignInStarted(false);\n            reject(new AuthError({\n                name: AUTO_SIGN_IN_EXCEPTION,\n                message: 'The account was not confirmed on time.',\n                recoverySuggestion: 'Try to verify your account by clicking the link sent your email or phone and then login manually.',\n            }));\n            resetAutoSignIn();\n            return;\n        }\n        else {\n            try {\n                const signInOutput = await signIn(signInInput);\n                if (signInOutput.nextStep.signInStep !== 'CONFIRM_SIGN_UP') {\n                    resolve(signInOutput);\n                    clearInterval(autoSignInPollingIntervalId);\n                    setAutoSignInStarted(false);\n                    resetAutoSignIn();\n                    return;\n                }\n            }\n            catch (error) {\n                clearInterval(autoSignInPollingIntervalId);\n                setAutoSignInStarted(false);\n                reject(error);\n                resetAutoSignIn();\n            }\n        }\n    }, 5000);\n}\nconst debouncedAutoSignInWithLink = debounce(handleAutoSignInWithLink, 300);\nconst debouncedAutoSignWithCodeOrUserConfirmed = debounce(handleAutoSignInWithCodeOrUserConfirmed, 300);\nlet autoSignInStarted = false;\nlet usernameUsedForAutoSignIn;\nexport function setUsernameUsedForAutoSignIn(username) {\n    usernameUsedForAutoSignIn = username;\n}\nexport function isAutoSignInUserUsingConfirmSignUp(username) {\n    return usernameUsedForAutoSignIn === username;\n}\nexport function isAutoSignInStarted() {\n    return autoSignInStarted;\n}\nexport function setAutoSignInStarted(value) {\n    if (value === false) {\n        setUsernameUsedForAutoSignIn(undefined);\n    }\n    autoSignInStarted = value;\n}\nexport function isSignUpComplete(output) {\n    return !!output.UserConfirmed;\n}\nexport function autoSignInWhenUserIsConfirmedWithLink(signInInput) {\n    return async () => {\n        return new Promise(async (resolve, reject) => {\n            debouncedAutoSignInWithLink([signInInput, resolve, reject]);\n        });\n    };\n}\nasync function handleAutoSignInWithCodeOrUserConfirmed(signInInput, resolve, reject) {\n    try {\n        const output = await signIn(signInInput);\n        resolve(output);\n        resetAutoSignIn();\n    }\n    catch (error) {\n        reject(error);\n        resetAutoSignIn();\n    }\n}\nfunction autoSignInWithCode(signInInput) {\n    return async () => {\n        return new Promise(async (resolve, reject) => {\n            debouncedAutoSignWithCodeOrUserConfirmed([signInInput, resolve, reject]);\n        });\n    };\n}\nexport const autoSignInUserConfirmed = autoSignInWithCode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}