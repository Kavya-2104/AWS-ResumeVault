{"ast":null,"code":"import { AmplifyError } from '../../errors/AmplifyError.mjs';\nimport '../../types/errors.mjs';\nimport '../../errors/errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getCrypto = () => {\n  if (typeof window === 'object' && typeof window.crypto === 'object') {\n    return window.crypto;\n  }\n  // Next.js global polyfill\n  if (typeof crypto === 'object') {\n    return crypto;\n  }\n  throw new AmplifyError({\n    name: 'MissingPolyfill',\n    message: 'Cannot resolve the `crypto` function from the environment.'\n  });\n};\nconst getBtoa = () => {\n  // browser\n  if (typeof window !== 'undefined' && typeof window.btoa === 'function') {\n    return window.btoa;\n  }\n  // Next.js global polyfill\n  if (typeof btoa === 'function') {\n    return btoa;\n  }\n  throw new AmplifyError({\n    name: 'Base64EncoderError',\n    message: 'Cannot resolve the `btoa` function from the environment.'\n  });\n};\nconst getAtob = () => {\n  // browser\n  if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n    return window.atob;\n  }\n  // Next.js global polyfill\n  if (typeof atob === 'function') {\n    return atob;\n  }\n  throw new AmplifyError({\n    name: 'Base64EncoderError',\n    message: 'Cannot resolve the `atob` function from the environment.'\n  });\n};\nexport { getAtob, getBtoa, getCrypto };","map":{"version":3,"names":["getCrypto","window","crypto","AmplifyError","name","message","getBtoa","btoa","getAtob","atob"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\utils\\globalHelpers\\index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyError } from '../../errors';\nexport const getCrypto = () => {\n    if (typeof window === 'object' && typeof window.crypto === 'object') {\n        return window.crypto;\n    }\n    // Next.js global polyfill\n    if (typeof crypto === 'object') {\n        return crypto;\n    }\n    throw new AmplifyError({\n        name: 'MissingPolyfill',\n        message: 'Cannot resolve the `crypto` function from the environment.',\n    });\n};\nexport const getBtoa = () => {\n    // browser\n    if (typeof window !== 'undefined' && typeof window.btoa === 'function') {\n        return window.btoa;\n    }\n    // Next.js global polyfill\n    if (typeof btoa === 'function') {\n        return btoa;\n    }\n    throw new AmplifyError({\n        name: 'Base64EncoderError',\n        message: 'Cannot resolve the `btoa` function from the environment.',\n    });\n};\nexport const getAtob = () => {\n    // browser\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return window.atob;\n    }\n    // Next.js global polyfill\n    if (typeof atob === 'function') {\n        return atob;\n    }\n    throw new AmplifyError({\n        name: 'Base64EncoderError',\n        message: 'Cannot resolve the `atob` function from the environment.',\n    });\n};\n"],"mappings":";;;;AAAA;AACA;AAEY,MAACA,SAAS,GAAGA,CAAA,KAAM;EAC3B,IAAI,OAAOC,MAAM,KAAK,QAAQ,IAAI,OAAOA,MAAM,CAACC,MAAM,KAAK,QAAQ,EAAE;IACjE,OAAOD,MAAM,CAACC,MAAM;EAC5B;EACA;EACI,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC5B,OAAOA,MAAM;EACrB;EACI,MAAM,IAAIC,YAAY,CAAC;IACnBC,IAAI,EAAE,iBAAiB;IACvBC,OAAO,EAAE;EACjB,CAAK,CAAC;AACN;AACY,MAACC,OAAO,GAAGA,CAAA,KAAM;EAC7B;EACI,IAAI,OAAOL,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACM,IAAI,KAAK,UAAU,EAAE;IACpE,OAAON,MAAM,CAACM,IAAI;EAC1B;EACA;EACI,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;IAC5B,OAAOA,IAAI;EACnB;EACI,MAAM,IAAIJ,YAAY,CAAC;IACnBC,IAAI,EAAE,oBAAoB;IAC1BC,OAAO,EAAE;EACjB,CAAK,CAAC;AACN;AACY,MAACG,OAAO,GAAGA,CAAA,KAAM;EAC7B;EACI,IAAI,OAAOP,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACQ,IAAI,KAAK,UAAU,EAAE;IACpE,OAAOR,MAAM,CAACQ,IAAI;EAC1B;EACA;EACI,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;IAC5B,OAAOA,IAAI;EACnB;EACI,MAAM,IAAIN,YAAY,CAAC;IACnBC,IAAI,EAAE,oBAAoB;IAC1BC,OAAO,EAAE;EACjB,CAAK,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}