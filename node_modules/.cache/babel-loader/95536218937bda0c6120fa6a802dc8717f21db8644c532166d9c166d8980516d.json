{"ast":null,"code":"import { I18n as I18n$1 } from './I18n.mjs';\nimport { ConsoleLogger } from '../Logger/ConsoleLogger.mjs';\nimport { assert, I18nErrorCode } from './errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('I18n');\nlet _config = {\n  language: null\n};\nlet _i18n = null;\n/**\n * Export I18n APIs\n */\nclass I18n {\n  /**\n   * @static\n   * @method\n   * Configure I18n part\n   * @param {Object} config - Configuration of the I18n\n   */\n  static configure(config) {\n    logger.debug('configure I18n');\n    if (!config) {\n      return _config;\n    }\n    _config = Object.assign({}, _config, config.I18n || config);\n    I18n.createInstance();\n    return _config;\n  }\n  static getModuleName() {\n    return 'I18n';\n  }\n  /**\n   * @static\n   * @method\n   * Create an instance of I18n for the library\n   */\n  static createInstance() {\n    logger.debug('create I18n instance');\n    if (_i18n) {\n      return;\n    }\n    _i18n = new I18n$1();\n  }\n  /**\n   * @static @method\n   * Explicitly setting language\n   * @param {String} lang\n   */\n  static setLanguage(lang) {\n    I18n.checkConfig();\n    assert(!!_i18n, I18nErrorCode.NotConfigured);\n    return _i18n.setLanguage(lang);\n  }\n  /**\n   * @static @method\n   * Get value\n   * @param {String} key\n   * @param {String} defVal - Default value\n   */\n  static get(key, defVal) {\n    if (!I18n.checkConfig()) {\n      return typeof defVal === 'undefined' ? key : defVal;\n    }\n    assert(!!_i18n, I18nErrorCode.NotConfigured);\n    return _i18n.get(key, defVal);\n  }\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {String} langurage - Language of the dictionary\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\n   */\n  static putVocabulariesForLanguage(language, vocabularies) {\n    I18n.checkConfig();\n    assert(!!_i18n, I18nErrorCode.NotConfigured);\n    return _i18n.putVocabulariesForLanguage(language, vocabularies);\n  }\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {Object} vocabularies - Object that has language as key,\n   *                                vocabularies of each language as value\n   */\n  static putVocabularies(vocabularies) {\n    I18n.checkConfig();\n    assert(!!_i18n, I18nErrorCode.NotConfigured);\n    return _i18n.putVocabularies(vocabularies);\n  }\n  static checkConfig() {\n    if (!_i18n) {\n      I18n.createInstance();\n    }\n    return true;\n  }\n}\n// Create an instance of I18n in the static class\nI18n.createInstance();\nexport { I18n };","map":{"version":3,"names":["logger","ConsoleLogger","_config","language","_i18n","I18n","configure","config","debug","Object","assign","createInstance","getModuleName","I18n$1","setLanguage","lang","checkConfig","assert","I18nErrorCode","NotConfigured","get","key","defVal","putVocabulariesForLanguage","vocabularies","putVocabularies"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\I18n\\index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { I18n as I18nClass } from './I18n';\nimport { ConsoleLogger } from '../Logger';\nimport { assert, I18nErrorCode } from './errorHelpers';\nconst logger = new ConsoleLogger('I18n');\nlet _config = { language: null };\nlet _i18n = null;\n/**\n * Export I18n APIs\n */\nexport class I18n {\n    /**\n     * @static\n     * @method\n     * Configure I18n part\n     * @param {Object} config - Configuration of the I18n\n     */\n    static configure(config) {\n        logger.debug('configure I18n');\n        if (!config) {\n            return _config;\n        }\n        _config = Object.assign({}, _config, config.I18n || config);\n        I18n.createInstance();\n        return _config;\n    }\n    static getModuleName() {\n        return 'I18n';\n    }\n    /**\n     * @static\n     * @method\n     * Create an instance of I18n for the library\n     */\n    static createInstance() {\n        logger.debug('create I18n instance');\n        if (_i18n) {\n            return;\n        }\n        _i18n = new I18nClass();\n    }\n    /**\n     * @static @method\n     * Explicitly setting language\n     * @param {String} lang\n     */\n    static setLanguage(lang) {\n        I18n.checkConfig();\n        assert(!!_i18n, I18nErrorCode.NotConfigured);\n        return _i18n.setLanguage(lang);\n    }\n    /**\n     * @static @method\n     * Get value\n     * @param {String} key\n     * @param {String} defVal - Default value\n     */\n    static get(key, defVal) {\n        if (!I18n.checkConfig()) {\n            return typeof defVal === 'undefined' ? key : defVal;\n        }\n        assert(!!_i18n, I18nErrorCode.NotConfigured);\n        return _i18n.get(key, defVal);\n    }\n    /**\n     * @static\n     * @method\n     * Add vocabularies for one language\n     * @param {String} langurage - Language of the dictionary\n     * @param {Object} vocabularies - Object that has key-value as dictionary entry\n     */\n    static putVocabulariesForLanguage(language, vocabularies) {\n        I18n.checkConfig();\n        assert(!!_i18n, I18nErrorCode.NotConfigured);\n        return _i18n.putVocabulariesForLanguage(language, vocabularies);\n    }\n    /**\n     * @static\n     * @method\n     * Add vocabularies for one language\n     * @param {Object} vocabularies - Object that has language as key,\n     *                                vocabularies of each language as value\n     */\n    static putVocabularies(vocabularies) {\n        I18n.checkConfig();\n        assert(!!_i18n, I18nErrorCode.NotConfigured);\n        return _i18n.putVocabularies(vocabularies);\n    }\n    static checkConfig() {\n        if (!_i18n) {\n            I18n.createInstance();\n        }\n        return true;\n    }\n}\n// Create an instance of I18n in the static class\nI18n.createInstance();\n"],"mappings":";;;;AAAA;AACA;AAIA,MAAMA,MAAM,GAAG,IAAIC,aAAa,CAAC,MAAM,CAAC;AACxC,IAAIC,OAAO,GAAG;EAAEC,QAAQ,EAAE;AAAI,CAAE;AAChC,IAAIC,KAAK,GAAG,IAAI;AAChB;AACA;AACA;AACO,MAAMC,IAAI,CAAC;EAClB;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,SAASA,CAACC,MAAM,EAAE;IACrBP,MAAM,CAACQ,KAAK,CAAC,gBAAgB,CAAC;IAC9B,IAAI,CAACD,MAAM,EAAE;MACT,OAAOL,OAAO;IAC1B;IACQA,OAAO,GAAGO,MAAM,CAACC,MAAM,CAAC,EAAE,EAAER,OAAO,EAAEK,MAAM,CAACF,IAAI,IAAIE,MAAM,CAAC;IAC3DF,IAAI,CAACM,cAAc,EAAE;IACrB,OAAOT,OAAO;EACtB;EACI,OAAOU,aAAaA,CAAA,EAAG;IACnB,OAAO,MAAM;EACrB;EACA;AACA;AACA;AACA;AACA;EACI,OAAOD,cAAcA,CAAA,EAAG;IACpBX,MAAM,CAACQ,KAAK,CAAC,sBAAsB,CAAC;IACpC,IAAIJ,KAAK,EAAE;MACP;IACZ;IACQA,KAAK,GAAG,IAAIS,MAAS,EAAE;EAC/B;EACA;AACA;AACA;AACA;AACA;EACI,OAAOC,WAAWA,CAACC,IAAI,EAAE;IACrBV,IAAI,CAACW,WAAW,EAAE;IAClBC,MAAM,CAAC,CAAC,CAACb,KAAK,EAAEc,aAAa,CAACC,aAAa,CAAC;IAC5C,OAAOf,KAAK,CAACU,WAAW,CAACC,IAAI,CAAC;EACtC;EACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOK,GAAGA,CAACC,GAAG,EAAEC,MAAM,EAAE;IACpB,IAAI,CAACjB,IAAI,CAACW,WAAW,EAAE,EAAE;MACrB,OAAO,OAAOM,MAAM,KAAK,WAAW,GAAGD,GAAG,GAAGC,MAAM;IAC/D;IACQL,MAAM,CAAC,CAAC,CAACb,KAAK,EAAEc,aAAa,CAACC,aAAa,CAAC;IAC5C,OAAOf,KAAK,CAACgB,GAAG,CAACC,GAAG,EAAEC,MAAM,CAAC;EACrC;EACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,0BAA0BA,CAACpB,QAAQ,EAAEqB,YAAY,EAAE;IACtDnB,IAAI,CAACW,WAAW,EAAE;IAClBC,MAAM,CAAC,CAAC,CAACb,KAAK,EAAEc,aAAa,CAACC,aAAa,CAAC;IAC5C,OAAOf,KAAK,CAACmB,0BAA0B,CAACpB,QAAQ,EAAEqB,YAAY,CAAC;EACvE;EACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,eAAeA,CAACD,YAAY,EAAE;IACjCnB,IAAI,CAACW,WAAW,EAAE;IAClBC,MAAM,CAAC,CAAC,CAACb,KAAK,EAAEc,aAAa,CAACC,aAAa,CAAC;IAC5C,OAAOf,KAAK,CAACqB,eAAe,CAACD,YAAY,CAAC;EAClD;EACI,OAAOR,WAAWA,CAAA,EAAG;IACjB,IAAI,CAACZ,KAAK,EAAE;MACRC,IAAI,CAACM,cAAc,EAAE;IACjC;IACQ,OAAO,IAAI;EACnB;AACA;AACA;AACAN,IAAI,CAACM,cAAc,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}