{"ast":null,"code":"import { isCancelError } from '../../../errors/CanceledError.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport { logger } from '../../../utils/logger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createCancellableTask = ({\n  job,\n  onCancel\n}) => {\n  const state = 'IN_PROGRESS';\n  let canceledErrorMessage = undefined;\n  const cancelableTask = {\n    cancel: message => {\n      const {\n        state\n      } = cancelableTask;\n      if (state === 'CANCELED' || state === 'ERROR' || state === 'SUCCESS') {\n        logger.debug(`This task cannot be canceled. State: ${state}`);\n        return;\n      }\n      cancelableTask.state = 'CANCELED';\n      canceledErrorMessage = message;\n      onCancel(canceledErrorMessage);\n    },\n    state\n  };\n  const wrappedJobPromise = (async () => {\n    try {\n      const result = await job();\n      cancelableTask.state = 'SUCCESS';\n      return result;\n    } catch (e) {\n      if (isCancelError(e)) {\n        cancelableTask.state = 'CANCELED';\n        e.message = canceledErrorMessage ?? e.message;\n      }\n      cancelableTask.state = 'ERROR';\n      throw e;\n    }\n  })();\n  return Object.assign(cancelableTask, {\n    result: wrappedJobPromise\n  });\n};\nconst createDownloadTask = createCancellableTask;\nconst createUploadTask = ({\n  job,\n  onCancel,\n  onResume,\n  onPause,\n  isMultipartUpload\n}) => {\n  const cancellableTask = createCancellableTask({\n    job,\n    onCancel\n  });\n  const uploadTask = Object.assign(cancellableTask, {\n    pause: () => {\n      const {\n        state\n      } = uploadTask;\n      if (!isMultipartUpload || state !== 'IN_PROGRESS') {\n        logger.debug(`This task cannot be paused. State: ${state}`);\n        return;\n      }\n      // @ts-ignore\n      uploadTask.state = 'PAUSED';\n      onPause?.();\n    },\n    resume: () => {\n      const {\n        state\n      } = uploadTask;\n      if (!isMultipartUpload || state !== 'PAUSED') {\n        logger.debug(`This task cannot be resumed. State: ${state}`);\n        return;\n      }\n      // @ts-ignore\n      uploadTask.state = 'IN_PROGRESS';\n      onResume?.();\n    }\n  });\n  return uploadTask;\n};\nexport { createDownloadTask, createUploadTask };","map":{"version":3,"names":["createCancellableTask","job","onCancel","state","canceledErrorMessage","undefined","cancelableTask","cancel","message","logger","debug","wrappedJobPromise","result","e","isCancelError","Object","assign","createDownloadTask","createUploadTask","onResume","onPause","isMultipartUpload","cancellableTask","uploadTask","pause","resume"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\transferTask.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isCancelError } from '../../../errors/CanceledError';\nimport { logger } from '../../../utils';\nconst createCancellableTask = ({ job, onCancel, }) => {\n    const state = 'IN_PROGRESS';\n    let canceledErrorMessage = undefined;\n    const cancelableTask = {\n        cancel: (message) => {\n            const { state } = cancelableTask;\n            if (state === 'CANCELED' || state === 'ERROR' || state === 'SUCCESS') {\n                logger.debug(`This task cannot be canceled. State: ${state}`);\n                return;\n            }\n            cancelableTask.state = 'CANCELED';\n            canceledErrorMessage = message;\n            onCancel(canceledErrorMessage);\n        },\n        state,\n    };\n    const wrappedJobPromise = (async () => {\n        try {\n            const result = await job();\n            cancelableTask.state = 'SUCCESS';\n            return result;\n        }\n        catch (e) {\n            if (isCancelError(e)) {\n                cancelableTask.state = 'CANCELED';\n                e.message = canceledErrorMessage ?? e.message;\n            }\n            cancelableTask.state = 'ERROR';\n            throw e;\n        }\n    })();\n    return Object.assign(cancelableTask, {\n        result: wrappedJobPromise,\n    });\n};\nexport const createDownloadTask = createCancellableTask;\nexport const createUploadTask = ({ job, onCancel, onResume, onPause, isMultipartUpload, }) => {\n    const cancellableTask = createCancellableTask({\n        job,\n        onCancel,\n    });\n    const uploadTask = Object.assign(cancellableTask, {\n        pause: () => {\n            const { state } = uploadTask;\n            if (!isMultipartUpload || state !== 'IN_PROGRESS') {\n                logger.debug(`This task cannot be paused. State: ${state}`);\n                return;\n            }\n            // @ts-ignore\n            uploadTask.state = 'PAUSED';\n            onPause?.();\n        },\n        resume: () => {\n            const { state } = uploadTask;\n            if (!isMultipartUpload || state !== 'PAUSED') {\n                logger.debug(`This task cannot be resumed. State: ${state}`);\n                return;\n            }\n            // @ts-ignore\n            uploadTask.state = 'IN_PROGRESS';\n            onResume?.();\n        },\n    });\n    return uploadTask;\n};\n"],"mappings":";;;;;AAAA;AACA;AAGA,MAAMA,qBAAqB,GAAGA,CAAC;EAAEC,GAAG;EAAEC;AAAQ,CAAG,KAAK;EAClD,MAAMC,KAAK,GAAG,aAAa;EAC3B,IAAIC,oBAAoB,GAAGC,SAAS;EACpC,MAAMC,cAAc,GAAG;IACnBC,MAAM,EAAGC,OAAO,IAAK;MACjB,MAAM;QAAEL;MAAK,CAAE,GAAGG,cAAc;MAChC,IAAIH,KAAK,KAAK,UAAU,IAAIA,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,SAAS,EAAE;QAClEM,MAAM,CAACC,KAAK,CAAE,wCAAuCP,KAAM,EAAC,CAAC;QAC7D;MAChB;MACYG,cAAc,CAACH,KAAK,GAAG,UAAU;MACjCC,oBAAoB,GAAGI,OAAO;MAC9BN,QAAQ,CAACE,oBAAoB,CAAC;IAC1C,CAAS;IACDD;EACR,CAAK;EACD,MAAMQ,iBAAiB,GAAG,CAAC,YAAY;IACnC,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMX,GAAG,EAAE;MAC1BK,cAAc,CAACH,KAAK,GAAG,SAAS;MAChC,OAAOS,MAAM;IACzB,CAAS,CACD,OAAOC,CAAC,EAAE;MACN,IAAIC,aAAa,CAACD,CAAC,CAAC,EAAE;QAClBP,cAAc,CAACH,KAAK,GAAG,UAAU;QACjCU,CAAC,CAACL,OAAO,GAAGJ,oBAAoB,IAAIS,CAAC,CAACL,OAAO;MAC7D;MACYF,cAAc,CAACH,KAAK,GAAG,OAAO;MAC9B,MAAMU,CAAC;IACnB;EACA,CAAK,GAAG;EACJ,OAAOE,MAAM,CAACC,MAAM,CAACV,cAAc,EAAE;IACjCM,MAAM,EAAED;EAChB,CAAK,CAAC;AACN,CAAC;AACW,MAACM,kBAAkB,GAAGjB,qBAAA;AACtB,MAACkB,gBAAgB,GAAGA,CAAC;EAAEjB,GAAG;EAAEC,QAAQ;EAAEiB,QAAQ;EAAEC,OAAO;EAAEC;AAAiB,CAAG,KAAK;EAC1F,MAAMC,eAAe,GAAGtB,qBAAqB,CAAC;IAC1CC,GAAG;IACHC;EACR,CAAK,CAAC;EACF,MAAMqB,UAAU,GAAGR,MAAM,CAACC,MAAM,CAACM,eAAe,EAAE;IAC9CE,KAAK,EAAEA,CAAA,KAAM;MACT,MAAM;QAAErB;MAAK,CAAE,GAAGoB,UAAU;MAC5B,IAAI,CAACF,iBAAiB,IAAIlB,KAAK,KAAK,aAAa,EAAE;QAC/CM,MAAM,CAACC,KAAK,CAAE,sCAAqCP,KAAM,EAAC,CAAC;QAC3D;MAChB;MACA;MACYoB,UAAU,CAACpB,KAAK,GAAG,QAAQ;MAC3BiB,OAAO,IAAI;IACvB,CAAS;IACDK,MAAM,EAAEA,CAAA,KAAM;MACV,MAAM;QAAEtB;MAAK,CAAE,GAAGoB,UAAU;MAC5B,IAAI,CAACF,iBAAiB,IAAIlB,KAAK,KAAK,QAAQ,EAAE;QAC1CM,MAAM,CAACC,KAAK,CAAE,uCAAsCP,KAAM,EAAC,CAAC;QAC5D;MAChB;MACA;MACYoB,UAAU,CAACpB,KAAK,GAAG,aAAa;MAChCgB,QAAQ,IAAI;IACxB;EACA,CAAK,CAAC;EACF,OAAOI,UAAU;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}