{"ast":null,"code":"function filterAllowedFiles(files, acceptedFileTypes) {\n  // Allow any files if acceptedFileTypes is undefined, empty array, or contains '*'\n  if (!acceptedFileTypes || acceptedFileTypes.length === 0 || acceptedFileTypes.includes('*')) {\n    return {\n      acceptedFiles: files,\n      rejectedFiles: []\n    };\n  }\n  const acceptedFiles = [];\n  const rejectedFiles = [];\n  function filterFile(file) {\n    const {\n      type = '',\n      name = ''\n    } = file;\n    const mimeType = type.toLowerCase();\n    const baseMimeType = mimeType.split('/')[0];\n    return acceptedFileTypes.some(type => {\n      const validType = type.trim().toLowerCase();\n      // if the accepted file type is a file extension\n      // it will start with '.', check against the file name\n      if (validType.charAt(0) === '.') {\n        return name.toLowerCase().endsWith(validType);\n      }\n      // This is something like a image/* mime type\n      if (validType.endsWith('/*')) {\n        return baseMimeType === validType.split('/')[0];\n      }\n      return mimeType === validType;\n    });\n  }\n  files.forEach(file => {\n    (filterFile(file) ? acceptedFiles : rejectedFiles).push(file);\n  });\n  return {\n    acceptedFiles,\n    rejectedFiles\n  };\n}\nexport { filterAllowedFiles };","map":{"version":3,"names":["filterAllowedFiles","files","acceptedFileTypes","length","includes","acceptedFiles","rejectedFiles","filterFile","file","type","name","mimeType","toLowerCase","baseMimeType","split","some","validType","trim","charAt","endsWith","forEach","push"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui-react/dist/esm/primitives/DropZone/filterAllowedFiles.mjs"],"sourcesContent":["function filterAllowedFiles(files, acceptedFileTypes) {\n    // Allow any files if acceptedFileTypes is undefined, empty array, or contains '*'\n    if (!acceptedFileTypes ||\n        acceptedFileTypes.length === 0 ||\n        acceptedFileTypes.includes('*')) {\n        return { acceptedFiles: files, rejectedFiles: [] };\n    }\n    const acceptedFiles = [];\n    const rejectedFiles = [];\n    function filterFile(file) {\n        const { type = '', name = '' } = file;\n        const mimeType = type.toLowerCase();\n        const baseMimeType = mimeType.split('/')[0];\n        return acceptedFileTypes.some((type) => {\n            const validType = type.trim().toLowerCase();\n            // if the accepted file type is a file extension\n            // it will start with '.', check against the file name\n            if (validType.charAt(0) === '.') {\n                return name.toLowerCase().endsWith(validType);\n            }\n            // This is something like a image/* mime type\n            if (validType.endsWith('/*')) {\n                return baseMimeType === validType.split('/')[0];\n            }\n            return mimeType === validType;\n        });\n    }\n    files.forEach((file) => {\n        (filterFile(file) ? acceptedFiles : rejectedFiles).push(file);\n    });\n    return { acceptedFiles, rejectedFiles };\n}\n\nexport { filterAllowedFiles };\n"],"mappings":"AAAA,SAASA,kBAAkBA,CAACC,KAAK,EAAEC,iBAAiB,EAAE;EAClD;EACA,IAAI,CAACA,iBAAiB,IAClBA,iBAAiB,CAACC,MAAM,KAAK,CAAC,IAC9BD,iBAAiB,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;IACjC,OAAO;MAAEC,aAAa,EAAEJ,KAAK;MAAEK,aAAa,EAAE;IAAG,CAAC;EACtD;EACA,MAAMD,aAAa,GAAG,EAAE;EACxB,MAAMC,aAAa,GAAG,EAAE;EACxB,SAASC,UAAUA,CAACC,IAAI,EAAE;IACtB,MAAM;MAAEC,IAAI,GAAG,EAAE;MAAEC,IAAI,GAAG;IAAG,CAAC,GAAGF,IAAI;IACrC,MAAMG,QAAQ,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC;IACnC,MAAMC,YAAY,GAAGF,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAOZ,iBAAiB,CAACa,IAAI,CAAEN,IAAI,IAAK;MACpC,MAAMO,SAAS,GAAGP,IAAI,CAACQ,IAAI,CAAC,CAAC,CAACL,WAAW,CAAC,CAAC;MAC3C;MACA;MACA,IAAII,SAAS,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC7B,OAAOR,IAAI,CAACE,WAAW,CAAC,CAAC,CAACO,QAAQ,CAACH,SAAS,CAAC;MACjD;MACA;MACA,IAAIA,SAAS,CAACG,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC1B,OAAON,YAAY,KAAKG,SAAS,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnD;MACA,OAAOH,QAAQ,KAAKK,SAAS;IACjC,CAAC,CAAC;EACN;EACAf,KAAK,CAACmB,OAAO,CAAEZ,IAAI,IAAK;IACpB,CAACD,UAAU,CAACC,IAAI,CAAC,GAAGH,aAAa,GAAGC,aAAa,EAAEe,IAAI,CAACb,IAAI,CAAC;EACjE,CAAC,CAAC;EACF,OAAO;IAAEH,aAAa;IAAEC;EAAc,CAAC;AAC3C;AAEA,SAASN,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}