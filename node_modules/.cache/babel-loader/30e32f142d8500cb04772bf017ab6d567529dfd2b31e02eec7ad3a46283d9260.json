{"ast":null,"code":"import { signInStore, setActiveSignInState, cleanActiveSignInState } from '../utils/signInStore.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { handleChallengeName, getNewDeviceMetatada, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport { Amplify, Hub } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport '../../../errors/constants.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getCurrentUser } from './getCurrentUser.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Continues or completes the sign in process when required by the initial call to `signIn`.\n *\n * @param input -  The ConfirmSignInInput object\n * @returns ConfirmSignInOutput\n * @throws  -{@link VerifySoftwareTokenException }:\n * Thrown due to an invalid MFA token.\n * @throws  -{@link RespondToAuthChallengeException }:\n * Thrown due to an invalid auth challenge response.\n * @throws  -{@link AssociateSoftwareTokenException}:\n * Thrown due to a service error during the MFA setup process.\n * @throws  -{@link AuthValidationErrorCode }:\n * Thrown when `challengeResponse` is not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmSignIn(input) {\n  const {\n    challengeResponse,\n    options\n  } = input;\n  const {\n    username,\n    challengeName,\n    signInSession,\n    signInDetails\n  } = signInStore.getState();\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const clientMetaData = options?.clientMetadata;\n  assertValidationError(!!challengeResponse, AuthValidationErrorCode.EmptyChallengeResponse);\n  if (!username || !challengeName || !signInSession)\n    // TODO: remove this error message for production apps\n    throw new AuthError({\n      name: AuthErrorCodes.SignInException,\n      message: `\n\t\t\tAn error occurred during the sign in process. \n\t\t\t\n\t\t\tThis most likely occurred due to:\n\t\t\t1. signIn was not called before confirmSignIn.\n\t\t\t2. signIn threw an exception.\n\t\t\t3. page was refreshed during the sign in flow.\n\t\t\t`,\n      recoverySuggestion: 'Make sure a successful call to signIn is made before calling confirmSignIn' + 'and that the page is not refreshed until the sign in process is done.'\n    });\n  try {\n    const {\n      Session,\n      ChallengeName,\n      AuthenticationResult,\n      ChallengeParameters\n    } = await handleChallengeName(username, challengeName, signInSession, challengeResponse, authConfig, tokenOrchestrator, clientMetaData, options);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username,\n      challengeName: ChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      cleanActiveSignInState();\n      await cacheCognitoTokens({\n        username,\n        ...AuthenticationResult,\n        NewDeviceMetadata: await getNewDeviceMetatada(authConfig.userPoolId, AuthenticationResult.NewDeviceMetadata, AuthenticationResult.AccessToken),\n        signInDetails\n      });\n      Hub.dispatch('auth', {\n        event: 'signedIn',\n        data: await getCurrentUser()\n      }, 'Auth', AMPLIFY_SYMBOL);\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: ChallengeName,\n      challengeParameters: ChallengeParameters\n    });\n  } catch (error) {\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { confirmSignIn };","map":{"version":3,"names":["confirmSignIn","input","challengeResponse","options","username","challengeName","signInSession","signInDetails","signInStore","getState","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","clientMetaData","clientMetadata","assertValidationError","AuthValidationErrorCode","EmptyChallengeResponse","AuthError","name","AuthErrorCodes","SignInException","message","recoverySuggestion","Session","ChallengeName","AuthenticationResult","ChallengeParameters","handleChallengeName","tokenOrchestrator","setActiveSignInState","cleanActiveSignInState","cacheCognitoTokens","NewDeviceMetadata","getNewDeviceMetatada","userPoolId","AccessToken","Hub","dispatch","event","data","getCurrentUser","AMPLIFY_SYMBOL","isSignedIn","nextStep","signInStep","getSignInResult","challengeParameters","error","assertServiceError","result","getSignInResultFromError"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\confirmSignIn.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { cleanActiveSignInState, setActiveSignInState, signInStore, } from '../utils/signInStore';\nimport { AuthError } from '../../../errors/AuthError';\nimport { getNewDeviceMetatada, getSignInResult, getSignInResultFromError, handleChallengeName, } from '../utils/signInHelpers';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings';\nimport { Amplify, Hub } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { getCurrentUser } from './getCurrentUser';\n/**\n * Continues or completes the sign in process when required by the initial call to `signIn`.\n *\n * @param input -  The ConfirmSignInInput object\n * @returns ConfirmSignInOutput\n * @throws  -{@link VerifySoftwareTokenException }:\n * Thrown due to an invalid MFA token.\n * @throws  -{@link RespondToAuthChallengeException }:\n * Thrown due to an invalid auth challenge response.\n * @throws  -{@link AssociateSoftwareTokenException}:\n * Thrown due to a service error during the MFA setup process.\n * @throws  -{@link AuthValidationErrorCode }:\n * Thrown when `challengeResponse` is not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmSignIn(input) {\n    const { challengeResponse, options } = input;\n    const { username, challengeName, signInSession, signInDetails } = signInStore.getState();\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const clientMetaData = options?.clientMetadata;\n    assertValidationError(!!challengeResponse, AuthValidationErrorCode.EmptyChallengeResponse);\n    if (!username || !challengeName || !signInSession)\n        // TODO: remove this error message for production apps\n        throw new AuthError({\n            name: AuthErrorCodes.SignInException,\n            message: `\n\t\t\tAn error occurred during the sign in process. \n\t\t\t\n\t\t\tThis most likely occurred due to:\n\t\t\t1. signIn was not called before confirmSignIn.\n\t\t\t2. signIn threw an exception.\n\t\t\t3. page was refreshed during the sign in flow.\n\t\t\t`,\n            recoverySuggestion: 'Make sure a successful call to signIn is made before calling confirmSignIn' +\n                'and that the page is not refreshed until the sign in process is done.',\n        });\n    try {\n        const { Session, ChallengeName, AuthenticationResult, ChallengeParameters, } = await handleChallengeName(username, challengeName, signInSession, challengeResponse, authConfig, tokenOrchestrator, clientMetaData, options);\n        // sets up local state used during the sign-in process\n        setActiveSignInState({\n            signInSession: Session,\n            username,\n            challengeName: ChallengeName,\n            signInDetails,\n        });\n        if (AuthenticationResult) {\n            cleanActiveSignInState();\n            await cacheCognitoTokens({\n                username,\n                ...AuthenticationResult,\n                NewDeviceMetadata: await getNewDeviceMetatada(authConfig.userPoolId, AuthenticationResult.NewDeviceMetadata, AuthenticationResult.AccessToken),\n                signInDetails,\n            });\n            Hub.dispatch('auth', {\n                event: 'signedIn',\n                data: await getCurrentUser(),\n            }, 'Auth', AMPLIFY_SYMBOL);\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: ChallengeName,\n            challengeParameters: ChallengeParameters,\n        });\n    }\n    catch (error) {\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,aAAaA,CAACC,KAAK,EAAE;EACvC,MAAM;IAAEC,iBAAiB;IAAEC;EAAO,CAAE,GAAGF,KAAK;EAC5C,MAAM;IAAEG,QAAQ;IAAEC,aAAa;IAAEC,aAAa;IAAEC;EAAa,CAAE,GAAGC,WAAW,CAACC,QAAQ,EAAE;EACxF,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAMM,cAAc,GAAGb,OAAO,EAAEc,cAAc;EAC9CC,qBAAqB,CAAC,CAAC,CAAChB,iBAAiB,EAAEiB,uBAAuB,CAACC,sBAAsB,CAAC;EAC1F,IAAI,CAAChB,QAAQ,IAAI,CAACC,aAAa,IAAI,CAACC,aAAa;IACrD;IACQ,MAAM,IAAIe,SAAS,CAAC;MAChBC,IAAI,EAAEC,cAAc,CAACC,eAAe;MACpCC,OAAO,EAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;MACQC,kBAAkB,EAAE,4EAA4E,GAC5F;IAChB,CAAS,CAAC;EACN,IAAI;IACA,MAAM;MAAEC,OAAO;MAAEC,aAAa;MAAEC,oBAAoB;MAAEC;IAAmB,CAAG,GAAG,MAAMC,mBAAmB,CAAC3B,QAAQ,EAAEC,aAAa,EAAEC,aAAa,EAAEJ,iBAAiB,EAAEQ,UAAU,EAAEsB,iBAAiB,EAAEhB,cAAc,EAAEb,OAAO,CAAC;IACnO;IACQ8B,oBAAoB,CAAC;MACjB3B,aAAa,EAAEqB,OAAO;MACtBvB,QAAQ;MACRC,aAAa,EAAEuB,aAAa;MAC5BrB;IACZ,CAAS,CAAC;IACF,IAAIsB,oBAAoB,EAAE;MACtBK,sBAAsB,EAAE;MACxB,MAAMC,kBAAkB,CAAC;QACrB/B,QAAQ;QACR,GAAGyB,oBAAoB;QACvBO,iBAAiB,EAAE,MAAMC,oBAAoB,CAAC3B,UAAU,CAAC4B,UAAU,EAAET,oBAAoB,CAACO,iBAAiB,EAAEP,oBAAoB,CAACU,WAAW,CAAC;QAC9IhC;MAChB,CAAa,CAAC;MACFiC,GAAG,CAACC,QAAQ,CAAC,MAAM,EAAE;QACjBC,KAAK,EAAE,UAAU;QACjBC,IAAI,EAAE,MAAMC,cAAc;MAC1C,CAAa,EAAE,MAAM,EAAEC,cAAc,CAAC;MAC1B,OAAO;QACHC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAE;UAAEC,UAAU,EAAE;QAAM;MAC9C,CAAa;IACb;IACQ,OAAOC,eAAe,CAAC;MACnB5C,aAAa,EAAEuB,aAAa;MAC5BsB,mBAAmB,EAAEpB;IACjC,CAAS,CAAC;EACV,CAAK,CACD,OAAOqB,KAAK,EAAE;IACVC,kBAAkB,CAACD,KAAK,CAAC;IACzB,MAAME,MAAM,GAAGC,wBAAwB,CAACH,KAAK,CAAC7B,IAAI,CAAC;IACnD,IAAI+B,MAAM,EACN,OAAOA,MAAM;IACjB,MAAMF,KAAK;EACnB;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}