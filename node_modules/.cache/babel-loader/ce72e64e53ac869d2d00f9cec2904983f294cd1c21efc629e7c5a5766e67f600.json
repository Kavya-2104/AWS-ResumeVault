{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base.mjs';\nimport { parseXmlError, parseXmlBody } from './utils/parsePayload.mjs';\nimport { s3TransferHandler } from './runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport './runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map, emptyArrayGuard, deserializeBoolean, deserializeNumber, deserializeTimestamp } from './utils/deserializeHelpers.mjs';\nimport { assignStringVariables } from './utils/serializeHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst listObjectsV2Serializer = (input, endpoint) => {\n  const headers = assignStringVariables({\n    'x-amz-request-payer': input.RequestPayer,\n    'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n  });\n  const query = assignStringVariables({\n    'list-type': '2',\n    'continuation-token': input.ContinuationToken,\n    delimiter: input.Delimiter,\n    'encoding-type': input.EncodingType,\n    'fetch-owner': input.FetchOwner,\n    'max-keys': input.MaxKeys,\n    prefix: input.Prefix,\n    'start-after': input.StartAfter\n  });\n  const url = new AmplifyUrl(endpoint.url.toString());\n  url.search = new AmplifyUrlSearchParams(query).toString();\n  return {\n    method: 'GET',\n    headers,\n    url\n  };\n};\nconst listObjectsV2Deserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    const error = await parseXmlError(response);\n    throw buildStorageServiceError(error, response.statusCode);\n  } else {\n    const parsed = await parseXmlBody(response);\n    const contents = map(parsed, {\n      CommonPrefixes: ['CommonPrefixes', value => emptyArrayGuard(value, deserializeCommonPrefixList)],\n      Contents: ['Contents', value => emptyArrayGuard(value, deserializeObjectList)],\n      ContinuationToken: 'ContinuationToken',\n      Delimiter: 'Delimiter',\n      EncodingType: 'EncodingType',\n      IsTruncated: ['IsTruncated', deserializeBoolean],\n      KeyCount: ['KeyCount', deserializeNumber],\n      MaxKeys: ['MaxKeys', deserializeNumber],\n      Name: 'Name',\n      NextContinuationToken: 'NextContinuationToken',\n      Prefix: 'Prefix',\n      StartAfter: 'StartAfter'\n    });\n    return {\n      $metadata: parseMetadata(response),\n      ...contents\n    };\n  }\n};\nconst deserializeCommonPrefixList = output => output.map(deserializeCommonPrefix);\nconst deserializeCommonPrefix = output => map(output, {\n  Prefix: 'Prefix'\n});\nconst deserializeObjectList = output => output.map(deserializeObject);\nconst deserializeObject = output => map(output, {\n  Key: 'Key',\n  LastModified: ['LastModified', deserializeTimestamp],\n  ETag: 'ETag',\n  ChecksumAlgorithm: ['ChecksumAlgorithm', value => emptyArrayGuard(value, deserializeChecksumAlgorithmList)],\n  Size: ['Size', deserializeNumber],\n  StorageClass: 'StorageClass',\n  Owner: ['Owner', deserializeOwner]\n});\nconst deserializeChecksumAlgorithmList = output => output.map(entry => String(entry));\nconst deserializeOwner = output => map(output, {\n  DisplayName: 'DisplayName',\n  ID: 'ID'\n});\nconst listObjectsV2 = composeServiceApi(s3TransferHandler, listObjectsV2Serializer, listObjectsV2Deserializer, {\n  ...defaultConfig,\n  responseType: 'text'\n});\nexport { listObjectsV2 };","map":{"version":3,"names":["listObjectsV2Serializer","input","endpoint","headers","assignStringVariables","RequestPayer","ExpectedBucketOwner","query","ContinuationToken","delimiter","Delimiter","EncodingType","FetchOwner","MaxKeys","prefix","Prefix","StartAfter","url","AmplifyUrl","toString","search","AmplifyUrlSearchParams","method","listObjectsV2Deserializer","response","statusCode","error","parseXmlError","buildStorageServiceError","parsed","parseXmlBody","contents","map","CommonPrefixes","value","emptyArrayGuard","deserializeCommonPrefixList","Contents","deserializeObjectList","IsTruncated","deserializeBoolean","KeyCount","deserializeNumber","Name","NextContinuationToken","$metadata","parseMetadata","output","deserializeCommonPrefix","deserializeObject","Key","LastModified","deserializeTimestamp","ETag","ChecksumAlgorithm","deserializeChecksumAlgorithmList","Size","StorageClass","Owner","deserializeOwner","entry","String","DisplayName","ID","listObjectsV2","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\listObjectsV2.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base';\nimport { assignStringVariables, buildStorageServiceError, deserializeBoolean, deserializeNumber, deserializeTimestamp, emptyArrayGuard, map, parseXmlBody, parseXmlError, s3TransferHandler, } from './utils';\nconst listObjectsV2Serializer = (input, endpoint) => {\n    const headers = assignStringVariables({\n        'x-amz-request-payer': input.RequestPayer,\n        'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n    });\n    const query = assignStringVariables({\n        'list-type': '2',\n        'continuation-token': input.ContinuationToken,\n        delimiter: input.Delimiter,\n        'encoding-type': input.EncodingType,\n        'fetch-owner': input.FetchOwner,\n        'max-keys': input.MaxKeys,\n        prefix: input.Prefix,\n        'start-after': input.StartAfter,\n    });\n    const url = new AmplifyUrl(endpoint.url.toString());\n    url.search = new AmplifyUrlSearchParams(query).toString();\n    return {\n        method: 'GET',\n        headers,\n        url,\n    };\n};\nconst listObjectsV2Deserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        const error = (await parseXmlError(response));\n        throw buildStorageServiceError(error, response.statusCode);\n    }\n    else {\n        const parsed = await parseXmlBody(response);\n        const contents = map(parsed, {\n            CommonPrefixes: [\n                'CommonPrefixes',\n                value => emptyArrayGuard(value, deserializeCommonPrefixList),\n            ],\n            Contents: [\n                'Contents',\n                value => emptyArrayGuard(value, deserializeObjectList),\n            ],\n            ContinuationToken: 'ContinuationToken',\n            Delimiter: 'Delimiter',\n            EncodingType: 'EncodingType',\n            IsTruncated: ['IsTruncated', deserializeBoolean],\n            KeyCount: ['KeyCount', deserializeNumber],\n            MaxKeys: ['MaxKeys', deserializeNumber],\n            Name: 'Name',\n            NextContinuationToken: 'NextContinuationToken',\n            Prefix: 'Prefix',\n            StartAfter: 'StartAfter',\n        });\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\nconst deserializeCommonPrefixList = (output) => output.map(deserializeCommonPrefix);\nconst deserializeCommonPrefix = (output) => map(output, {\n    Prefix: 'Prefix',\n});\nconst deserializeObjectList = (output) => output.map(deserializeObject);\nconst deserializeObject = (output) => map(output, {\n    Key: 'Key',\n    LastModified: ['LastModified', deserializeTimestamp],\n    ETag: 'ETag',\n    ChecksumAlgorithm: [\n        'ChecksumAlgorithm',\n        value => emptyArrayGuard(value, deserializeChecksumAlgorithmList),\n    ],\n    Size: ['Size', deserializeNumber],\n    StorageClass: 'StorageClass',\n    Owner: ['Owner', deserializeOwner],\n});\nconst deserializeChecksumAlgorithmList = (output) => output.map(entry => String(entry));\nconst deserializeOwner = (output) => map(output, { DisplayName: 'DisplayName', ID: 'ID' });\nexport const listObjectsV2 = composeServiceApi(s3TransferHandler, listObjectsV2Serializer, listObjectsV2Deserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAMA,MAAMA,uBAAuB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACjD,MAAMC,OAAO,GAAGC,qBAAqB,CAAC;IAClC,qBAAqB,EAAEH,KAAK,CAACI,YAAY;IACzC,6BAA6B,EAAEJ,KAAK,CAACK;EAC7C,CAAK,CAAC;EACF,MAAMC,KAAK,GAAGH,qBAAqB,CAAC;IAChC,WAAW,EAAE,GAAG;IAChB,oBAAoB,EAAEH,KAAK,CAACO,iBAAiB;IAC7CC,SAAS,EAAER,KAAK,CAACS,SAAS;IAC1B,eAAe,EAAET,KAAK,CAACU,YAAY;IACnC,aAAa,EAAEV,KAAK,CAACW,UAAU;IAC/B,UAAU,EAAEX,KAAK,CAACY,OAAO;IACzBC,MAAM,EAAEb,KAAK,CAACc,MAAM;IACpB,aAAa,EAAEd,KAAK,CAACe;EAC7B,CAAK,CAAC;EACF,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAAChB,QAAQ,CAACe,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDF,GAAG,CAACG,MAAM,GAAG,IAAIC,sBAAsB,CAACd,KAAK,CAAC,CAACY,QAAQ,EAAE;EACzD,OAAO;IACHG,MAAM,EAAE,KAAK;IACbnB,OAAO;IACPc;EACR,CAAK;AACL,CAAC;AACD,MAAMM,yBAAyB,GAAG,MAAOC,QAAQ,IAAK;EAClD,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAMC,KAAK,GAAI,MAAMC,aAAa,CAACH,QAAQ,CAAE;IAC7C,MAAMI,wBAAwB,CAACF,KAAK,EAAEF,QAAQ,CAACC,UAAU,CAAC;EAClE,CAAK,MACI;IACD,MAAMI,MAAM,GAAG,MAAMC,YAAY,CAACN,QAAQ,CAAC;IAC3C,MAAMO,QAAQ,GAAGC,GAAG,CAACH,MAAM,EAAE;MACzBI,cAAc,EAAE,CACZ,gBAAgB,EAChBC,KAAK,IAAIC,eAAe,CAACD,KAAK,EAAEE,2BAA2B,CAAC,CAC/D;MACDC,QAAQ,EAAE,CACN,UAAU,EACVH,KAAK,IAAIC,eAAe,CAACD,KAAK,EAAEI,qBAAqB,CAAC,CACzD;MACD9B,iBAAiB,EAAE,mBAAmB;MACtCE,SAAS,EAAE,WAAW;MACtBC,YAAY,EAAE,cAAc;MAC5B4B,WAAW,EAAE,CAAC,aAAa,EAAEC,kBAAkB,CAAC;MAChDC,QAAQ,EAAE,CAAC,UAAU,EAAEC,iBAAiB,CAAC;MACzC7B,OAAO,EAAE,CAAC,SAAS,EAAE6B,iBAAiB,CAAC;MACvCC,IAAI,EAAE,MAAM;MACZC,qBAAqB,EAAE,uBAAuB;MAC9C7B,MAAM,EAAE,QAAQ;MAChBC,UAAU,EAAE;IACxB,CAAS,CAAC;IACF,OAAO;MACH6B,SAAS,EAAEC,aAAa,CAACtB,QAAQ,CAAC;MAClC,GAAGO;IACf,CAAS;EACT;AACA,CAAC;AACD,MAAMK,2BAA2B,GAAIW,MAAM,IAAKA,MAAM,CAACf,GAAG,CAACgB,uBAAuB,CAAC;AACnF,MAAMA,uBAAuB,GAAID,MAAM,IAAKf,GAAG,CAACe,MAAM,EAAE;EACpDhC,MAAM,EAAE;AACZ,CAAC,CAAC;AACF,MAAMuB,qBAAqB,GAAIS,MAAM,IAAKA,MAAM,CAACf,GAAG,CAACiB,iBAAiB,CAAC;AACvE,MAAMA,iBAAiB,GAAIF,MAAM,IAAKf,GAAG,CAACe,MAAM,EAAE;EAC9CG,GAAG,EAAE,KAAK;EACVC,YAAY,EAAE,CAAC,cAAc,EAAEC,oBAAoB,CAAC;EACpDC,IAAI,EAAE,MAAM;EACZC,iBAAiB,EAAE,CACf,mBAAmB,EACnBpB,KAAK,IAAIC,eAAe,CAACD,KAAK,EAAEqB,gCAAgC,CAAC,CACpE;EACDC,IAAI,EAAE,CAAC,MAAM,EAAEd,iBAAiB,CAAC;EACjCe,YAAY,EAAE,cAAc;EAC5BC,KAAK,EAAE,CAAC,OAAO,EAAEC,gBAAgB;AACrC,CAAC,CAAC;AACF,MAAMJ,gCAAgC,GAAIR,MAAM,IAAKA,MAAM,CAACf,GAAG,CAAC4B,KAAK,IAAIC,MAAM,CAACD,KAAK,CAAC,CAAC;AACvF,MAAMD,gBAAgB,GAAIZ,MAAM,IAAKf,GAAG,CAACe,MAAM,EAAE;EAAEe,WAAW,EAAE,aAAa;EAAEC,EAAE,EAAE;AAAI,CAAE,CAAC;AAC9E,MAACC,aAAa,GAAGC,iBAAiB,CAACC,iBAAiB,EAAElE,uBAAuB,EAAEuB,yBAAyB,EAAE;EAAE,GAAG4C,aAAa;EAAEC,YAAY,EAAE;AAAM,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}