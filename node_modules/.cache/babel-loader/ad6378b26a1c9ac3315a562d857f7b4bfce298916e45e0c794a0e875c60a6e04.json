{"ast":null,"code":"import { ConsoleLogger, getId } from '@aws-amplify/core';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { getRegionFromIdentityPoolId } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { formLoginsMap } from './utils.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('CognitoIdentityIdProvider');\n/**\n * Provides a Cognito identityId\n *\n * @param tokens - The AuthTokens received after SignIn\n * @returns string\n * @throws configuration exceptions: {@link InvalidIdentityPoolIdException }\n *  - Auth errors that may arise from misconfiguration.\n * @throws service exceptions: {@link GetIdException }\n */\nasync function cognitoIdentityIdProvider({\n  tokens,\n  authConfig,\n  identityIdStore\n}) {\n  identityIdStore.setAuthConfig({\n    Cognito: authConfig\n  });\n  // will return null only if there is no identityId cached or if there is an error retrieving it\n  let identityId = await identityIdStore.loadIdentityId();\n  // Tokens are available so return primary identityId\n  if (tokens) {\n    // If there is existing primary identityId in-memory return that\n    if (identityId && identityId.type === 'primary') {\n      return identityId.id;\n    } else {\n      const logins = tokens.idToken ? formLoginsMap(tokens.idToken.toString()) : {};\n      const generatedIdentityId = await generateIdentityId(logins, authConfig);\n      if (identityId && identityId.id === generatedIdentityId) {\n        logger.debug(`The guest identity ${identityId.id} has become the primary identity.`);\n      }\n      identityId = {\n        id: generatedIdentityId,\n        type: 'primary'\n      };\n    }\n  } else {\n    // If there is existing guest identityId cached return that\n    if (identityId && identityId.type === 'guest') {\n      return identityId.id;\n    } else {\n      identityId = {\n        id: await generateIdentityId({}, authConfig),\n        type: 'guest'\n      };\n    }\n  }\n  // Store in-memory or local storage depending on guest or primary identityId\n  identityIdStore.storeIdentityId(identityId);\n  return identityId.id;\n}\nasync function generateIdentityId(logins, authConfig) {\n  const identityPoolId = authConfig?.identityPoolId;\n  const region = getRegionFromIdentityPoolId(identityPoolId);\n  // IdentityId is absent so get it using IdentityPoolId with Cognito's GetId API\n  const idResult =\n  // for a first-time user, this will return a brand new identity\n  // for a returning user, this will retrieve the previous identity assocaited with the logins\n  (await getId({\n    region\n  }, {\n    IdentityPoolId: identityPoolId,\n    Logins: logins\n  })).IdentityId;\n  if (!idResult) {\n    throw new AuthError({\n      name: 'GetIdResponseException',\n      message: 'Received undefined response from getId operation',\n      recoverySuggestion: 'Make sure to pass a valid identityPoolId in the configuration.'\n    });\n  }\n  return idResult;\n}\nexport { cognitoIdentityIdProvider };","map":{"version":3,"names":["logger","ConsoleLogger","cognitoIdentityIdProvider","tokens","authConfig","identityIdStore","setAuthConfig","Cognito","identityId","loadIdentityId","type","id","logins","idToken","formLoginsMap","toString","generatedIdentityId","generateIdentityId","debug","storeIdentityId","identityPoolId","region","getRegionFromIdentityPoolId","idResult","getId","IdentityPoolId","Logins","IdentityId","AuthError","name","message","recoverySuggestion"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\credentialsProvider\\IdentityIdProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger, getId } from '@aws-amplify/core';\nimport { AuthError } from '../../../errors/AuthError';\nimport { getRegionFromIdentityPoolId } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { formLoginsMap } from './utils';\nconst logger = new ConsoleLogger('CognitoIdentityIdProvider');\n/**\n * Provides a Cognito identityId\n *\n * @param tokens - The AuthTokens received after SignIn\n * @returns string\n * @throws configuration exceptions: {@link InvalidIdentityPoolIdException }\n *  - Auth errors that may arise from misconfiguration.\n * @throws service exceptions: {@link GetIdException }\n */\nexport async function cognitoIdentityIdProvider({ tokens, authConfig, identityIdStore, }) {\n    identityIdStore.setAuthConfig({ Cognito: authConfig });\n    // will return null only if there is no identityId cached or if there is an error retrieving it\n    let identityId = await identityIdStore.loadIdentityId();\n    // Tokens are available so return primary identityId\n    if (tokens) {\n        // If there is existing primary identityId in-memory return that\n        if (identityId && identityId.type === 'primary') {\n            return identityId.id;\n        }\n        else {\n            const logins = tokens.idToken\n                ? formLoginsMap(tokens.idToken.toString())\n                : {};\n            const generatedIdentityId = await generateIdentityId(logins, authConfig);\n            if (identityId && identityId.id === generatedIdentityId) {\n                logger.debug(`The guest identity ${identityId.id} has become the primary identity.`);\n            }\n            identityId = {\n                id: generatedIdentityId,\n                type: 'primary',\n            };\n        }\n    }\n    else {\n        // If there is existing guest identityId cached return that\n        if (identityId && identityId.type === 'guest') {\n            return identityId.id;\n        }\n        else {\n            identityId = {\n                id: await generateIdentityId({}, authConfig),\n                type: 'guest',\n            };\n        }\n    }\n    // Store in-memory or local storage depending on guest or primary identityId\n    identityIdStore.storeIdentityId(identityId);\n    return identityId.id;\n}\nasync function generateIdentityId(logins, authConfig) {\n    const identityPoolId = authConfig?.identityPoolId;\n    const region = getRegionFromIdentityPoolId(identityPoolId);\n    // IdentityId is absent so get it using IdentityPoolId with Cognito's GetId API\n    const idResult = \n    // for a first-time user, this will return a brand new identity\n    // for a returning user, this will retrieve the previous identity assocaited with the logins\n    (await getId({\n        region,\n    }, {\n        IdentityPoolId: identityPoolId,\n        Logins: logins,\n    })).IdentityId;\n    if (!idResult) {\n        throw new AuthError({\n            name: 'GetIdResponseException',\n            message: 'Received undefined response from getId operation',\n            recoverySuggestion: 'Make sure to pass a valid identityPoolId in the configuration.',\n        });\n    }\n    return idResult;\n}\n"],"mappings":";;;;;AAAA;AACA;AAKA,MAAMA,MAAM,GAAG,IAAIC,aAAa,CAAC,2BAA2B,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeC,yBAAyBA,CAAC;EAAEC,MAAM;EAAEC,UAAU;EAAEC;AAAe,CAAG,EAAE;EACtFA,eAAe,CAACC,aAAa,CAAC;IAAEC,OAAO,EAAEH;EAAU,CAAE,CAAC;EAC1D;EACI,IAAII,UAAU,GAAG,MAAMH,eAAe,CAACI,cAAc,EAAE;EAC3D;EACI,IAAIN,MAAM,EAAE;IAChB;IACQ,IAAIK,UAAU,IAAIA,UAAU,CAACE,IAAI,KAAK,SAAS,EAAE;MAC7C,OAAOF,UAAU,CAACG,EAAE;IAChC,CAAS,MACI;MACD,MAAMC,MAAM,GAAGT,MAAM,CAACU,OAAO,GACvBC,aAAa,CAACX,MAAM,CAACU,OAAO,CAACE,QAAQ,EAAE,CAAC,GACxC,EAAE;MACR,MAAMC,mBAAmB,GAAG,MAAMC,kBAAkB,CAACL,MAAM,EAAER,UAAU,CAAC;MACxE,IAAII,UAAU,IAAIA,UAAU,CAACG,EAAE,KAAKK,mBAAmB,EAAE;QACrDhB,MAAM,CAACkB,KAAK,CAAE,sBAAqBV,UAAU,CAACG,EAAG,mCAAkC,CAAC;MACpG;MACYH,UAAU,GAAG;QACTG,EAAE,EAAEK,mBAAmB;QACvBN,IAAI,EAAE;MACtB,CAAa;IACb;EACA,CAAK,MACI;IACT;IACQ,IAAIF,UAAU,IAAIA,UAAU,CAACE,IAAI,KAAK,OAAO,EAAE;MAC3C,OAAOF,UAAU,CAACG,EAAE;IAChC,CAAS,MACI;MACDH,UAAU,GAAG;QACTG,EAAE,EAAE,MAAMM,kBAAkB,CAAC,EAAE,EAAEb,UAAU,CAAC;QAC5CM,IAAI,EAAE;MACtB,CAAa;IACb;EACA;EACA;EACIL,eAAe,CAACc,eAAe,CAACX,UAAU,CAAC;EAC3C,OAAOA,UAAU,CAACG,EAAE;AACxB;AACA,eAAeM,kBAAkBA,CAACL,MAAM,EAAER,UAAU,EAAE;EAClD,MAAMgB,cAAc,GAAGhB,UAAU,EAAEgB,cAAc;EACjD,MAAMC,MAAM,GAAGC,2BAA2B,CAACF,cAAc,CAAC;EAC9D;EACI,MAAMG,QAAQ;EAClB;EACA;EACI,CAAC,MAAMC,KAAK,CAAC;IACTH;EACR,CAAK,EAAE;IACCI,cAAc,EAAEL,cAAc;IAC9BM,MAAM,EAAEd;EAChB,CAAK,CAAC,EAAEe,UAAU;EACd,IAAI,CAACJ,QAAQ,EAAE;IACX,MAAM,IAAIK,SAAS,CAAC;MAChBC,IAAI,EAAE,wBAAwB;MAC9BC,OAAO,EAAE,kDAAkD;MAC3DC,kBAAkB,EAAE;IAChC,CAAS,CAAC;EACV;EACI,OAAOR,QAAQ;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}