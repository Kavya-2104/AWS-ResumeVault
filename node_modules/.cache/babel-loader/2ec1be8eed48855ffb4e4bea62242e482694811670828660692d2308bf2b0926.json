{"ast":null,"code":"import { useCallback } from 'react';\nimport { getFormDataFromEvent } from '../../../../helpers/utils.mjs';\nimport { useAuthenticator } from '@aws-amplify/ui-react-core';\nfunction useFormHandlers() {\n  const {\n    submitForm,\n    updateBlur,\n    updateForm\n  } = useAuthenticator(context => [context.submitForm, context.updateBlur, context.updateForm]);\n  const handleBlur = useCallback(({\n    target: {\n      name\n    }\n  }) => {\n    updateBlur({\n      name\n    });\n  }, [updateBlur]);\n  // @TODO: align multiple input type handling with react docs example for 3.0 release\n  // example: https://reactjs.org/docs/forms.html#handling-multiple-inputs\n  const handleChange = useCallback(({\n    target: {\n      checked,\n      name,\n      type,\n      value\n    }\n  }) => {\n    const isUncheckedCheckbox = type === 'checkbox' && !checked;\n    updateForm({\n      name,\n      value: isUncheckedCheckbox ? undefined : value\n    });\n  }, [updateForm]);\n  const handleSubmit = useCallback(event => {\n    event.preventDefault();\n    submitForm(getFormDataFromEvent(event));\n  }, [submitForm]);\n  return {\n    handleBlur,\n    handleChange,\n    handleSubmit\n  };\n}\nexport { useFormHandlers };","map":{"version":3,"names":["useCallback","getFormDataFromEvent","useAuthenticator","useFormHandlers","submitForm","updateBlur","updateForm","context","handleBlur","target","name","handleChange","checked","type","value","isUncheckedCheckbox","undefined","handleSubmit","event","preventDefault"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/hooks/useFormHandlers/useFormHandlers.mjs"],"sourcesContent":["import { useCallback } from 'react';\nimport { getFormDataFromEvent } from '../../../../helpers/utils.mjs';\nimport { useAuthenticator } from '@aws-amplify/ui-react-core';\n\nfunction useFormHandlers() {\n    const { submitForm, updateBlur, updateForm } = useAuthenticator((context) => [\n        context.submitForm,\n        context.updateBlur,\n        context.updateForm,\n    ]);\n    const handleBlur = useCallback(({ target: { name } }) => {\n        updateBlur({ name });\n    }, [updateBlur]);\n    // @TODO: align multiple input type handling with react docs example for 3.0 release\n    // example: https://reactjs.org/docs/forms.html#handling-multiple-inputs\n    const handleChange = useCallback(({ target: { checked, name, type, value }, }) => {\n        const isUncheckedCheckbox = type === 'checkbox' && !checked;\n        updateForm({\n            name,\n            value: isUncheckedCheckbox ? undefined : value,\n        });\n    }, [updateForm]);\n    const handleSubmit = useCallback((event) => {\n        event.preventDefault();\n        submitForm(getFormDataFromEvent(event));\n    }, [submitForm]);\n    return { handleBlur, handleChange, handleSubmit };\n}\n\nexport { useFormHandlers };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,oBAAoB,QAAQ,+BAA+B;AACpE,SAASC,gBAAgB,QAAQ,4BAA4B;AAE7D,SAASC,eAAeA,CAAA,EAAG;EACvB,MAAM;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAW,CAAC,GAAGJ,gBAAgB,CAAEK,OAAO,IAAK,CACzEA,OAAO,CAACH,UAAU,EAClBG,OAAO,CAACF,UAAU,EAClBE,OAAO,CAACD,UAAU,CACrB,CAAC;EACF,MAAME,UAAU,GAAGR,WAAW,CAAC,CAAC;IAAES,MAAM,EAAE;MAAEC;IAAK;EAAE,CAAC,KAAK;IACrDL,UAAU,CAAC;MAAEK;IAAK,CAAC,CAAC;EACxB,CAAC,EAAE,CAACL,UAAU,CAAC,CAAC;EAChB;EACA;EACA,MAAMM,YAAY,GAAGX,WAAW,CAAC,CAAC;IAAES,MAAM,EAAE;MAAEG,OAAO;MAAEF,IAAI;MAAEG,IAAI;MAAEC;IAAM;EAAG,CAAC,KAAK;IAC9E,MAAMC,mBAAmB,GAAGF,IAAI,KAAK,UAAU,IAAI,CAACD,OAAO;IAC3DN,UAAU,CAAC;MACPI,IAAI;MACJI,KAAK,EAAEC,mBAAmB,GAAGC,SAAS,GAAGF;IAC7C,CAAC,CAAC;EACN,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;EAChB,MAAMW,YAAY,GAAGjB,WAAW,CAAEkB,KAAK,IAAK;IACxCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBf,UAAU,CAACH,oBAAoB,CAACiB,KAAK,CAAC,CAAC;EAC3C,CAAC,EAAE,CAACd,UAAU,CAAC,CAAC;EAChB,OAAO;IAAEI,UAAU;IAAEG,YAAY;IAAEM;EAAa,CAAC;AACrD;AAEA,SAASd,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}