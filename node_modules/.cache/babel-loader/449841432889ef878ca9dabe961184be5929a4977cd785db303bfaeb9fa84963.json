{"ast":null,"code":"import { Amplify, CookieStorage, defaultStorage } from '@aws-amplify/core';\nimport { parseAWSExports } from '@aws-amplify/core/internals/utils';\nimport { cognitoUserPoolsTokenProvider, cognitoCredentialsProvider } from '@aws-amplify/auth/cognito';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst DefaultAmplify = {\n  /**\n   * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.\n   *\n   * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the\n   * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.\n   * @param libraryOptions The {@link LibraryOptions} additional options for the library.\n   *\n   * @example\n   * import config from './amplifyconfiguration.json';\n   *\n   * Amplify.configure(config);\n   */\n  configure(resourceConfig, libraryOptions) {\n    let resolvedResourceConfig;\n    if (Object.keys(resourceConfig).some(key => key.startsWith('aws_'))) {\n      resolvedResourceConfig = parseAWSExports(resourceConfig);\n    } else {\n      resolvedResourceConfig = resourceConfig;\n    }\n    // If no Auth config is provided, no special handling will be required, configure as is.\n    // Otherwise, we can assume an Auth config is provided from here on.\n    if (!resolvedResourceConfig.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If Auth options are provided, always just configure as is.\n    // Otherwise, we can assume no Auth libraryOptions were provided from here on.\n    if (libraryOptions?.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If no Auth libraryOptions were previously configured, then always add default providers.\n    if (!Amplify.libraryOptions.Auth) {\n      cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);\n      cognitoUserPoolsTokenProvider.setKeyValueStorage(\n      // TODO: allow configure with a public interface\n      libraryOptions?.ssr ? new CookieStorage({\n        sameSite: 'lax'\n      }) : defaultStorage);\n      Amplify.configure(resolvedResourceConfig, {\n        ...libraryOptions,\n        Auth: {\n          tokenProvider: cognitoUserPoolsTokenProvider,\n          credentialsProvider: cognitoCredentialsProvider\n        }\n      });\n      return;\n    }\n    // At this point, Auth libraryOptions would have been previously configured and no overriding\n    // Auth options were given, so we should preserve the currently configured Auth libraryOptions.\n    if (libraryOptions) {\n      // If ssr is provided through libraryOptions, we should respect the intentional reconfiguration.\n      if (libraryOptions.ssr !== undefined) {\n        cognitoUserPoolsTokenProvider.setKeyValueStorage(\n        // TODO: allow configure with a public interface\n        libraryOptions.ssr ? new CookieStorage({\n          sameSite: 'lax'\n        }) : defaultStorage);\n      }\n      Amplify.configure(resolvedResourceConfig, {\n        Auth: Amplify.libraryOptions.Auth,\n        ...libraryOptions\n      });\n      return;\n    }\n    // Finally, if there were no libraryOptions given at all, we should simply not touch the currently\n    // configured libraryOptions.\n    Amplify.configure(resolvedResourceConfig);\n  },\n  /**\n   * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling\n   * `Amplify.configure`.\n   *\n   * @returns An {@link ResourcesConfig} object.\n   */\n  getConfig() {\n    return Amplify.getConfig();\n  }\n};\nexport { DefaultAmplify };","map":{"version":3,"names":["DefaultAmplify","configure","resourceConfig","libraryOptions","resolvedResourceConfig","Object","keys","some","key","startsWith","parseAWSExports","Auth","Amplify","cognitoUserPoolsTokenProvider","setAuthConfig","setKeyValueStorage","ssr","CookieStorage","sameSite","defaultStorage","tokenProvider","credentialsProvider","cognitoCredentialsProvider","undefined","getConfig"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\aws-amplify\\src\\initSingleton.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, CookieStorage, defaultStorage, } from '@aws-amplify/core';\nimport { parseAWSExports, } from '@aws-amplify/core/internals/utils';\nimport { cognitoCredentialsProvider, cognitoUserPoolsTokenProvider, } from './auth/cognito';\nexport const DefaultAmplify = {\n    /**\n     * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.\n     *\n     * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the\n     * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.\n     * @param libraryOptions The {@link LibraryOptions} additional options for the library.\n     *\n     * @example\n     * import config from './amplifyconfiguration.json';\n     *\n     * Amplify.configure(config);\n     */\n    configure(resourceConfig, libraryOptions) {\n        let resolvedResourceConfig;\n        if (Object.keys(resourceConfig).some(key => key.startsWith('aws_'))) {\n            resolvedResourceConfig = parseAWSExports(resourceConfig);\n        }\n        else {\n            resolvedResourceConfig = resourceConfig;\n        }\n        // If no Auth config is provided, no special handling will be required, configure as is.\n        // Otherwise, we can assume an Auth config is provided from here on.\n        if (!resolvedResourceConfig.Auth) {\n            Amplify.configure(resolvedResourceConfig, libraryOptions);\n            return;\n        }\n        // If Auth options are provided, always just configure as is.\n        // Otherwise, we can assume no Auth libraryOptions were provided from here on.\n        if (libraryOptions?.Auth) {\n            Amplify.configure(resolvedResourceConfig, libraryOptions);\n            return;\n        }\n        // If no Auth libraryOptions were previously configured, then always add default providers.\n        if (!Amplify.libraryOptions.Auth) {\n            cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);\n            cognitoUserPoolsTokenProvider.setKeyValueStorage(\n            // TODO: allow configure with a public interface\n            libraryOptions?.ssr\n                ? new CookieStorage({ sameSite: 'lax' })\n                : defaultStorage);\n            Amplify.configure(resolvedResourceConfig, {\n                ...libraryOptions,\n                Auth: {\n                    tokenProvider: cognitoUserPoolsTokenProvider,\n                    credentialsProvider: cognitoCredentialsProvider,\n                },\n            });\n            return;\n        }\n        // At this point, Auth libraryOptions would have been previously configured and no overriding\n        // Auth options were given, so we should preserve the currently configured Auth libraryOptions.\n        if (libraryOptions) {\n            // If ssr is provided through libraryOptions, we should respect the intentional reconfiguration.\n            if (libraryOptions.ssr !== undefined) {\n                cognitoUserPoolsTokenProvider.setKeyValueStorage(\n                // TODO: allow configure with a public interface\n                libraryOptions.ssr\n                    ? new CookieStorage({ sameSite: 'lax' })\n                    : defaultStorage);\n            }\n            Amplify.configure(resolvedResourceConfig, {\n                Auth: Amplify.libraryOptions.Auth,\n                ...libraryOptions,\n            });\n            return;\n        }\n        // Finally, if there were no libraryOptions given at all, we should simply not touch the currently\n        // configured libraryOptions.\n        Amplify.configure(resolvedResourceConfig);\n    },\n    /**\n     * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling\n     * `Amplify.configure`.\n     *\n     * @returns An {@link ResourcesConfig} object.\n     */\n    getConfig() {\n        return Amplify.getConfig();\n    },\n};\n"],"mappings":";;;;AAAA;AACA;AAIY,MAACA,cAAc,GAAG;EAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAASA,CAACC,cAAc,EAAEC,cAAc,EAAE;IACtC,IAAIC,sBAAsB;IAC1B,IAAIC,MAAM,CAACC,IAAI,CAACJ,cAAc,CAAC,CAACK,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE;MACjEL,sBAAsB,GAAGM,eAAe,CAACR,cAAc,CAAC;IACpE,CAAS,MACI;MACDE,sBAAsB,GAAGF,cAAc;IACnD;IACA;IACA;IACQ,IAAI,CAACE,sBAAsB,CAACO,IAAI,EAAE;MAC9BC,OAAO,CAACX,SAAS,CAACG,sBAAsB,EAAED,cAAc,CAAC;MACzD;IACZ;IACA;IACA;IACQ,IAAIA,cAAc,EAAEQ,IAAI,EAAE;MACtBC,OAAO,CAACX,SAAS,CAACG,sBAAsB,EAAED,cAAc,CAAC;MACzD;IACZ;IACA;IACQ,IAAI,CAACS,OAAO,CAACT,cAAc,CAACQ,IAAI,EAAE;MAC9BE,6BAA6B,CAACC,aAAa,CAACV,sBAAsB,CAACO,IAAI,CAAC;MACxEE,6BAA6B,CAACE,kBAAkB;MAC5D;MACYZ,cAAc,EAAEa,GAAG,GACb,IAAIC,aAAa,CAAC;QAAEC,QAAQ,EAAE;MAAK,CAAE,CAAC,GACtCC,cAAc,CAAC;MACrBP,OAAO,CAACX,SAAS,CAACG,sBAAsB,EAAE;QACtC,GAAGD,cAAc;QACjBQ,IAAI,EAAE;UACFS,aAAa,EAAEP,6BAA6B;UAC5CQ,mBAAmB,EAAEC;QACzC;MACA,CAAa,CAAC;MACF;IACZ;IACA;IACA;IACQ,IAAInB,cAAc,EAAE;MAC5B;MACY,IAAIA,cAAc,CAACa,GAAG,KAAKO,SAAS,EAAE;QAClCV,6BAA6B,CAACE,kBAAkB;QAChE;QACgBZ,cAAc,CAACa,GAAG,GACZ,IAAIC,aAAa,CAAC;UAAEC,QAAQ,EAAE;QAAK,CAAE,CAAC,GACtCC,cAAc,CAAC;MACrC;MACYP,OAAO,CAACX,SAAS,CAACG,sBAAsB,EAAE;QACtCO,IAAI,EAAEC,OAAO,CAACT,cAAc,CAACQ,IAAI;QACjC,GAAGR;MACnB,CAAa,CAAC;MACF;IACZ;IACA;IACA;IACQS,OAAO,CAACX,SAAS,CAACG,sBAAsB,CAAC;EACjD,CAAK;EACL;AACA;AACA;AACA;AACA;AACA;EACIoB,SAASA,CAAA,EAAG;IACR,OAAOZ,OAAO,CAACY,SAAS,EAAE;EAClC;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}