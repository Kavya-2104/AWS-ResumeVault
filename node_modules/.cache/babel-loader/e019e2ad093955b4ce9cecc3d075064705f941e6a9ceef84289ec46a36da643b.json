{"ast":null,"code":"import '../../utils/getClientInfo/getClientInfo.mjs';\nimport '../../utils/retry/retry.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { parseMetadata } from '../../clients/serde/responseInfo.mjs';\nimport { parseJsonError, parseJsonBody } from '../../clients/serde/json.mjs';\nimport { composeServiceApi } from '../../clients/internal/composeServiceApi.mjs';\nimport { defaultConfig, cognitoIdentityTransferHandler, buildHttpRpcRequest, getSharedHeaders } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getCredentialsForIdentitySerializer = (input, endpoint) => {\n  const headers = getSharedHeaders('GetCredentialsForIdentity');\n  const body = JSON.stringify(input);\n  return buildHttpRpcRequest(endpoint, headers, body);\n};\nconst getCredentialsForIdentityDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    throw error;\n  } else {\n    const body = await parseJsonBody(response);\n    return {\n      IdentityId: body.IdentityId,\n      Credentials: deserializeCredentials(body.Credentials),\n      $metadata: parseMetadata(response)\n    };\n  }\n};\nconst deserializeCredentials = ({\n  AccessKeyId,\n  SecretKey,\n  SessionToken,\n  Expiration\n} = {}) => {\n  return {\n    AccessKeyId,\n    SecretKey,\n    SessionToken,\n    Expiration: Expiration && new Date(Expiration * 1000)\n  };\n};\n/**\n * @internal\n */\nconst getCredentialsForIdentity = composeServiceApi(cognitoIdentityTransferHandler, getCredentialsForIdentitySerializer, getCredentialsForIdentityDeserializer, defaultConfig);\nexport { getCredentialsForIdentity };","map":{"version":3,"names":["getCredentialsForIdentitySerializer","input","endpoint","headers","getSharedHeaders","body","JSON","stringify","buildHttpRpcRequest","getCredentialsForIdentityDeserializer","response","statusCode","error","parseJsonError","parseJsonBody","IdentityId","Credentials","deserializeCredentials","$metadata","parseMetadata","AccessKeyId","SecretKey","SessionToken","Expiration","Date","getCredentialsForIdentity","composeServiceApi","cognitoIdentityTransferHandler","defaultConfig"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\awsClients\\cognitoIdentity\\getCredentialsForIdentity.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseJsonBody, parseJsonError, parseMetadata, } from '../../clients';\nimport { composeServiceApi } from '../../clients/internal';\nimport { buildHttpRpcRequest, cognitoIdentityTransferHandler, defaultConfig, getSharedHeaders, } from './base';\nconst getCredentialsForIdentitySerializer = (input, endpoint) => {\n    const headers = getSharedHeaders('GetCredentialsForIdentity');\n    const body = JSON.stringify(input);\n    return buildHttpRpcRequest(endpoint, headers, body);\n};\nconst getCredentialsForIdentityDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = await parseJsonError(response);\n        throw error;\n    }\n    else {\n        const body = await parseJsonBody(response);\n        return {\n            IdentityId: body.IdentityId,\n            Credentials: deserializeCredentials(body.Credentials),\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nconst deserializeCredentials = ({ AccessKeyId, SecretKey, SessionToken, Expiration, } = {}) => {\n    return {\n        AccessKeyId,\n        SecretKey,\n        SessionToken,\n        Expiration: Expiration && new Date(Expiration * 1000),\n    };\n};\n/**\n * @internal\n */\nexport const getCredentialsForIdentity = composeServiceApi(cognitoIdentityTransferHandler, getCredentialsForIdentitySerializer, getCredentialsForIdentityDeserializer, defaultConfig);\n"],"mappings":";;;;;;;;;AAAA;AACA;AAIA,MAAMA,mCAAmC,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC7D,MAAMC,OAAO,GAAGC,gBAAgB,CAAC,2BAA2B,CAAC;EAC7D,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;EAClC,OAAOO,mBAAmB,CAACN,QAAQ,EAAEC,OAAO,EAAEE,IAAI,CAAC;AACvD,CAAC;AACD,MAAMI,qCAAqC,GAAG,MAAOC,QAAQ,IAAK;EAC9D,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAG,MAAMC,cAAc,CAACH,QAAQ,CAAC;IAC5C,MAAME,KAAK;EACnB,CAAK,MACI;IACD,MAAMP,IAAI,GAAG,MAAMS,aAAa,CAACJ,QAAQ,CAAC;IAC1C,OAAO;MACHK,UAAU,EAAEV,IAAI,CAACU,UAAU;MAC3BC,WAAW,EAAEC,sBAAsB,CAACZ,IAAI,CAACW,WAAW,CAAC;MACrDE,SAAS,EAAEC,aAAa,CAACT,QAAQ;IAC7C,CAAS;EACT;AACA,CAAC;AACD,MAAMO,sBAAsB,GAAGA,CAAC;EAAEG,WAAW;EAAEC,SAAS;EAAEC,YAAY;EAAEC;AAAU,CAAG,GAAG,EAAE,KAAK;EAC3F,OAAO;IACHH,WAAW;IACXC,SAAS;IACTC,YAAY;IACZC,UAAU,EAAEA,UAAU,IAAI,IAAIC,IAAI,CAACD,UAAU,GAAG,IAAI;EAC5D,CAAK;AACL,CAAC;AACD;AACA;AACA;AACY,MAACE,yBAAyB,GAAGC,iBAAiB,CAACC,8BAA8B,EAAE3B,mCAAmC,EAAES,qCAAqC,EAAEmB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}