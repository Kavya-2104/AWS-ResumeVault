{"ast":null,"code":"import { createMachine, sendUpdate } from 'xstate';\nimport { runValidators } from '../../../validators/index.mjs';\nimport ACTIONS from '../actions.mjs';\nimport GUARDS from '../guards.mjs';\nimport { defaultServices } from '../defaultServices.mjs';\nfunction forgotPasswordActor({\n  services\n}) {\n  return createMachine({\n    id: 'forgotPasswordActor',\n    initial: 'init',\n    predictableActionArguments: true,\n    states: {\n      init: {\n        always: [{\n          cond: 'shouldResetPassword',\n          target: 'confirmResetPassword'\n        }, {\n          cond: 'shouldConfirmResetPassword',\n          target: 'confirmResetPassword'\n        }, {\n          target: 'forgotPassword'\n        }]\n      },\n      forgotPassword: {\n        initial: 'edit',\n        entry: 'sendUpdate',\n        exit: ['clearError', 'clearTouched'],\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              CHANGE: {\n                actions: 'handleInput'\n              },\n              BLUR: {\n                actions: 'handleBlur'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['sendUpdate', 'clearError', 'setUsernameForgotPassword'],\n            invoke: {\n              src: 'handleResetPassword',\n              onDone: {\n                actions: ['setCodeDeliveryDetails', 'setNextResetPasswordStep'],\n                target: '#forgotPasswordActor.confirmResetPassword'\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit'\n              }\n            }\n          }\n        }\n      },\n      confirmResetPassword: {\n        type: 'parallel',\n        exit: ['clearFormValues', 'clearError', 'clearTouched'],\n        states: {\n          validation: {\n            initial: 'pending',\n            states: {\n              pending: {\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'valid',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    target: 'invalid',\n                    actions: 'setFieldErrors'\n                  }\n                }\n              },\n              valid: {\n                entry: 'sendUpdate'\n              },\n              invalid: {\n                entry: 'sendUpdate'\n              }\n            },\n            on: {\n              CHANGE: {\n                actions: 'handleInput',\n                target: '.pending'\n              },\n              BLUR: {\n                actions: 'handleBlur',\n                target: '.pending'\n              }\n            }\n          },\n          submission: {\n            initial: 'idle',\n            states: {\n              idle: {\n                entry: 'sendUpdate',\n                on: {\n                  SUBMIT: {\n                    actions: 'handleSubmit',\n                    target: 'validate'\n                  },\n                  RESEND: 'resendCode',\n                  CHANGE: {\n                    actions: 'handleInput'\n                  },\n                  BLUR: {\n                    actions: 'handleBlur'\n                  }\n                }\n              },\n              validate: {\n                entry: 'sendUpdate',\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'pending',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    target: 'idle',\n                    actions: 'setFieldErrors'\n                  }\n                }\n              },\n              resendCode: {\n                tags: 'pending',\n                entry: ['clearError', 'sendUpdate'],\n                invoke: {\n                  src: 'handleResetPassword',\n                  onDone: {\n                    target: 'idle'\n                  },\n                  onError: {\n                    actions: 'setRemoteError',\n                    target: 'idle'\n                  }\n                }\n              },\n              pending: {\n                tags: 'pending',\n                entry: ['clearError', 'sendUpdate'],\n                invoke: {\n                  src: 'handleConfirmResetPassword',\n                  onDone: [{\n                    cond: 'hasCompletedResetPassword',\n                    actions: 'setNextResetPasswordStep',\n                    target: '#forgotPasswordActor.resolved'\n                  }, {\n                    actions: 'setSignInStep',\n                    target: '#forgotPasswordActor.resolved'\n                  }],\n                  onError: {\n                    actions: 'setRemoteError',\n                    target: 'idle'\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: 'final',\n        data: ({\n          step\n        }) => ({\n          step\n        })\n      }\n    }\n  }, {\n    // sendUpdate is a HOC\n    actions: {\n      ...ACTIONS,\n      sendUpdate: sendUpdate()\n    },\n    guards: GUARDS,\n    services: {\n      handleResetPassword({\n        username\n      }) {\n        return services.handleForgotPassword({\n          username\n        });\n      },\n      handleConfirmResetPassword({\n        formValues,\n        username\n      }) {\n        const {\n          confirmation_code: confirmationCode,\n          password: newPassword\n        } = formValues;\n        return services.handleForgotPasswordSubmit({\n          confirmationCode,\n          newPassword,\n          username\n        });\n      },\n      validateFields(context) {\n        return runValidators(context.formValues, context.touched, context.passwordSettings, [defaultServices.validateFormPassword, defaultServices.validateConfirmPassword]);\n      }\n    }\n  });\n}\nexport { forgotPasswordActor };","map":{"version":3,"names":["createMachine","sendUpdate","runValidators","ACTIONS","GUARDS","defaultServices","forgotPasswordActor","services","id","initial","predictableActionArguments","states","init","always","cond","target","forgotPassword","entry","exit","edit","on","SUBMIT","actions","CHANGE","BLUR","submit","tags","invoke","src","onDone","onError","confirmResetPassword","type","validation","pending","valid","invalid","submission","idle","RESEND","validate","resendCode","resolved","data","step","guards","handleResetPassword","username","handleForgotPassword","handleConfirmResetPassword","formValues","confirmation_code","confirmationCode","password","newPassword","handleForgotPasswordSubmit","validateFields","context","touched","passwordSettings","validateFormPassword","validateConfirmPassword"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/forgotPassword.mjs"],"sourcesContent":["import { createMachine, sendUpdate } from 'xstate';\nimport { runValidators } from '../../../validators/index.mjs';\nimport ACTIONS from '../actions.mjs';\nimport GUARDS from '../guards.mjs';\nimport { defaultServices } from '../defaultServices.mjs';\n\nfunction forgotPasswordActor({ services, }) {\n    return createMachine({\n        id: 'forgotPasswordActor',\n        initial: 'init',\n        predictableActionArguments: true,\n        states: {\n            init: {\n                always: [\n                    {\n                        cond: 'shouldResetPassword',\n                        target: 'confirmResetPassword',\n                    },\n                    {\n                        cond: 'shouldConfirmResetPassword',\n                        target: 'confirmResetPassword',\n                    },\n                    {\n                        target: 'forgotPassword',\n                    },\n                ],\n            },\n            forgotPassword: {\n                initial: 'edit',\n                entry: 'sendUpdate',\n                exit: ['clearError', 'clearTouched'],\n                states: {\n                    edit: {\n                        entry: 'sendUpdate',\n                        on: {\n                            SUBMIT: { actions: 'handleSubmit', target: 'submit' },\n                            CHANGE: { actions: 'handleInput' },\n                            BLUR: { actions: 'handleBlur' },\n                        },\n                    },\n                    submit: {\n                        tags: 'pending',\n                        entry: ['sendUpdate', 'clearError', 'setUsernameForgotPassword'],\n                        invoke: {\n                            src: 'handleResetPassword',\n                            onDone: {\n                                actions: [\n                                    'setCodeDeliveryDetails',\n                                    'setNextResetPasswordStep',\n                                ],\n                                target: '#forgotPasswordActor.confirmResetPassword',\n                            },\n                            onError: {\n                                actions: 'setRemoteError',\n                                target: 'edit',\n                            },\n                        },\n                    },\n                },\n            },\n            confirmResetPassword: {\n                type: 'parallel',\n                exit: ['clearFormValues', 'clearError', 'clearTouched'],\n                states: {\n                    validation: {\n                        initial: 'pending',\n                        states: {\n                            pending: {\n                                invoke: {\n                                    src: 'validateFields',\n                                    onDone: {\n                                        target: 'valid',\n                                        actions: 'clearValidationError',\n                                    },\n                                    onError: {\n                                        target: 'invalid',\n                                        actions: 'setFieldErrors',\n                                    },\n                                },\n                            },\n                            valid: { entry: 'sendUpdate' },\n                            invalid: { entry: 'sendUpdate' },\n                        },\n                        on: {\n                            CHANGE: {\n                                actions: 'handleInput',\n                                target: '.pending',\n                            },\n                            BLUR: {\n                                actions: 'handleBlur',\n                                target: '.pending',\n                            },\n                        },\n                    },\n                    submission: {\n                        initial: 'idle',\n                        states: {\n                            idle: {\n                                entry: 'sendUpdate',\n                                on: {\n                                    SUBMIT: { actions: 'handleSubmit', target: 'validate' },\n                                    RESEND: 'resendCode',\n                                    CHANGE: { actions: 'handleInput' },\n                                    BLUR: { actions: 'handleBlur' },\n                                },\n                            },\n                            validate: {\n                                entry: 'sendUpdate',\n                                invoke: {\n                                    src: 'validateFields',\n                                    onDone: {\n                                        target: 'pending',\n                                        actions: 'clearValidationError',\n                                    },\n                                    onError: {\n                                        target: 'idle',\n                                        actions: 'setFieldErrors',\n                                    },\n                                },\n                            },\n                            resendCode: {\n                                tags: 'pending',\n                                entry: ['clearError', 'sendUpdate'],\n                                invoke: {\n                                    src: 'handleResetPassword',\n                                    onDone: { target: 'idle' },\n                                    onError: { actions: 'setRemoteError', target: 'idle' },\n                                },\n                            },\n                            pending: {\n                                tags: 'pending',\n                                entry: ['clearError', 'sendUpdate'],\n                                invoke: {\n                                    src: 'handleConfirmResetPassword',\n                                    onDone: [\n                                        {\n                                            cond: 'hasCompletedResetPassword',\n                                            actions: 'setNextResetPasswordStep',\n                                            target: '#forgotPasswordActor.resolved',\n                                        },\n                                        {\n                                            actions: 'setSignInStep',\n                                            target: '#forgotPasswordActor.resolved',\n                                        },\n                                    ],\n                                    onError: { actions: 'setRemoteError', target: 'idle' },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            resolved: {\n                type: 'final',\n                data: ({ step }) => ({ step }),\n            },\n        },\n    }, {\n        // sendUpdate is a HOC\n        actions: { ...ACTIONS, sendUpdate: sendUpdate() },\n        guards: GUARDS,\n        services: {\n            handleResetPassword({ username }) {\n                return services.handleForgotPassword({ username });\n            },\n            handleConfirmResetPassword({ formValues, username }) {\n                const { confirmation_code: confirmationCode, password: newPassword } = formValues;\n                return services.handleForgotPasswordSubmit({\n                    confirmationCode,\n                    newPassword,\n                    username,\n                });\n            },\n            validateFields(context) {\n                return runValidators(context.formValues, context.touched, context.passwordSettings, [\n                    defaultServices.validateFormPassword,\n                    defaultServices.validateConfirmPassword,\n                ]);\n            },\n        },\n    });\n}\n\nexport { forgotPasswordActor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}