{"ast":null,"code":"/* tslint:disable */\n// @ts-nocheck -> BigInteger is already a vended utility\n// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/\n//\n// All public methods have been removed except the following:\n//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)\n//   toString (only radix 2, 4, 8, 16 and 32 supported)\n//   negate\n//   abs\n//   compareTo\n//   bitLength\n//   mod\n//   equals\n//   add\n//   subtract\n//   multiply\n//   divide\n//   modPow\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n// (public) Constructor\nfunction BigInteger(a, b) {\n  if (a != null) this.fromString(a, b);\n}\n// return new, unset BigInteger\nfunction nbi() {\n  return new BigInteger(null, null);\n}\n// Bits per digit\nlet dbits;\n// JavaScript engine analysis\nconst canary = 0xdeadbeefcafe;\nconst j_lm = (canary & 0xffffff) === 0xefcafe;\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    const v = x * this[i++] + w[j] + c;\n    c = Math.floor(v / 0x4000000);\n    w[j++] = v & 0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n  const xl = x & 0x7fff,\n    xh = x >> 15;\n  while (--n >= 0) {\n    let l = this[i] & 0x7fff;\n    const h = this[i++] >> 15;\n    const m = xh * l + h * xl;\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n    w[j++] = l & 0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n  const xl = x & 0x3fff,\n    xh = x >> 14;\n  while (--n >= 0) {\n    let l = this[i] & 0x3fff;\n    const h = this[i++] >> 14;\n    const m = xh * l + h * xl;\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n    c = (l >> 28) + (m >> 14) + xh * h;\n    w[j++] = l & 0xfffffff;\n  }\n  return c;\n}\nconst inBrowser = typeof navigator !== 'undefined';\nif (inBrowser && j_lm && navigator.appName === 'Microsoft Internet Explorer') {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n} else if (inBrowser && j_lm && navigator.appName !== 'Netscape') {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n} else {\n  // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nconst BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nconst BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';\nconst BI_RC = new Array();\nlet rr, vv;\nrr = '0'.charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = 'a'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = 'A'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nfunction int2char(n) {\n  return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n}\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = x < 0 ? -1 : 0;\n  if (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;\n}\n// return bigint initialized to value\nfunction nbv(i) {\n  var r = nbi();\n  r.fromInt(i);\n  return r;\n}\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n  let k;\n  if (b === 16) k = 4;else if (b === 8) k = 3;else if (b === 2) k = 1;else if (b === 32) k = 5;else if (b === 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n  this.t = 0;\n  this.s = 0;\n  let i = s.length,\n    mi = false,\n    sh = 0;\n  while (--i >= 0) {\n    const x = intAt(s, i);\n    if (x < 0) {\n      if (s.charAt(i) === '-') mi = true;\n      continue;\n    }\n    mi = false;\n    if (sh === 0) this[this.t++] = x;else if (sh + k > this.DB) {\n      this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n      this[this.t++] = x >> this.DB - sh;\n    } else this[this.t - 1] |= x << sh;\n    sh += k;\n    if (sh >= this.DB) sh -= this.DB;\n  }\n  this.clamp();\n  if (mi) BigInteger.ZERO.subTo(this, this);\n}\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s & this.DM;\n  while (this.t > 0 && this[this.t - 1] == c) --this.t;\n}\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  if (this.s < 0) return '-' + this.negate().toString(b);\n  var k;\n  if (b == 16) k = 4;else if (b === 8) k = 3;else if (b === 2) k = 1;else if (b === 32) k = 5;else if (b === 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n  let km = (1 << k) - 1,\n    d,\n    m = false,\n    r = '',\n    i = this.t;\n  let p = this.DB - i * this.DB % k;\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) > 0) {\n      m = true;\n      r = int2char(d);\n    }\n    while (i >= 0) {\n      if (p < k) {\n        d = (this[i] & (1 << p) - 1) << k - p;\n        d |= this[--i] >> (p += this.DB - k);\n      } else {\n        d = this[i] >> (p -= k) & km;\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n      if (d > 0) m = true;\n      if (m) r += int2char(d);\n    }\n  }\n  return m ? r : '0';\n}\n// (public) -this\nfunction bnNegate() {\n  var r = nbi();\n  BigInteger.ZERO.subTo(this, r);\n  return r;\n}\n// (public) |this|\nfunction bnAbs() {\n  return this.s < 0 ? this.negate() : this;\n}\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s - a.s;\n  if (r != 0) return r;\n  var i = this.t;\n  r = i - a.t;\n  if (r != 0) return this.s < 0 ? -r : r;\n  while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\n  return 0;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1,\n    t;\n  if ((t = x >>> 16) !== 0) {\n    x = t;\n    r += 16;\n  }\n  if ((t = x >> 8) !== 0) {\n    x = t;\n    r += 8;\n  }\n  if ((t = x >> 4) !== 0) {\n    x = t;\n    r += 4;\n  }\n  if ((t = x >> 2) !== 0) {\n    x = t;\n    r += 2;\n  }\n  if ((t = x >> 1) !== 0) {\n    x = t;\n    r += 1;\n  }\n  return r;\n}\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if (this.t <= 0) return 0;\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n}\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n  let i;\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n  for (i = n - 1; i >= 0; --i) r[i] = 0;\n  r.t = this.t + n;\n  r.s = this.s;\n}\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n  for (let i = n; i < this.t; ++i) r[i - n] = this[i];\n  r.t = Math.max(this.t - n, 0);\n  r.s = this.s;\n}\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n  const bs = n % this.DB;\n  const cbs = this.DB - bs;\n  const bm = (1 << cbs) - 1;\n  let ds = Math.floor(n / this.DB),\n    c = this.s << bs & this.DM,\n    i;\n  for (i = this.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = this[i] >> cbs | c;\n    c = (this[i] & bm) << bs;\n  }\n  for (i = ds - 1; i >= 0; --i) r[i] = 0;\n  r[ds] = c;\n  r.t = this.t + ds + 1;\n  r.s = this.s;\n  r.clamp();\n}\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n  r.s = this.s;\n  const ds = Math.floor(n / this.DB);\n  if (ds >= this.t) {\n    r.t = 0;\n    return;\n  }\n  const bs = n % this.DB;\n  const cbs = this.DB - bs;\n  const bm = (1 << bs) - 1;\n  r[0] = this[ds] >> bs;\n  for (let i = ds + 1; i < this.t; ++i) {\n    r[i - ds - 1] |= (this[i] & bm) << cbs;\n    r[i - ds] = this[i] >> bs;\n  }\n  if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n  r.t = this.t - ds;\n  r.clamp();\n}\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n  let i = 0,\n    c = 0,\n    m = Math.min(a.t, this.t);\n  while (i < m) {\n    c += this[i] - a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n  if (a.t < this.t) {\n    c -= a.s;\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  } else {\n    c += this.s;\n    while (i < a.t) {\n      c -= a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c -= a.s;\n  }\n  r.s = c < 0 ? -1 : 0;\n  if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n  const x = this.abs(),\n    y = a.abs();\n  let i = x.t;\n  r.t = i + y.t;\n  while (--i >= 0) r[i] = 0;\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n  r.s = 0;\n  r.clamp();\n  if (this.s !== a.s) BigInteger.ZERO.subTo(r, r);\n}\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2 * x.t;\n  while (--i >= 0) r[i] = 0;\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1);\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV;\n      r[i + x.t + 1] = 1;\n    }\n  }\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n  r.s = 0;\n  r.clamp();\n}\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n  var pm = m.abs();\n  if (pm.t <= 0) return;\n  var pt = this.abs();\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0);\n    if (r != null) this.copyTo(r);\n    return;\n  }\n  if (r === null) r = nbi();\n  var y = nbi(),\n    ts = this.s,\n    ms = m.s;\n  var nsh = this.DB - nbits(pm[pm.t - 1]);\n  // normalize modulus\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y);\n    pt.lShiftTo(nsh, r);\n  } else {\n    pm.copyTo(y);\n    pt.copyTo(r);\n  }\n  const ys = y.t;\n  const y0 = y[ys - 1];\n  if (y0 === 0) return;\n  const yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n  const d1 = this.FV / yt,\n    d2 = (1 << this.F1) / yt,\n    e = 1 << this.F2;\n  let i = r.t,\n    j = i - ys,\n    t = q === null ? nbi() : q;\n  y.dlShiftTo(j, t);\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t, r);\n  }\n  BigInteger.ONE.dlShiftTo(ys, t);\n  t.subTo(y, y);\n  // \"negative\" y so we can replace sub with am later\n  while (y.t < ys) y[y.t++] = 0;\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = r[--i] === y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n      // Try it out\n      y.dlShiftTo(j, t);\n      r.subTo(t, r);\n      while (r[i] < --qd) r.subTo(t, r);\n    }\n  }\n  if (q !== null) {\n    r.drShiftTo(ys, q);\n    if (ts !== ms) BigInteger.ZERO.subTo(q, q);\n  }\n  r.t = ys;\n  r.clamp();\n  if (nsh > 0) r.rShiftTo(nsh, r);\n  // Denormalize remainder\n  if (ts < 0) BigInteger.ZERO.subTo(r, r);\n}\n// (public) this mod a\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a, null, r);\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  return r;\n}\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0;\n  var x = this[0];\n  if ((x & 1) === 0) return 0;\n  var y = x & 3;\n  // y == 1/x mod 2^2\n  y = y * (2 - (x & 0xf) * y) & 0xf;\n  // y == 1/x mod 2^4\n  y = y * (2 - (x & 0xff) * y) & 0xff;\n  // y == 1/x mod 2^8\n  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff;\n  // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = y * (2 - x * y % this.DV) % this.DV;\n  // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return y > 0 ? this.DV - y : -y;\n}\nfunction bnEquals(a) {\n  return this.compareTo(a) === 0;\n}\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n  let i = 0,\n    c = 0,\n    m = Math.min(a.t, this.t);\n  while (i < m) {\n    c += this[i] + a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n  if (a.t < this.t) {\n    c += a.s;\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  } else {\n    c += this.s;\n    while (i < a.t) {\n      c += a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c += a.s;\n  }\n  r.s = c < 0 ? -1 : 0;\n  if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;\n  r.t = i;\n  r.clamp();\n}\n// (public) this + a\nfunction bnAdd(a) {\n  var r = nbi();\n  this.addTo(a, r);\n  return r;\n}\n// (public) this - a\nfunction bnSubtract(a) {\n  var r = nbi();\n  this.subTo(a, r);\n  return r;\n}\n// (public) this * a\nfunction bnMultiply(a) {\n  var r = nbi();\n  this.multiplyTo(a, r);\n  return r;\n}\n// (public) this / a\nfunction bnDivide(a) {\n  var r = nbi();\n  this.divRemTo(a, r, null);\n  return r;\n}\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp & 0x7fff;\n  this.mph = this.mp >> 15;\n  this.um = (1 << m.DB - 15) - 1;\n  this.mt2 = 2 * m.t;\n}\n// xR mod m\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t, r);\n  r.divRemTo(this.m, null, r);\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  return r;\n}\n// x/R mod m\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while (x.t <= this.mt2)\n  // pad x so am has enough room later\n  x[x.t++] = 0;\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff;\n    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i + this.m.t;\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n    // propagate carry\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV;\n      x[++j]++;\n    }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t, x);\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m, callback) {\n  let i = e.bitLength(),\n    k,\n    r = nbv(1),\n    z = new Montgomery(m);\n  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n  // precomputation\n  let g = new Array(),\n    n = 3,\n    k1 = k - 1,\n    km = (1 << k) - 1;\n  g[1] = z.convert(this);\n  if (k > 1) {\n    const g2 = nbi();\n    z.sqrTo(g[1], g2);\n    while (n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2, g[n - 2], g[n]);\n      n += 2;\n    }\n  }\n  let j = e.t - 1,\n    w,\n    is1 = true,\n    r2 = nbi(),\n    t;\n  i = nbits(e[j]) - 1;\n  while (j >= 0) {\n    if (i >= k1) w = e[j] >> i - k1 & km;else {\n      w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n      if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n    }\n    n = k;\n    while ((w & 1) === 0) {\n      w >>= 1;\n      --n;\n    }\n    if ((i -= n) < 0) {\n      i += this.DB;\n      --j;\n    }\n    if (is1) {\n      // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2);\n        z.sqrTo(r2, r);\n        n -= 2;\n      }\n      if (n > 0) z.sqrTo(r, r2);else {\n        t = r;\n        r = r2;\n        r2 = t;\n      }\n      z.mulTo(r2, g[w], r);\n    }\n    while (j >= 0 && (e[j] & 1 << i) === 0) {\n      z.sqrTo(r, r2);\n      t = r;\n      r = r2;\n      r2 = t;\n      if (--i < 0) {\n        i = this.DB - 1;\n        --j;\n      }\n    }\n  }\n  var result = z.revert(r);\n  callback(null, result);\n  return result;\n}\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.addTo = bnpAddTo;\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.modPow = bnModPow;\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\nexport { BigInteger as default };","map":{"version":3,"names":["BigInteger","a","b","fromString","nbi","dbits","canary","j_lm","am1","i","x","w","j","c","n","v","Math","floor","am2","xl","xh","l","h","m","am3","inBrowser","navigator","appName","prototype","am","DB","DM","DV","BI_FP","FV","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","s","bnpCopyTo","r","t","bnpFromInt","nbv","fromInt","bnpFromString","k","Error","length","mi","sh","clamp","ZERO","subTo","bnpClamp","bnToString","negate","toString","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","bnpInvDigit","bnEquals","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","multiplyTo","bnDivide","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","reduce","montReduce","u0","montSqrTo","squareTo","montMulTo","convert","revert","mulTo","sqrTo","bnModPow","callback","bitLength","z","g","k1","g2","is1","r2","result","mod","equals","add","subtract","multiply","divide","modPow"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\utils\\srp\\BigInteger\\BigInteger.ts"],"sourcesContent":["/* tslint:disable */\n// @ts-nocheck -> BigInteger is already a vended utility\n// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/\n//\n// All public methods have been removed except the following:\n//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)\n//   toString (only radix 2, 4, 8, 16 and 32 supported)\n//   negate\n//   abs\n//   compareTo\n//   bitLength\n//   mod\n//   equals\n//   add\n//   subtract\n//   multiply\n//   divide\n//   modPow\nexport default BigInteger;\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n// (public) Constructor\nfunction BigInteger(a, b) {\n    if (a != null)\n        this.fromString(a, b);\n}\n// return new, unset BigInteger\nfunction nbi() {\n    return new BigInteger(null, null);\n}\n// Bits per digit\nlet dbits;\n// JavaScript engine analysis\nconst canary = 0xdeadbeefcafe;\nconst j_lm = (canary & 0xffffff) === 0xefcafe;\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n        const v = x * this[i++] + w[j] + c;\n        c = Math.floor(v / 0x4000000);\n        w[j++] = v & 0x3ffffff;\n    }\n    return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n    const xl = x & 0x7fff, xh = x >> 15;\n    while (--n >= 0) {\n        let l = this[i] & 0x7fff;\n        const h = this[i++] >> 15;\n        const m = xh * l + h * xl;\n        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w[j++] = l & 0x3fffffff;\n    }\n    return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    const xl = x & 0x3fff, xh = x >> 14;\n    while (--n >= 0) {\n        let l = this[i] & 0x3fff;\n        const h = this[i++] >> 14;\n        const m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w[j++] = l & 0xfffffff;\n    }\n    return c;\n}\nconst inBrowser = typeof navigator !== 'undefined';\nif (inBrowser && j_lm && navigator.appName === 'Microsoft Internet Explorer') {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n}\nelse if (inBrowser && j_lm && navigator.appName !== 'Netscape') {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n}\nelse {\n    // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nconst BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nconst BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';\nconst BI_RC = new Array();\nlet rr, vv;\nrr = '0'.charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv)\n    BI_RC[rr++] = vv;\nrr = 'a'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv)\n    BI_RC[rr++] = vv;\nrr = 'A'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv)\n    BI_RC[rr++] = vv;\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return c == null ? -1 : c;\n}\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n    for (var i = this.t - 1; i >= 0; --i)\n        r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n}\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n    this.t = 1;\n    this.s = x < 0 ? -1 : 0;\n    if (x > 0)\n        this[0] = x;\n    else if (x < -1)\n        this[0] = x + this.DV;\n    else\n        this.t = 0;\n}\n// return bigint initialized to value\nfunction nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n    let k;\n    if (b === 16)\n        k = 4;\n    else if (b === 8)\n        k = 3;\n    else if (b === 2)\n        k = 1;\n    else if (b === 32)\n        k = 5;\n    else if (b === 4)\n        k = 2;\n    else\n        throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n    this.t = 0;\n    this.s = 0;\n    let i = s.length, mi = false, sh = 0;\n    while (--i >= 0) {\n        const x = intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) === '-')\n                mi = true;\n            continue;\n        }\n        mi = false;\n        if (sh === 0)\n            this[this.t++] = x;\n        else if (sh + k > this.DB) {\n            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n            this[this.t++] = x >> (this.DB - sh);\n        }\n        else\n            this[this.t - 1] |= x << sh;\n        sh += k;\n        if (sh >= this.DB)\n            sh -= this.DB;\n    }\n    this.clamp();\n    if (mi)\n        BigInteger.ZERO.subTo(this, this);\n}\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n    var c = this.s & this.DM;\n    while (this.t > 0 && this[this.t - 1] == c)\n        --this.t;\n}\n// (public) return string representation in given radix\nfunction bnToString(b) {\n    if (this.s < 0)\n        return '-' + this.negate().toString(b);\n    var k;\n    if (b == 16)\n        k = 4;\n    else if (b === 8)\n        k = 3;\n    else if (b === 2)\n        k = 1;\n    else if (b === 32)\n        k = 5;\n    else if (b === 4)\n        k = 2;\n    else\n        throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n    let km = (1 << k) - 1, d, m = false, r = '', i = this.t;\n    let p = this.DB - ((i * this.DB) % k);\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) > 0) {\n            m = true;\n            r = int2char(d);\n        }\n        while (i >= 0) {\n            if (p < k) {\n                d = (this[i] & ((1 << p) - 1)) << (k - p);\n                d |= this[--i] >> (p += this.DB - k);\n            }\n            else {\n                d = (this[i] >> (p -= k)) & km;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if (d > 0)\n                m = true;\n            if (m)\n                r += int2char(d);\n        }\n    }\n    return m ? r : '0';\n}\n// (public) -this\nfunction bnNegate() {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n}\n// (public) |this|\nfunction bnAbs() {\n    return this.s < 0 ? this.negate() : this;\n}\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n    var r = this.s - a.s;\n    if (r != 0)\n        return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0)\n        return this.s < 0 ? -r : r;\n    while (--i >= 0)\n        if ((r = this[i] - a[i]) != 0)\n            return r;\n    return 0;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n    var r = 1, t;\n    if ((t = x >>> 16) !== 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) !== 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) !== 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) !== 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) !== 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n    if (this.t <= 0)\n        return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n}\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n    let i;\n    for (i = this.t - 1; i >= 0; --i)\n        r[i + n] = this[i];\n    for (i = n - 1; i >= 0; --i)\n        r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n}\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n    for (let i = n; i < this.t; ++i)\n        r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n}\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n    const bs = n % this.DB;\n    const cbs = this.DB - bs;\n    const bm = (1 << cbs) - 1;\n    let ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;\n    for (i = this.t - 1; i >= 0; --i) {\n        r[i + ds + 1] = (this[i] >> cbs) | c;\n        c = (this[i] & bm) << bs;\n    }\n    for (i = ds - 1; i >= 0; --i)\n        r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n}\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n    r.s = this.s;\n    const ds = Math.floor(n / this.DB);\n    if (ds >= this.t) {\n        r.t = 0;\n        return;\n    }\n    const bs = n % this.DB;\n    const cbs = this.DB - bs;\n    const bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for (let i = ds + 1; i < this.t; ++i) {\n        r[i - ds - 1] |= (this[i] & bm) << cbs;\n        r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0)\n        r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n}\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n    let i = 0, c = 0, m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] - a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c -= a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c -= a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c -= a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c < -1)\n        r[i++] = this.DV + c;\n    else if (c > 0)\n        r[i++] = c;\n    r.t = i;\n    r.clamp();\n}\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n    const x = this.abs(), y = a.abs();\n    let i = x.t;\n    r.t = i + y.t;\n    while (--i >= 0)\n        r[i] = 0;\n    for (i = 0; i < y.t; ++i)\n        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s !== a.s)\n        BigInteger.ZERO.subTo(r, r);\n}\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n    var x = this.abs();\n    var i = (r.t = 2 * x.t);\n    while (--i >= 0)\n        r[i] = 0;\n    for (i = 0; i < x.t - 1; ++i) {\n        var c = x.am(i, x[i], r, 2 * i, 0, 1);\n        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >=\n            x.DV) {\n            r[i + x.t] -= x.DV;\n            r[i + x.t + 1] = 1;\n        }\n    }\n    if (r.t > 0)\n        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n}\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n    var pm = m.abs();\n    if (pm.t <= 0)\n        return;\n    var pt = this.abs();\n    if (pt.t < pm.t) {\n        if (q != null)\n            q.fromInt(0);\n        if (r != null)\n            this.copyTo(r);\n        return;\n    }\n    if (r === null)\n        r = nbi();\n    var y = nbi(), ts = this.s, ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]);\n    // normalize modulus\n    if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n    }\n    else {\n        pm.copyTo(y);\n        pt.copyTo(r);\n    }\n    const ys = y.t;\n    const y0 = y[ys - 1];\n    if (y0 === 0)\n        return;\n    const yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n    const d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\n    let i = r.t, j = i - ys, t = q === null ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y);\n    // \"negative\" y so we can replace sub with am later\n    while (y.t < ys)\n        y[y.t++] = 0;\n    while (--j >= 0) {\n        // Estimate quotient digit\n        var qd = r[--i] === y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n            // Try it out\n            y.dlShiftTo(j, t);\n            r.subTo(t, r);\n            while (r[i] < --qd)\n                r.subTo(t, r);\n        }\n    }\n    if (q !== null) {\n        r.drShiftTo(ys, q);\n        if (ts !== ms)\n            BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0)\n        r.rShiftTo(nsh, r);\n    // Denormalize remainder\n    if (ts < 0)\n        BigInteger.ZERO.subTo(r, r);\n}\n// (public) this mod a\nfunction bnMod(a) {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        a.subTo(r, r);\n    return r;\n}\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n    if (this.t < 1)\n        return 0;\n    var x = this[0];\n    if ((x & 1) === 0)\n        return 0;\n    var y = x & 3;\n    // y == 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf;\n    // y == 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff;\n    // y == 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;\n    // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - ((x * y) % this.DV))) % this.DV;\n    // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return y > 0 ? this.DV - y : -y;\n}\nfunction bnEquals(a) {\n    return this.compareTo(a) === 0;\n}\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n    let i = 0, c = 0, m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] + a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c += a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c += a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c > 0)\n        r[i++] = c;\n    else if (c < -1)\n        r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n}\n// (public) this + a\nfunction bnAdd(a) {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n}\n// (public) this - a\nfunction bnSubtract(a) {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n}\n// (public) this * a\nfunction bnMultiply(a) {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n}\n// (public) this / a\nfunction bnDivide(a) {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n}\n// Montgomery reduction\nfunction Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << (m.DB - 15)) - 1;\n    this.mt2 = 2 * m.t;\n}\n// xR mod m\nfunction montConvert(x) {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        this.m.subTo(r, r);\n    return r;\n}\n// x/R mod m\nfunction montRevert(x) {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n}\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n    while (x.t <= this.mt2)\n        // pad x so am has enough room later\n        x[x.t++] = 0;\n    for (var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i] & 0x7fff;\n        var u0 = (j * this.mpl +\n            (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) &\n            x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i + this.m.t;\n        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        // propagate carry\n        while (x[j] >= x.DV) {\n            x[j] -= x.DV;\n            x[++j]++;\n        }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0)\n        x.subTo(this.m, x);\n}\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m, callback) {\n    let i = e.bitLength(), k, r = nbv(1), z = new Montgomery(m);\n    if (i <= 0)\n        return r;\n    else if (i < 18)\n        k = 1;\n    else if (i < 48)\n        k = 3;\n    else if (i < 144)\n        k = 4;\n    else if (i < 768)\n        k = 5;\n    else\n        k = 6;\n    // precomputation\n    let g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1) {\n        const g2 = nbi();\n        z.sqrTo(g[1], g2);\n        while (n <= km) {\n            g[n] = nbi();\n            z.mulTo(g2, g[n - 2], g[n]);\n            n += 2;\n        }\n    }\n    let j = e.t - 1, w, is1 = true, r2 = nbi(), t;\n    i = nbits(e[j]) - 1;\n    while (j >= 0) {\n        if (i >= k1)\n            w = (e[j] >> (i - k1)) & km;\n        else {\n            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n            if (j > 0)\n                w |= e[j - 1] >> (this.DB + i - k1);\n        }\n        n = k;\n        while ((w & 1) === 0) {\n            w >>= 1;\n            --n;\n        }\n        if ((i -= n) < 0) {\n            i += this.DB;\n            --j;\n        }\n        if (is1) {\n            // ret == 1, don't bother squaring or multiplying it\n            g[w].copyTo(r);\n            is1 = false;\n        }\n        else {\n            while (n > 1) {\n                z.sqrTo(r, r2);\n                z.sqrTo(r2, r);\n                n -= 2;\n            }\n            if (n > 0)\n                z.sqrTo(r, r2);\n            else {\n                t = r;\n                r = r2;\n                r2 = t;\n            }\n            z.mulTo(r2, g[w], r);\n        }\n        while (j >= 0 && (e[j] & (1 << i)) === 0) {\n            z.sqrTo(r, r2);\n            t = r;\n            r = r2;\n            r2 = t;\n            if (--i < 0) {\n                i = this.DB - 1;\n                --j;\n            }\n        }\n    }\n    var result = z.revert(r);\n    callback(null, result);\n    return result;\n}\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.addTo = bnpAddTo;\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.modPow = bnModPow;\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}