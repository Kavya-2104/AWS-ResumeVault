{"ast":null,"code":"import { defaultStorage } from '@aws-amplify/core';\nimport { UPLOADS_STORAGE_KEY } from '../../../utils/constants.mjs';\nimport '../../../utils/client/base.mjs';\nimport '../../../utils/client/getObject.mjs';\nimport '../../../utils/client/listObjectsV2.mjs';\nimport '../../../utils/client/putObject.mjs';\nimport '../../../utils/client/createMultipartUpload.mjs';\nimport '../../../utils/client/uploadPart.mjs';\nimport '../../../utils/client/completeMultipartUpload.mjs';\nimport { listParts } from '../../../utils/client/listParts.mjs';\nimport '../../../utils/client/abortMultipartUpload.mjs';\nimport '../../../utils/client/copyObject.mjs';\nimport '../../../utils/client/headObject.mjs';\nimport '../../../utils/client/deleteObject.mjs';\nimport '../../../../../errors/types/validation.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport { logger } from '../../../../../utils/logger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst ONE_HOUR = 1000 * 60 * 60;\n/**\n * Find the cached multipart upload id and get the parts that have been uploaded\n * with ListParts API. If the cached upload is expired(1 hour), return null.\n */\nconst findCachedUploadParts = async ({\n  cacheKey,\n  s3Config,\n  bucket,\n  finalKey\n}) => {\n  const cachedUploads = await listCachedUploadTasks(defaultStorage);\n  if (!cachedUploads[cacheKey] || cachedUploads[cacheKey].lastTouched < Date.now() - ONE_HOUR // Uploads are cached for 1 hour\n  ) {\n    return null;\n  }\n  const cachedUpload = cachedUploads[cacheKey];\n  cachedUpload.lastTouched = Date.now();\n  await defaultStorage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(cachedUploads));\n  try {\n    const {\n      Parts = []\n    } = await listParts(s3Config, {\n      Bucket: bucket,\n      Key: finalKey,\n      UploadId: cachedUpload.uploadId\n    });\n    return {\n      parts: Parts,\n      uploadId: cachedUpload.uploadId\n    };\n  } catch (e) {\n    logger.debug('failed to list cached parts, removing cached upload.');\n    await removeCachedUpload(cacheKey);\n    return null;\n  }\n};\nconst listCachedUploadTasks = async kvStorage => {\n  try {\n    return JSON.parse((await kvStorage.getItem(UPLOADS_STORAGE_KEY)) ?? '{}');\n  } catch (e) {\n    logger.debug('failed to parse cached uploads record.');\n    return {};\n  }\n};\n/**\n * Get the cache key of a multipart upload. Data source cached by different: size, content type, bucket, access level,\n * key. If the data source is a File instance, the upload is additionally indexed by file name and last modified time.\n * So the library always created a new multipart upload if the file is modified.\n */\nconst getUploadsCacheKey = ({\n  file,\n  size,\n  contentType,\n  bucket,\n  accessLevel,\n  key\n}) => {\n  const resolvedContentType = contentType ?? file?.type ?? 'application/octet-stream';\n  const levelStr = accessLevel === 'guest' ? 'public' : accessLevel;\n  const baseId = `${size}_${resolvedContentType}_${bucket}_${levelStr}_${key}`;\n  if (file) {\n    return `${file.name}_${file.lastModified}_${baseId}`;\n  } else {\n    return baseId;\n  }\n};\nconst cacheMultipartUpload = async (cacheKey, fileMetadata) => {\n  const cachedUploads = await listCachedUploadTasks(defaultStorage);\n  cachedUploads[cacheKey] = {\n    ...fileMetadata,\n    lastTouched: Date.now()\n  };\n  await defaultStorage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(cachedUploads));\n};\nconst removeCachedUpload = async cacheKey => {\n  const cachedUploads = await listCachedUploadTasks(defaultStorage);\n  delete cachedUploads[cacheKey];\n  await defaultStorage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(cachedUploads));\n};\nexport { cacheMultipartUpload, findCachedUploadParts, getUploadsCacheKey, removeCachedUpload };","map":{"version":3,"names":["ONE_HOUR","findCachedUploadParts","cacheKey","s3Config","bucket","finalKey","cachedUploads","listCachedUploadTasks","defaultStorage","lastTouched","Date","now","cachedUpload","setItem","UPLOADS_STORAGE_KEY","JSON","stringify","Parts","listParts","Bucket","Key","UploadId","uploadId","parts","e","logger","debug","removeCachedUpload","kvStorage","parse","getItem","getUploadsCacheKey","file","size","contentType","accessLevel","key","resolvedContentType","type","levelStr","baseId","name","lastModified","cacheMultipartUpload","fileMetadata"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\uploadData\\multipart\\uploadCache.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { defaultStorage, } from '@aws-amplify/core';\nimport { UPLOADS_STORAGE_KEY } from '../../../utils/constants';\nimport { listParts } from '../../../utils/client';\nimport { logger } from '../../../../../utils';\nconst ONE_HOUR = 1000 * 60 * 60;\n/**\n * Find the cached multipart upload id and get the parts that have been uploaded\n * with ListParts API. If the cached upload is expired(1 hour), return null.\n */\nexport const findCachedUploadParts = async ({ cacheKey, s3Config, bucket, finalKey, }) => {\n    const cachedUploads = await listCachedUploadTasks(defaultStorage);\n    if (!cachedUploads[cacheKey] ||\n        cachedUploads[cacheKey].lastTouched < Date.now() - ONE_HOUR // Uploads are cached for 1 hour\n    ) {\n        return null;\n    }\n    const cachedUpload = cachedUploads[cacheKey];\n    cachedUpload.lastTouched = Date.now();\n    await defaultStorage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(cachedUploads));\n    try {\n        const { Parts = [] } = await listParts(s3Config, {\n            Bucket: bucket,\n            Key: finalKey,\n            UploadId: cachedUpload.uploadId,\n        });\n        return {\n            parts: Parts,\n            uploadId: cachedUpload.uploadId,\n        };\n    }\n    catch (e) {\n        logger.debug('failed to list cached parts, removing cached upload.');\n        await removeCachedUpload(cacheKey);\n        return null;\n    }\n};\nconst listCachedUploadTasks = async (kvStorage) => {\n    try {\n        return JSON.parse((await kvStorage.getItem(UPLOADS_STORAGE_KEY)) ?? '{}');\n    }\n    catch (e) {\n        logger.debug('failed to parse cached uploads record.');\n        return {};\n    }\n};\n/**\n * Get the cache key of a multipart upload. Data source cached by different: size, content type, bucket, access level,\n * key. If the data source is a File instance, the upload is additionally indexed by file name and last modified time.\n * So the library always created a new multipart upload if the file is modified.\n */\nexport const getUploadsCacheKey = ({ file, size, contentType, bucket, accessLevel, key, }) => {\n    const resolvedContentType = contentType ?? file?.type ?? 'application/octet-stream';\n    const levelStr = accessLevel === 'guest' ? 'public' : accessLevel;\n    const baseId = `${size}_${resolvedContentType}_${bucket}_${levelStr}_${key}`;\n    if (file) {\n        return `${file.name}_${file.lastModified}_${baseId}`;\n    }\n    else {\n        return baseId;\n    }\n};\nexport const cacheMultipartUpload = async (cacheKey, fileMetadata) => {\n    const cachedUploads = await listCachedUploadTasks(defaultStorage);\n    cachedUploads[cacheKey] = {\n        ...fileMetadata,\n        lastTouched: Date.now(),\n    };\n    await defaultStorage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(cachedUploads));\n};\nexport const removeCachedUpload = async (cacheKey) => {\n    const cachedUploads = await listCachedUploadTasks(defaultStorage);\n    delete cachedUploads[cacheKey];\n    await defaultStorage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(cachedUploads));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}