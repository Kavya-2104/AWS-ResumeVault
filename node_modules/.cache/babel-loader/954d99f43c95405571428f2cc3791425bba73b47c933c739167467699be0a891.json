{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Track the progress from multiple concurrent uploads, and invoke the onProgress callback.\n *\n * @internal\n */\nconst getConcurrentUploadsProgressTracker = ({\n  size,\n  onProgress\n}) => {\n  const transferredBytesPerListener = [];\n  const getTransferredBytes = () => transferredBytesPerListener.reduce((acc, transferredBytes) => acc + transferredBytes, 0);\n  return {\n    getOnProgressListener: () => {\n      transferredBytesPerListener.push(0);\n      const listenerIndex = transferredBytesPerListener.length - 1;\n      return event => {\n        const {\n          transferredBytes\n        } = event;\n        transferredBytesPerListener[listenerIndex] = transferredBytes;\n        onProgress?.({\n          transferredBytes: getTransferredBytes(),\n          totalBytes: size\n        });\n      };\n    }\n  };\n};\nexport { getConcurrentUploadsProgressTracker };","map":{"version":3,"names":["getConcurrentUploadsProgressTracker","size","onProgress","transferredBytesPerListener","getTransferredBytes","reduce","acc","transferredBytes","getOnProgressListener","push","listenerIndex","length","event","totalBytes"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\uploadData\\multipart\\progressTracker.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Track the progress from multiple concurrent uploads, and invoke the onProgress callback.\n *\n * @internal\n */\nexport const getConcurrentUploadsProgressTracker = ({ size, onProgress, }) => {\n    const transferredBytesPerListener = [];\n    const getTransferredBytes = () => transferredBytesPerListener.reduce((acc, transferredBytes) => acc + transferredBytes, 0);\n    return {\n        getOnProgressListener: () => {\n            transferredBytesPerListener.push(0);\n            const listenerIndex = transferredBytesPerListener.length - 1;\n            return (event) => {\n                const { transferredBytes } = event;\n                transferredBytesPerListener[listenerIndex] = transferredBytes;\n                onProgress?.({\n                    transferredBytes: getTransferredBytes(),\n                    totalBytes: size,\n                });\n            };\n        },\n    };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,mCAAmC,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAU,CAAG,KAAK;EAC1E,MAAMC,2BAA2B,GAAG,EAAE;EACtC,MAAMC,mBAAmB,GAAGA,CAAA,KAAMD,2BAA2B,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,gBAAgB,KAAKD,GAAG,GAAGC,gBAAgB,EAAE,CAAC,CAAC;EAC1H,OAAO;IACHC,qBAAqB,EAAEA,CAAA,KAAM;MACzBL,2BAA2B,CAACM,IAAI,CAAC,CAAC,CAAC;MACnC,MAAMC,aAAa,GAAGP,2BAA2B,CAACQ,MAAM,GAAG,CAAC;MAC5D,OAAQC,KAAK,IAAK;QACd,MAAM;UAAEL;QAAgB,CAAE,GAAGK,KAAK;QAClCT,2BAA2B,CAACO,aAAa,CAAC,GAAGH,gBAAgB;QAC7DL,UAAU,GAAG;UACTK,gBAAgB,EAAEH,mBAAmB,EAAE;UACvCS,UAAU,EAAEZ;QAChC,CAAiB,CAAC;MAClB,CAAa;IACb;EACA,CAAK;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}