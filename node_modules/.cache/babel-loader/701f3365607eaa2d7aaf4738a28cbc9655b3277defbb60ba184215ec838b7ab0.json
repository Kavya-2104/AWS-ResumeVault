{"ast":null,"code":"import { base64Decoder } from '../../../utils/convert/base64/base64Decoder.mjs';\nimport '../../../types/errors.mjs';\nimport '../../../errors/errorHelpers.mjs';\nimport { assert, AuthConfigurationErrorCode } from './errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction assertTokenProviderConfig(cognitoConfig) {\n  let assertionValid = true; // assume valid until otherwise proveed\n  if (!cognitoConfig) {\n    assertionValid = false;\n  } else {\n    assertionValid = !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;\n  }\n  assert(assertionValid, AuthConfigurationErrorCode.AuthUserPoolException);\n}\nfunction assertOAuthConfig(cognitoConfig) {\n  const validOAuthConfig = !!cognitoConfig?.loginWith?.oauth?.domain && !!cognitoConfig?.loginWith?.oauth?.redirectSignOut && !!cognitoConfig?.loginWith?.oauth?.redirectSignIn && !!cognitoConfig?.loginWith?.oauth?.responseType;\n  assert(validOAuthConfig, AuthConfigurationErrorCode.OAuthNotConfigureException);\n}\nfunction assertIdentityPoolIdConfig(cognitoConfig) {\n  const validConfig = !!cognitoConfig?.identityPoolId;\n  assert(validConfig, AuthConfigurationErrorCode.InvalidIdentityPoolIdException);\n}\nfunction decodeJWT(token) {\n  const tokenParts = token.split('.');\n  if (tokenParts.length !== 3) {\n    throw new Error('Invalid token');\n  }\n  try {\n    const base64WithUrlSafe = tokenParts[1];\n    const base64 = base64WithUrlSafe.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonStr = decodeURIComponent(base64Decoder.convert(base64).split('').map(char => `%${`00${char.charCodeAt(0).toString(16)}`.slice(-2)}`).join(''));\n    const payload = JSON.parse(jsonStr);\n    return {\n      toString: () => token,\n      payload\n    };\n  } catch (err) {\n    throw new Error('Invalid token payload');\n  }\n}\nexport { assertIdentityPoolIdConfig, assertOAuthConfig, assertTokenProviderConfig, decodeJWT };","map":{"version":3,"names":["assertTokenProviderConfig","cognitoConfig","assertionValid","userPoolId","userPoolClientId","assert","AuthConfigurationErrorCode","AuthUserPoolException","assertOAuthConfig","validOAuthConfig","loginWith","oauth","domain","redirectSignOut","redirectSignIn","responseType","OAuthNotConfigureException","assertIdentityPoolIdConfig","validConfig","identityPoolId","InvalidIdentityPoolIdException","decodeJWT","token","tokenParts","split","length","Error","base64WithUrlSafe","base64","replace","jsonStr","decodeURIComponent","base64Decoder","convert","map","char","charCodeAt","toString","slice","join","payload","JSON","parse","err"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\singleton\\Auth\\utils\\index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { base64Decoder } from '../../../utils/convert';\nimport { AuthConfigurationErrorCode, assert } from './errorHelpers';\nexport function assertTokenProviderConfig(cognitoConfig) {\n    let assertionValid = true; // assume valid until otherwise proveed\n    if (!cognitoConfig) {\n        assertionValid = false;\n    }\n    else {\n        assertionValid =\n            !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;\n    }\n    assert(assertionValid, AuthConfigurationErrorCode.AuthUserPoolException);\n}\nexport function assertOAuthConfig(cognitoConfig) {\n    const validOAuthConfig = !!cognitoConfig?.loginWith?.oauth?.domain &&\n        !!cognitoConfig?.loginWith?.oauth?.redirectSignOut &&\n        !!cognitoConfig?.loginWith?.oauth?.redirectSignIn &&\n        !!cognitoConfig?.loginWith?.oauth?.responseType;\n    assert(validOAuthConfig, AuthConfigurationErrorCode.OAuthNotConfigureException);\n}\nexport function assertIdentityPoolIdConfig(cognitoConfig) {\n    const validConfig = !!cognitoConfig?.identityPoolId;\n    assert(validConfig, AuthConfigurationErrorCode.InvalidIdentityPoolIdException);\n}\nexport function decodeJWT(token) {\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3) {\n        throw new Error('Invalid token');\n    }\n    try {\n        const base64WithUrlSafe = tokenParts[1];\n        const base64 = base64WithUrlSafe.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonStr = decodeURIComponent(base64Decoder\n            .convert(base64)\n            .split('')\n            .map(char => `%${`00${char.charCodeAt(0).toString(16)}`.slice(-2)}`)\n            .join(''));\n        const payload = JSON.parse(jsonStr);\n        return {\n            toString: () => token,\n            payload,\n        };\n    }\n    catch (err) {\n        throw new Error('Invalid token payload');\n    }\n}\n"],"mappings":";;;;;AAAA;AACA;AAGO,SAASA,yBAAyBA,CAACC,aAAa,EAAE;EACrD,IAAIC,cAAc,GAAG,IAAI,CAAC;EAC1B,IAAI,CAACD,aAAa,EAAE;IAChBC,cAAc,GAAG,KAAK;EAC9B,CAAK,MACI;IACDA,cAAc,GACV,CAAC,CAACD,aAAa,CAACE,UAAU,IAAI,CAAC,CAACF,aAAa,CAACG,gBAAgB;EAC1E;EACIC,MAAM,CAACH,cAAc,EAAEI,0BAA0B,CAACC,qBAAqB,CAAC;AAC5E;AACO,SAASC,iBAAiBA,CAACP,aAAa,EAAE;EAC7C,MAAMQ,gBAAgB,GAAG,CAAC,CAACR,aAAa,EAAES,SAAS,EAAEC,KAAK,EAAEC,MAAM,IAC9D,CAAC,CAACX,aAAa,EAAES,SAAS,EAAEC,KAAK,EAAEE,eAAe,IAClD,CAAC,CAACZ,aAAa,EAAES,SAAS,EAAEC,KAAK,EAAEG,cAAc,IACjD,CAAC,CAACb,aAAa,EAAES,SAAS,EAAEC,KAAK,EAAEI,YAAY;EACnDV,MAAM,CAACI,gBAAgB,EAAEH,0BAA0B,CAACU,0BAA0B,CAAC;AACnF;AACO,SAASC,0BAA0BA,CAAChB,aAAa,EAAE;EACtD,MAAMiB,WAAW,GAAG,CAAC,CAACjB,aAAa,EAAEkB,cAAc;EACnDd,MAAM,CAACa,WAAW,EAAEZ,0BAA0B,CAACc,8BAA8B,CAAC;AAClF;AACO,SAASC,SAASA,CAACC,KAAK,EAAE;EAC7B,MAAMC,UAAU,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EACnC,IAAID,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EACxC;EACI,IAAI;IACA,MAAMC,iBAAiB,GAAGJ,UAAU,CAAC,CAAC,CAAC;IACvC,MAAMK,MAAM,GAAGD,iBAAiB,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IACtE,MAAMC,OAAO,GAAGC,kBAAkB,CAACC,aAAa,CAC3CC,OAAO,CAACL,MAAM,CAAC,CACfJ,KAAK,CAAC,EAAE,CAAC,CACTU,GAAG,CAACC,IAAI,IAAK,IAAI,KAAIA,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE,EAAC,CAAC,CACnEC,IAAI,CAAC,EAAE,CAAC,CAAC;IACd,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACZ,OAAO,CAAC;IACnC,OAAO;MACHO,QAAQ,EAAEA,CAAA,KAAMf,KAAK;MACrBkB;IACZ,CAAS;EACT,CAAK,CACD,OAAOG,GAAG,EAAE;IACR,MAAM,IAAIjB,KAAK,CAAC,uBAAuB,CAAC;EAChD;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}