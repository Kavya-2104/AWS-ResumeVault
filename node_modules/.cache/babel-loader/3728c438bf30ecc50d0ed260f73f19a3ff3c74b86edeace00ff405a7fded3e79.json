{"ast":null,"code":"import { getActorState } from '../actor.mjs';\nimport { defaultFormFieldOptions } from '../constants.mjs';\nimport { isAuthFieldWithDefaults } from '../form.mjs';\nimport { getPrimaryAlias } from './utils.mjs';\n\n/**\n * This file contains helpers that generate default formFields for each screen\n */\nconst DEFAULT_COUNTRY_CODE = '+1';\n/** Helper function that gets the default formField for given field name */\nconst getDefaultFormField = fieldName => {\n  let options = defaultFormFieldOptions[fieldName];\n  const {\n    type\n  } = options;\n  if (type === 'tel') {\n    options = {\n      ...options,\n      dialCode: DEFAULT_COUNTRY_CODE\n    };\n  }\n  return options;\n};\n// Helper function that returns default form field for configured primary alias\nconst getAliasDefaultFormField = state => {\n  const primaryAlias = getPrimaryAlias(state);\n  return {\n    ...getDefaultFormField(primaryAlias),\n    autocomplete: 'username'\n  };\n};\n/** Reusable confirmation code form fields. */\nconst getConfirmationCodeFormFields = state => ({\n  confirmation_code: {\n    ...getDefaultFormField('confirmation_code'),\n    label: 'Code *',\n    placeholder: 'Code'\n  }\n});\nconst getSignInFormFields = state => ({\n  username: {\n    ...getAliasDefaultFormField(state)\n  },\n  password: {\n    ...getDefaultFormField('password'),\n    autocomplete: 'current-password'\n  }\n});\nconst getSignUpFormFields = state => {\n  const {\n    loginMechanisms,\n    signUpAttributes\n  } = state.context.config;\n  const primaryAlias = getPrimaryAlias(state);\n  /**\n   * @migration signUp Fields created here\n   */\n  const fieldNames = Array.from(new Set([...loginMechanisms, 'password', 'confirm_password', ...signUpAttributes]));\n  const formField = {};\n  for (const fieldName of fieldNames) {\n    if (isAuthFieldWithDefaults(fieldName)) {\n      const fieldAttrs = fieldName === primaryAlias ? getAliasDefaultFormField(state) : getDefaultFormField(fieldName);\n      formField[fieldName] = {\n        ...fieldAttrs\n      };\n    } else {\n      // There's a `custom:*` attribute or one we don't already have an implementation for\n      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize SignUp FormFields to add your own.`);\n    }\n  }\n  return formField;\n};\nconst getConfirmSignUpFormFields = state => ({\n  confirmation_code: {\n    ...getDefaultFormField('confirmation_code'),\n    placeholder: 'Enter your code'\n  }\n});\nconst getForgotPasswordFormFields = state => {\n  const primaryAlias = getPrimaryAlias(state);\n  const {\n    label\n  } = defaultFormFieldOptions[primaryAlias];\n  return {\n    username: {\n      ...getAliasDefaultFormField(state),\n      label: `Enter your ${label.toLowerCase()}`,\n      placeholder: `Enter your ${label.toLowerCase()}`\n    }\n  };\n};\nconst getConfirmResetPasswordFormFields = state => ({\n  ...getConfirmationCodeFormFields(),\n  password: {\n    ...getDefaultFormField('password'),\n    label: 'New Password',\n    placeholder: 'New Password'\n  },\n  confirm_password: {\n    ...getDefaultFormField('confirm_password'),\n    label: 'Confirm Password',\n    placeholder: 'Confirm Password'\n  }\n});\nconst getForceNewPasswordFormFields = state => {\n  const actorState = getActorState(state);\n  const {\n    missingAttributes\n  } = actorState.context;\n  const fieldNames = Array.from(new Set(['password', 'confirm_password', ...(missingAttributes ?? [])]));\n  const formField = {};\n  for (const fieldName of fieldNames) {\n    if (isAuthFieldWithDefaults(fieldName)) {\n      formField[fieldName] = {\n        ...getDefaultFormField(fieldName)\n      };\n    } else {\n      // There's a `custom:*` attribute or one we don't already have an implementation for\n      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize ForceNewPassword FormFields to add your own.`);\n    }\n  }\n  return formField;\n};\n/** Collect all the defaultFormFields getters */\nconst defaultFormFieldsGetters = {\n  signIn: getSignInFormFields,\n  signUp: getSignUpFormFields,\n  confirmSignUp: getConfirmSignUpFormFields,\n  confirmSignIn: getConfirmationCodeFormFields,\n  forceNewPassword: getForceNewPasswordFormFields,\n  forgotPassword: getForgotPasswordFormFields,\n  confirmResetPassword: getConfirmResetPasswordFormFields,\n  confirmVerifyUser: getConfirmationCodeFormFields,\n  setupTotp: getConfirmationCodeFormFields\n};\nexport { DEFAULT_COUNTRY_CODE, defaultFormFieldsGetters, getAliasDefaultFormField };","map":{"version":3,"names":["getActorState","defaultFormFieldOptions","isAuthFieldWithDefaults","getPrimaryAlias","DEFAULT_COUNTRY_CODE","getDefaultFormField","fieldName","options","type","dialCode","getAliasDefaultFormField","state","primaryAlias","autocomplete","getConfirmationCodeFormFields","confirmation_code","label","placeholder","getSignInFormFields","username","password","getSignUpFormFields","loginMechanisms","signUpAttributes","context","config","fieldNames","Array","from","Set","formField","fieldAttrs","console","debug","getConfirmSignUpFormFields","getForgotPasswordFormFields","toLowerCase","getConfirmResetPasswordFormFields","confirm_password","getForceNewPasswordFormFields","actorState","missingAttributes","defaultFormFieldsGetters","signIn","signUp","confirmSignUp","confirmSignIn","forceNewPassword","forgotPassword","confirmResetPassword","confirmVerifyUser","setupTotp"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/defaults.mjs"],"sourcesContent":["import { getActorState } from '../actor.mjs';\nimport { defaultFormFieldOptions } from '../constants.mjs';\nimport { isAuthFieldWithDefaults } from '../form.mjs';\nimport { getPrimaryAlias } from './utils.mjs';\n\n/**\n * This file contains helpers that generate default formFields for each screen\n */\nconst DEFAULT_COUNTRY_CODE = '+1';\n/** Helper function that gets the default formField for given field name */\nconst getDefaultFormField = (fieldName) => {\n    let options = defaultFormFieldOptions[fieldName];\n    const { type } = options;\n    if (type === 'tel') {\n        options = { ...options, dialCode: DEFAULT_COUNTRY_CODE };\n    }\n    return options;\n};\n// Helper function that returns default form field for configured primary alias\nconst getAliasDefaultFormField = (state) => {\n    const primaryAlias = getPrimaryAlias(state);\n    return {\n        ...getDefaultFormField(primaryAlias),\n        autocomplete: 'username',\n    };\n};\n/** Reusable confirmation code form fields. */\nconst getConfirmationCodeFormFields = (state) => ({\n    confirmation_code: {\n        ...getDefaultFormField('confirmation_code'),\n        label: 'Code *',\n        placeholder: 'Code',\n    },\n});\nconst getSignInFormFields = (state) => ({\n    username: { ...getAliasDefaultFormField(state) },\n    password: {\n        ...getDefaultFormField('password'),\n        autocomplete: 'current-password',\n    },\n});\nconst getSignUpFormFields = (state) => {\n    const { loginMechanisms, signUpAttributes } = state.context.config;\n    const primaryAlias = getPrimaryAlias(state);\n    /**\n     * @migration signUp Fields created here\n     */\n    const fieldNames = Array.from(new Set([\n        ...loginMechanisms,\n        'password',\n        'confirm_password',\n        ...signUpAttributes,\n    ]));\n    const formField = {};\n    for (const fieldName of fieldNames) {\n        if (isAuthFieldWithDefaults(fieldName)) {\n            const fieldAttrs = fieldName === primaryAlias\n                ? getAliasDefaultFormField(state)\n                : getDefaultFormField(fieldName);\n            formField[fieldName] = { ...fieldAttrs };\n        }\n        else {\n            // There's a `custom:*` attribute or one we don't already have an implementation for\n            console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize SignUp FormFields to add your own.`);\n        }\n    }\n    return formField;\n};\nconst getConfirmSignUpFormFields = (state) => ({\n    confirmation_code: {\n        ...getDefaultFormField('confirmation_code'),\n        placeholder: 'Enter your code',\n    },\n});\nconst getForgotPasswordFormFields = (state) => {\n    const primaryAlias = getPrimaryAlias(state);\n    const { label } = defaultFormFieldOptions[primaryAlias];\n    return {\n        username: {\n            ...getAliasDefaultFormField(state),\n            label: `Enter your ${label.toLowerCase()}`,\n            placeholder: `Enter your ${label.toLowerCase()}`,\n        },\n    };\n};\nconst getConfirmResetPasswordFormFields = (state) => ({\n    ...getConfirmationCodeFormFields(),\n    password: {\n        ...getDefaultFormField('password'),\n        label: 'New Password',\n        placeholder: 'New Password',\n    },\n    confirm_password: {\n        ...getDefaultFormField('confirm_password'),\n        label: 'Confirm Password',\n        placeholder: 'Confirm Password',\n    },\n});\nconst getForceNewPasswordFormFields = (state) => {\n    const actorState = getActorState(state);\n    const { missingAttributes } = actorState.context;\n    const fieldNames = Array.from(new Set([\n        'password',\n        'confirm_password',\n        ...(missingAttributes ?? []),\n    ]));\n    const formField = {};\n    for (const fieldName of fieldNames) {\n        if (isAuthFieldWithDefaults(fieldName)) {\n            formField[fieldName] = { ...getDefaultFormField(fieldName) };\n        }\n        else {\n            // There's a `custom:*` attribute or one we don't already have an implementation for\n            console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize ForceNewPassword FormFields to add your own.`);\n        }\n    }\n    return formField;\n};\n/** Collect all the defaultFormFields getters */\nconst defaultFormFieldsGetters = {\n    signIn: getSignInFormFields,\n    signUp: getSignUpFormFields,\n    confirmSignUp: getConfirmSignUpFormFields,\n    confirmSignIn: getConfirmationCodeFormFields,\n    forceNewPassword: getForceNewPasswordFormFields,\n    forgotPassword: getForgotPasswordFormFields,\n    confirmResetPassword: getConfirmResetPasswordFormFields,\n    confirmVerifyUser: getConfirmationCodeFormFields,\n    setupTotp: getConfirmationCodeFormFields,\n};\n\nexport { DEFAULT_COUNTRY_CODE, defaultFormFieldsGetters, getAliasDefaultFormField };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}