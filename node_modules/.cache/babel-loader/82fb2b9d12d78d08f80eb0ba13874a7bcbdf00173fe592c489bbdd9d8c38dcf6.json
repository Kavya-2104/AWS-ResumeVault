{"ast":null,"code":"import { getCredentialScope } from './getCredentialScope.mjs';\nimport { getFormattedDates } from './getFormattedDates.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Extracts common values used for signing both requests and urls.\n *\n * @param options `SignRequestOptions` object containing values used to construct the signature.\n * @returns Common `SigningValues` used for signing.\n *\n * @internal\n */\nconst getSigningValues = ({\n  credentials,\n  signingDate = new Date(),\n  signingRegion,\n  signingService,\n  uriEscapePath = true\n}) => {\n  // get properties from credentials\n  const {\n    accessKeyId,\n    secretAccessKey,\n    sessionToken\n  } = credentials;\n  // get formatted dates for signing\n  const {\n    longDate,\n    shortDate\n  } = getFormattedDates(signingDate);\n  // copy header and set signing properties\n  const credentialScope = getCredentialScope(shortDate, signingRegion, signingService);\n  return {\n    accessKeyId,\n    credentialScope,\n    longDate,\n    secretAccessKey,\n    sessionToken,\n    shortDate,\n    signingRegion,\n    signingService,\n    uriEscapePath\n  };\n};\nexport { getSigningValues };","map":{"version":3,"names":["getSigningValues","credentials","signingDate","Date","signingRegion","signingService","uriEscapePath","accessKeyId","secretAccessKey","sessionToken","longDate","shortDate","getFormattedDates","credentialScope","getCredentialScope"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getSigningValues.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCredentialScope } from './getCredentialScope';\nimport { getFormattedDates } from './getFormattedDates';\n/**\n * Extracts common values used for signing both requests and urls.\n *\n * @param options `SignRequestOptions` object containing values used to construct the signature.\n * @returns Common `SigningValues` used for signing.\n *\n * @internal\n */\nexport const getSigningValues = ({ credentials, signingDate = new Date(), signingRegion, signingService, uriEscapePath = true, }) => {\n    // get properties from credentials\n    const { accessKeyId, secretAccessKey, sessionToken } = credentials;\n    // get formatted dates for signing\n    const { longDate, shortDate } = getFormattedDates(signingDate);\n    // copy header and set signing properties\n    const credentialScope = getCredentialScope(shortDate, signingRegion, signingService);\n    return {\n        accessKeyId,\n        credentialScope,\n        longDate,\n        secretAccessKey,\n        sessionToken,\n        shortDate,\n        signingRegion,\n        signingService,\n        uriEscapePath,\n    };\n};\n"],"mappings":";;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,gBAAgB,GAAGA,CAAC;EAAEC,WAAW;EAAEC,WAAW,GAAG,IAAIC,IAAI,EAAE;EAAEC,aAAa;EAAEC,cAAc;EAAEC,aAAa,GAAG;AAAI,CAAG,KAAK;EACrI;EACI,MAAM;IAAEC,WAAW;IAAEC,eAAe;IAAEC;EAAY,CAAE,GAAGR,WAAW;EACtE;EACI,MAAM;IAAES,QAAQ;IAAEC;EAAS,CAAE,GAAGC,iBAAiB,CAACV,WAAW,CAAC;EAClE;EACI,MAAMW,eAAe,GAAGC,kBAAkB,CAACH,SAAS,EAAEP,aAAa,EAAEC,cAAc,CAAC;EACpF,OAAO;IACHE,WAAW;IACXM,eAAe;IACfH,QAAQ;IACRF,eAAe;IACfC,YAAY;IACZE,SAAS;IACTP,aAAa;IACbC,cAAc;IACdC;EACR,CAAK;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}