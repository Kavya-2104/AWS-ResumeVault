{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, urlSafeEncode, AuthAction } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener.mjs';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { openAuthSession } from '../../../utils/openAuthSession.mjs';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { generateCodeVerifier } from '../utils/oauth/generateCodeVerifier.mjs';\nimport { generateState } from '../utils/oauth/generateState.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../tokenProvider/tokenProvider.mjs';\nimport { getRedirectUrl } from '../utils/oauth/getRedirectUrl.mjs';\nimport { handleFailure } from '../utils/oauth/handleFailure.mjs';\nimport { completeOAuthFlow } from '../utils/oauth/completeOAuthFlow.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport { createOAuthError } from '../utils/oauth/createOAuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nasync function signInWithRedirect(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  assertOAuthConfig(authConfig);\n  oAuthStore.setAuthConfig(authConfig);\n  await assertUserNotAuthenticated();\n  let provider = 'COGNITO'; // Default\n  if (typeof input?.provider === 'string') {\n    provider = cognitoHostedUIIdentityProviderMap[input.provider];\n  } else if (input?.provider?.custom) {\n    provider = input.provider.custom;\n  }\n  return oauthSignIn({\n    oauthConfig: authConfig.loginWith.oauth,\n    clientId: authConfig.userPoolClientId,\n    provider,\n    customState: input?.customState,\n    preferPrivateSession: input?.options?.preferPrivateSession\n  });\n}\nconst oauthSignIn = async ({\n  oauthConfig,\n  provider,\n  clientId,\n  customState,\n  preferPrivateSession\n}) => {\n  const {\n    domain,\n    redirectSignIn,\n    responseType,\n    scopes\n  } = oauthConfig;\n  const randomState = generateState();\n  /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n  single-encodes/decodes url on first sign in and double-encodes/decodes url\n  when user already signed in. Using encodeURIComponent, Base32, Base64 add\n  characters % or = which on further encoding becomes unsafe. '=' create issue\n  for parsing query params.\n  Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n  const state = customState ? `${randomState}-${urlSafeEncode(customState)}` : randomState;\n  const {\n    value,\n    method,\n    toCodeChallenge\n  } = generateCodeVerifier(128);\n  const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n  oAuthStore.storeOAuthInFlight(true);\n  oAuthStore.storeOAuthState(state);\n  oAuthStore.storePKCE(value);\n  const queryString = Object.entries({\n    redirect_uri: redirectUri,\n    response_type: responseType,\n    client_id: clientId,\n    identity_provider: provider,\n    scope: scopes.join(' '),\n    state,\n    ...(responseType === 'code' && {\n      code_challenge: toCodeChallenge(),\n      code_challenge_method: method\n    })\n  }).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');\n  // TODO(v6): use URL object instead\n  const oAuthUrl = `https://${domain}/oauth2/authorize?${queryString}`;\n  // the following is effective only in react-native as openAuthSession resolves only in react-native\n  const {\n    type,\n    error,\n    url\n  } = (await openAuthSession(oAuthUrl)) ?? {};\n  try {\n    if (type === 'error') {\n      throw createOAuthError(String(error));\n    }\n    if (type === 'success' && url) {\n      await completeOAuthFlow({\n        currentUrl: url,\n        clientId,\n        domain,\n        redirectUri,\n        responseType,\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n        preferPrivateSession\n      });\n    }\n  } catch (err) {\n    await handleFailure(err);\n    // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n    throw err;\n  }\n};\nexport { signInWithRedirect };","map":{"version":3,"names":["signInWithRedirect","input","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","assertOAuthConfig","oAuthStore","setAuthConfig","assertUserNotAuthenticated","provider","cognitoHostedUIIdentityProviderMap","custom","oauthSignIn","oauthConfig","loginWith","oauth","clientId","userPoolClientId","customState","preferPrivateSession","options","domain","redirectSignIn","responseType","scopes","randomState","generateState","state","urlSafeEncode","value","method","toCodeChallenge","generateCodeVerifier","redirectUri","getRedirectUrl","storeOAuthInFlight","storeOAuthState","storePKCE","queryString","Object","entries","redirect_uri","response_type","client_id","identity_provider","scope","join","code_challenge","code_challenge_method","map","k","v","encodeURIComponent","oAuthUrl","type","error","url","openAuthSession","createOAuthError","String","completeOAuthFlow","currentUrl","userAgentValue","getAuthUserAgentValue","AuthAction","SignInWithRedirect","err","handleFailure"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\signInWithRedirect.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertOAuthConfig, assertTokenProviderConfig, urlSafeEncode, } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models';\nimport { getAuthUserAgentValue, openAuthSession } from '../../../utils';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers';\nimport { completeOAuthFlow, generateCodeVerifier, generateState, getRedirectUrl, handleFailure, oAuthStore, } from '../utils/oauth';\nimport { createOAuthError } from '../utils/oauth/createOAuthError';\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nexport async function signInWithRedirect(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    assertOAuthConfig(authConfig);\n    oAuthStore.setAuthConfig(authConfig);\n    await assertUserNotAuthenticated();\n    let provider = 'COGNITO'; // Default\n    if (typeof input?.provider === 'string') {\n        provider = cognitoHostedUIIdentityProviderMap[input.provider];\n    }\n    else if (input?.provider?.custom) {\n        provider = input.provider.custom;\n    }\n    return oauthSignIn({\n        oauthConfig: authConfig.loginWith.oauth,\n        clientId: authConfig.userPoolClientId,\n        provider,\n        customState: input?.customState,\n        preferPrivateSession: input?.options?.preferPrivateSession,\n    });\n}\nconst oauthSignIn = async ({ oauthConfig, provider, clientId, customState, preferPrivateSession, }) => {\n    const { domain, redirectSignIn, responseType, scopes } = oauthConfig;\n    const randomState = generateState();\n    /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n    single-encodes/decodes url on first sign in and double-encodes/decodes url\n    when user already signed in. Using encodeURIComponent, Base32, Base64 add\n    characters % or = which on further encoding becomes unsafe. '=' create issue\n    for parsing query params.\n    Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n    const state = customState\n        ? `${randomState}-${urlSafeEncode(customState)}`\n        : randomState;\n    const { value, method, toCodeChallenge } = generateCodeVerifier(128);\n    const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n    oAuthStore.storeOAuthInFlight(true);\n    oAuthStore.storeOAuthState(state);\n    oAuthStore.storePKCE(value);\n    const queryString = Object.entries({\n        redirect_uri: redirectUri,\n        response_type: responseType,\n        client_id: clientId,\n        identity_provider: provider,\n        scope: scopes.join(' '),\n        state,\n        ...(responseType === 'code' && {\n            code_challenge: toCodeChallenge(),\n            code_challenge_method: method,\n        }),\n    })\n        .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n        .join('&');\n    // TODO(v6): use URL object instead\n    const oAuthUrl = `https://${domain}/oauth2/authorize?${queryString}`;\n    // the following is effective only in react-native as openAuthSession resolves only in react-native\n    const { type, error, url } = (await openAuthSession(oAuthUrl, redirectSignIn, preferPrivateSession)) ??\n        {};\n    try {\n        if (type === 'error') {\n            throw createOAuthError(String(error));\n        }\n        if (type === 'success' && url) {\n            await completeOAuthFlow({\n                currentUrl: url,\n                clientId,\n                domain,\n                redirectUri,\n                responseType,\n                userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n                preferPrivateSession,\n            });\n        }\n    }\n    catch (err) {\n        await handleFailure(err);\n        // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n        throw err;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}