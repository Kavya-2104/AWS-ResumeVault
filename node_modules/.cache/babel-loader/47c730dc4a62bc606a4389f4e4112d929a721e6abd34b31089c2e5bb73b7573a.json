{"ast":null,"code":"import { calculateContentMd5 } from '../../../utils/md5.mjs';\nimport '../../../../../errors/types/validation.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport { logger } from '../../../../../utils/logger.mjs';\nimport '../../../utils/client/base.mjs';\nimport '../../../utils/client/getObject.mjs';\nimport '../../../utils/client/listObjectsV2.mjs';\nimport '../../../utils/client/putObject.mjs';\nimport '../../../utils/client/createMultipartUpload.mjs';\nimport { uploadPart } from '../../../utils/client/uploadPart.mjs';\nimport '../../../utils/client/completeMultipartUpload.mjs';\nimport '../../../utils/client/listParts.mjs';\nimport '../../../utils/client/abortMultipartUpload.mjs';\nimport '../../../utils/client/copyObject.mjs';\nimport '../../../utils/client/headObject.mjs';\nimport '../../../utils/client/deleteObject.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst uploadPartExecutor = async ({\n  dataChunkerGenerator,\n  completedPartNumberSet,\n  s3Config,\n  abortSignal,\n  bucket,\n  finalKey,\n  uploadId,\n  onPartUploadCompletion,\n  onProgress,\n  isObjectLockEnabled\n}) => {\n  let transferredBytes = 0;\n  for (const {\n    data,\n    partNumber,\n    size\n  } of dataChunkerGenerator) {\n    if (abortSignal.aborted) {\n      logger.debug('upload executor aborted.');\n      break;\n    }\n    if (completedPartNumberSet.has(partNumber)) {\n      logger.debug(`part ${partNumber} already uploaded.`);\n      transferredBytes += size;\n      onProgress?.({\n        transferredBytes\n      });\n    } else {\n      // handle cancel error\n      const {\n        ETag: eTag\n      } = await uploadPart({\n        ...s3Config,\n        abortSignal,\n        onUploadProgress: event => {\n          const {\n            transferredBytes: currentPartTransferredBytes\n          } = event;\n          onProgress?.({\n            transferredBytes: transferredBytes + currentPartTransferredBytes\n          });\n        }\n      }, {\n        Bucket: bucket,\n        Key: finalKey,\n        UploadId: uploadId,\n        Body: data,\n        PartNumber: partNumber,\n        ContentMD5: isObjectLockEnabled ? await calculateContentMd5(data) : undefined\n      });\n      transferredBytes += size;\n      // eTag will always be set even the S3 model interface marks it as optional.\n      onPartUploadCompletion(partNumber, eTag);\n    }\n  }\n};\nexport { uploadPartExecutor };","map":{"version":3,"names":["uploadPartExecutor","dataChunkerGenerator","completedPartNumberSet","s3Config","abortSignal","bucket","finalKey","uploadId","onPartUploadCompletion","onProgress","isObjectLockEnabled","transferredBytes","data","partNumber","size","aborted","logger","debug","has","ETag","eTag","uploadPart","onUploadProgress","event","currentPartTransferredBytes","Bucket","Key","UploadId","Body","PartNumber","ContentMD5","calculateContentMd5","undefined"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\uploadData\\multipart\\uploadPartExecutor.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { calculateContentMd5 } from '../../../utils';\nimport { uploadPart } from '../../../utils/client';\nimport { logger } from '../../../../../utils';\nexport const uploadPartExecutor = async ({ dataChunkerGenerator, completedPartNumberSet, s3Config, abortSignal, bucket, finalKey, uploadId, onPartUploadCompletion, onProgress, isObjectLockEnabled, }) => {\n    let transferredBytes = 0;\n    for (const { data, partNumber, size } of dataChunkerGenerator) {\n        if (abortSignal.aborted) {\n            logger.debug('upload executor aborted.');\n            break;\n        }\n        if (completedPartNumberSet.has(partNumber)) {\n            logger.debug(`part ${partNumber} already uploaded.`);\n            transferredBytes += size;\n            onProgress?.({\n                transferredBytes,\n            });\n        }\n        else {\n            // handle cancel error\n            const { ETag: eTag } = await uploadPart({\n                ...s3Config,\n                abortSignal,\n                onUploadProgress: (event) => {\n                    const { transferredBytes: currentPartTransferredBytes } = event;\n                    onProgress?.({\n                        transferredBytes: transferredBytes + currentPartTransferredBytes,\n                    });\n                },\n            }, {\n                Bucket: bucket,\n                Key: finalKey,\n                UploadId: uploadId,\n                Body: data,\n                PartNumber: partNumber,\n                ContentMD5: isObjectLockEnabled\n                    ? await calculateContentMd5(data)\n                    : undefined,\n            });\n            transferredBytes += size;\n            // eTag will always be set even the S3 model interface marks it as optional.\n            onPartUploadCompletion(partNumber, eTag);\n        }\n    }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAIY,MAACA,kBAAkB,GAAG,MAAAA,CAAO;EAAEC,oBAAoB;EAAEC,sBAAsB;EAAEC,QAAQ;EAAEC,WAAW;EAAEC,MAAM;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,sBAAsB;EAAEC,UAAU;EAAEC;AAAmB,CAAG,KAAK;EACvM,IAAIC,gBAAgB,GAAG,CAAC;EACxB,KAAK,MAAM;IAAEC,IAAI;IAAEC,UAAU;IAAEC;EAAI,CAAE,IAAIb,oBAAoB,EAAE;IAC3D,IAAIG,WAAW,CAACW,OAAO,EAAE;MACrBC,MAAM,CAACC,KAAK,CAAC,0BAA0B,CAAC;MACxC;IACZ;IACQ,IAAIf,sBAAsB,CAACgB,GAAG,CAACL,UAAU,CAAC,EAAE;MACxCG,MAAM,CAACC,KAAK,CAAE,QAAOJ,UAAW,oBAAmB,CAAC;MACpDF,gBAAgB,IAAIG,IAAI;MACxBL,UAAU,GAAG;QACTE;MAChB,CAAa,CAAC;IACd,CAAS,MACI;MACb;MACY,MAAM;QAAEQ,IAAI,EAAEC;MAAI,CAAE,GAAG,MAAMC,UAAU,CAAC;QACpC,GAAGlB,QAAQ;QACXC,WAAW;QACXkB,gBAAgB,EAAGC,KAAK,IAAK;UACzB,MAAM;YAAEZ,gBAAgB,EAAEa;UAA2B,CAAE,GAAGD,KAAK;UAC/Dd,UAAU,GAAG;YACTE,gBAAgB,EAAEA,gBAAgB,GAAGa;UAC7D,CAAqB,CAAC;QACtB;MACA,CAAa,EAAE;QACCC,MAAM,EAAEpB,MAAM;QACdqB,GAAG,EAAEpB,QAAQ;QACbqB,QAAQ,EAAEpB,QAAQ;QAClBqB,IAAI,EAAEhB,IAAI;QACViB,UAAU,EAAEhB,UAAU;QACtBiB,UAAU,EAAEpB,mBAAmB,GACzB,MAAMqB,mBAAmB,CAACnB,IAAI,CAAC,GAC/BoB;MACtB,CAAa,CAAC;MACFrB,gBAAgB,IAAIG,IAAI;MACpC;MACYN,sBAAsB,CAACK,UAAU,EAAEO,IAAI,CAAC;IACpD;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}