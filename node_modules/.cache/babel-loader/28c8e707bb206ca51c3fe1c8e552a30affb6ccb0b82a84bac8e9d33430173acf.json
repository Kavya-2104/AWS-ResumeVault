{"ast":null,"code":"import { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore.mjs';\nimport { OAuthStorageKeys } from './types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst V5_HOSTED_UI_KEY = 'amplify-signin-with-hostedUI';\nconst name = 'CognitoIdentityServiceProvider';\nclass DefaultOAuthStore {\n  constructor(keyValueStorage) {\n    this.keyValueStorage = keyValueStorage;\n  }\n  async clearOAuthInflightData() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await Promise.all([this.keyValueStorage.removeItem(authKeys.inflightOAuth), this.keyValueStorage.removeItem(authKeys.oauthPKCE), this.keyValueStorage.removeItem(authKeys.oauthState)]);\n  }\n  async clearOAuthData() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await this.clearOAuthInflightData();\n    await this.keyValueStorage.removeItem(V5_HOSTED_UI_KEY); // remove in case a customer migrated an App from v5 to v6\n    return this.keyValueStorage.removeItem(authKeys.oauthSignIn);\n  }\n  loadOAuthState() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.getItem(authKeys.oauthState);\n  }\n  storeOAuthState(state) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.setItem(authKeys.oauthState, state);\n  }\n  loadPKCE() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.getItem(authKeys.oauthPKCE);\n  }\n  storePKCE(pkce) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.setItem(authKeys.oauthPKCE, pkce);\n  }\n  setAuthConfig(authConfigParam) {\n    this.cognitoConfig = authConfigParam;\n  }\n  async loadOAuthInFlight() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return (await this.keyValueStorage.getItem(authKeys.inflightOAuth)) === 'true';\n  }\n  async storeOAuthInFlight(inflight) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await this.keyValueStorage.setItem(authKeys.inflightOAuth, `${inflight}`);\n  }\n  async loadOAuthSignIn() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    const isLegacyHostedUISignIn = await this.keyValueStorage.getItem(V5_HOSTED_UI_KEY);\n    const [isOAuthSignIn, preferPrivateSession] = (await this.keyValueStorage.getItem(authKeys.oauthSignIn))?.split(',') ?? [];\n    return {\n      isOAuthSignIn: isOAuthSignIn === 'true' || isLegacyHostedUISignIn === 'true',\n      preferPrivateSession: preferPrivateSession === 'true'\n    };\n  }\n  async storeOAuthSignIn(oauthSignIn, preferPrivateSession = false) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await this.keyValueStorage.setItem(authKeys.oauthSignIn, `${oauthSignIn},${preferPrivateSession}`);\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(OAuthStorageKeys)(provider, identifier);\n};\nexport { DefaultOAuthStore };","map":{"version":3,"names":["V5_HOSTED_UI_KEY","name","DefaultOAuthStore","constructor","keyValueStorage","clearOAuthInflightData","assertTokenProviderConfig","cognitoConfig","authKeys","createKeysForAuthStorage","userPoolClientId","Promise","all","removeItem","inflightOAuth","oauthPKCE","oauthState","clearOAuthData","oauthSignIn","loadOAuthState","getItem","storeOAuthState","state","setItem","loadPKCE","storePKCE","pkce","setAuthConfig","authConfigParam","loadOAuthInFlight","storeOAuthInFlight","inflight","loadOAuthSignIn","isLegacyHostedUISignIn","isOAuthSignIn","preferPrivateSession","split","storeOAuthSignIn","provider","identifier","getAuthStorageKeys","OAuthStorageKeys"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\utils\\signInWithRedirectStore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore';\nimport { OAuthStorageKeys } from './types';\nconst V5_HOSTED_UI_KEY = 'amplify-signin-with-hostedUI';\nconst name = 'CognitoIdentityServiceProvider';\nexport class DefaultOAuthStore {\n    constructor(keyValueStorage) {\n        this.keyValueStorage = keyValueStorage;\n    }\n    async clearOAuthInflightData() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        await Promise.all([\n            this.keyValueStorage.removeItem(authKeys.inflightOAuth),\n            this.keyValueStorage.removeItem(authKeys.oauthPKCE),\n            this.keyValueStorage.removeItem(authKeys.oauthState),\n        ]);\n    }\n    async clearOAuthData() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        await this.clearOAuthInflightData();\n        await this.keyValueStorage.removeItem(V5_HOSTED_UI_KEY); // remove in case a customer migrated an App from v5 to v6\n        return this.keyValueStorage.removeItem(authKeys.oauthSignIn);\n    }\n    loadOAuthState() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return this.keyValueStorage.getItem(authKeys.oauthState);\n    }\n    storeOAuthState(state) {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return this.keyValueStorage.setItem(authKeys.oauthState, state);\n    }\n    loadPKCE() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return this.keyValueStorage.getItem(authKeys.oauthPKCE);\n    }\n    storePKCE(pkce) {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return this.keyValueStorage.setItem(authKeys.oauthPKCE, pkce);\n    }\n    setAuthConfig(authConfigParam) {\n        this.cognitoConfig = authConfigParam;\n    }\n    async loadOAuthInFlight() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return ((await this.keyValueStorage.getItem(authKeys.inflightOAuth)) === 'true');\n    }\n    async storeOAuthInFlight(inflight) {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        await this.keyValueStorage.setItem(authKeys.inflightOAuth, `${inflight}`);\n    }\n    async loadOAuthSignIn() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        const isLegacyHostedUISignIn = await this.keyValueStorage.getItem(V5_HOSTED_UI_KEY);\n        const [isOAuthSignIn, preferPrivateSession] = (await this.keyValueStorage.getItem(authKeys.oauthSignIn))?.split(',') ??\n            [];\n        return {\n            isOAuthSignIn: isOAuthSignIn === 'true' || isLegacyHostedUISignIn === 'true',\n            preferPrivateSession: preferPrivateSession === 'true',\n        };\n    }\n    async storeOAuthSignIn(oauthSignIn, preferPrivateSession = false) {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        await this.keyValueStorage.setItem(authKeys.oauthSignIn, `${oauthSignIn},${preferPrivateSession}`);\n    }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n    return getAuthStorageKeys(OAuthStorageKeys)(provider, identifier);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}