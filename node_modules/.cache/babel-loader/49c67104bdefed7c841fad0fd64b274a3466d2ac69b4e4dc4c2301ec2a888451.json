{"ast":null,"code":"import { decodeJWT, AmplifyError } from '@aws-amplify/core/internals/utils';\nimport { tokenOrchestrator } from './tokenProvider.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function cacheCognitoTokens(AuthenticationResult) {\n  if (AuthenticationResult.AccessToken) {\n    const accessToken = decodeJWT(AuthenticationResult.AccessToken);\n    const accessTokenIssuedAtInMillis = (accessToken.payload.iat || 0) * 1000;\n    const currentTime = new Date().getTime();\n    const clockDrift = accessTokenIssuedAtInMillis > 0 ? accessTokenIssuedAtInMillis - currentTime : 0;\n    let idToken;\n    let refreshToken;\n    let deviceMetadata;\n    if (AuthenticationResult.RefreshToken) {\n      refreshToken = AuthenticationResult.RefreshToken;\n    }\n    if (AuthenticationResult.IdToken) {\n      idToken = decodeJWT(AuthenticationResult.IdToken);\n    }\n    if (AuthenticationResult?.NewDeviceMetadata) {\n      deviceMetadata = AuthenticationResult.NewDeviceMetadata;\n    }\n    const tokens = {\n      accessToken,\n      idToken,\n      refreshToken,\n      clockDrift,\n      deviceMetadata,\n      username: AuthenticationResult.username\n    };\n    if (AuthenticationResult?.signInDetails) {\n      tokens.signInDetails = AuthenticationResult.signInDetails;\n    }\n    await tokenOrchestrator.setTokens({\n      tokens\n    });\n  } else {\n    // This would be a service error\n    throw new AmplifyError({\n      message: 'Invalid tokens',\n      name: 'InvalidTokens',\n      recoverySuggestion: 'Check Cognito UserPool settings'\n    });\n  }\n}\nexport { cacheCognitoTokens };","map":{"version":3,"names":["cacheCognitoTokens","AuthenticationResult","AccessToken","accessToken","decodeJWT","accessTokenIssuedAtInMillis","payload","iat","currentTime","Date","getTime","clockDrift","idToken","refreshToken","deviceMetadata","RefreshToken","IdToken","NewDeviceMetadata","tokens","username","signInDetails","tokenOrchestrator","setTokens","AmplifyError","message","name","recoverySuggestion"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\tokenProvider\\cacheTokens.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyError, decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { tokenOrchestrator } from './tokenProvider';\nexport async function cacheCognitoTokens(AuthenticationResult) {\n    if (AuthenticationResult.AccessToken) {\n        const accessToken = decodeJWT(AuthenticationResult.AccessToken);\n        const accessTokenIssuedAtInMillis = (accessToken.payload.iat || 0) * 1000;\n        const currentTime = new Date().getTime();\n        const clockDrift = accessTokenIssuedAtInMillis > 0\n            ? accessTokenIssuedAtInMillis - currentTime\n            : 0;\n        let idToken;\n        let refreshToken;\n        let deviceMetadata;\n        if (AuthenticationResult.RefreshToken) {\n            refreshToken = AuthenticationResult.RefreshToken;\n        }\n        if (AuthenticationResult.IdToken) {\n            idToken = decodeJWT(AuthenticationResult.IdToken);\n        }\n        if (AuthenticationResult?.NewDeviceMetadata) {\n            deviceMetadata = AuthenticationResult.NewDeviceMetadata;\n        }\n        const tokens = {\n            accessToken,\n            idToken,\n            refreshToken,\n            clockDrift,\n            deviceMetadata,\n            username: AuthenticationResult.username,\n        };\n        if (AuthenticationResult?.signInDetails) {\n            tokens.signInDetails = AuthenticationResult.signInDetails;\n        }\n        await tokenOrchestrator.setTokens({\n            tokens,\n        });\n    }\n    else {\n        // This would be a service error\n        throw new AmplifyError({\n            message: 'Invalid tokens',\n            name: 'InvalidTokens',\n            recoverySuggestion: 'Check Cognito UserPool settings',\n        });\n    }\n}\n"],"mappings":";;;AAAA;AACA;AAGO,eAAeA,kBAAkBA,CAACC,oBAAoB,EAAE;EAC3D,IAAIA,oBAAoB,CAACC,WAAW,EAAE;IAClC,MAAMC,WAAW,GAAGC,SAAS,CAACH,oBAAoB,CAACC,WAAW,CAAC;IAC/D,MAAMG,2BAA2B,GAAG,CAACF,WAAW,CAACG,OAAO,CAACC,GAAG,IAAI,CAAC,IAAI,IAAI;IACzE,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACxC,MAAMC,UAAU,GAAGN,2BAA2B,GAAG,CAAC,GAC5CA,2BAA2B,GAAGG,WAAW,GACzC,CAAC;IACP,IAAII,OAAO;IACX,IAAIC,YAAY;IAChB,IAAIC,cAAc;IAClB,IAAIb,oBAAoB,CAACc,YAAY,EAAE;MACnCF,YAAY,GAAGZ,oBAAoB,CAACc,YAAY;IAC5D;IACQ,IAAId,oBAAoB,CAACe,OAAO,EAAE;MAC9BJ,OAAO,GAAGR,SAAS,CAACH,oBAAoB,CAACe,OAAO,CAAC;IAC7D;IACQ,IAAIf,oBAAoB,EAAEgB,iBAAiB,EAAE;MACzCH,cAAc,GAAGb,oBAAoB,CAACgB,iBAAiB;IACnE;IACQ,MAAMC,MAAM,GAAG;MACXf,WAAW;MACXS,OAAO;MACPC,YAAY;MACZF,UAAU;MACVG,cAAc;MACdK,QAAQ,EAAElB,oBAAoB,CAACkB;IAC3C,CAAS;IACD,IAAIlB,oBAAoB,EAAEmB,aAAa,EAAE;MACrCF,MAAM,CAACE,aAAa,GAAGnB,oBAAoB,CAACmB,aAAa;IACrE;IACQ,MAAMC,iBAAiB,CAACC,SAAS,CAAC;MAC9BJ;IACZ,CAAS,CAAC;EACV,CAAK,MACI;IACT;IACQ,MAAM,IAAIK,YAAY,CAAC;MACnBC,OAAO,EAAE,gBAAgB;MACzBC,IAAI,EAAE,eAAe;MACrBC,kBAAkB,EAAE;IAChC,CAAS,CAAC;EACV;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}