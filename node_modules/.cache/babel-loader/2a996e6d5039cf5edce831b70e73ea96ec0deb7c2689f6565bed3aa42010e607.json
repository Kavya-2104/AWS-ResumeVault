{"ast":null,"code":"import { KEY_TYPE_IDENTIFIER, SIGNATURE_IDENTIFIER } from '../constants.mjs';\nimport { getHashedData } from './dataHashHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns a signing key to be used for signing requests.\n *\n * @param secretAccessKey AWS secret access key from credentials.\n * @param date Current date in the format 'YYYYMMDD'.\n * @param region AWS region in which the service resides.\n * @param service Service to which the signed request is being sent.\n *\n * @returns `Uint8Array` calculated from its composite parts.\n *\n * @internal\n */\nconst getSigningKey = (secretAccessKey, date, region, service) => {\n  const key = `${SIGNATURE_IDENTIFIER}${secretAccessKey}`;\n  const dateKey = getHashedData(key, date);\n  const regionKey = getHashedData(dateKey, region);\n  const serviceKey = getHashedData(regionKey, service);\n  const signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);\n  return signingKey;\n};\nexport { getSigningKey };","map":{"version":3,"names":["getSigningKey","secretAccessKey","date","region","service","key","SIGNATURE_IDENTIFIER","dateKey","getHashedData","regionKey","serviceKey","signingKey","KEY_TYPE_IDENTIFIER"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getSigningKey.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { KEY_TYPE_IDENTIFIER, SIGNATURE_IDENTIFIER } from '../constants';\nimport { getHashedData } from './dataHashHelpers';\n/**\n * Returns a signing key to be used for signing requests.\n *\n * @param secretAccessKey AWS secret access key from credentials.\n * @param date Current date in the format 'YYYYMMDD'.\n * @param region AWS region in which the service resides.\n * @param service Service to which the signed request is being sent.\n *\n * @returns `Uint8Array` calculated from its composite parts.\n *\n * @internal\n */\nexport const getSigningKey = (secretAccessKey, date, region, service) => {\n    const key = `${SIGNATURE_IDENTIFIER}${secretAccessKey}`;\n    const dateKey = getHashedData(key, date);\n    const regionKey = getHashedData(dateKey, region);\n    const serviceKey = getHashedData(regionKey, service);\n    const signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);\n    return signingKey;\n};\n"],"mappings":";;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,aAAa,GAAGA,CAACC,eAAe,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,KAAK;EACrE,MAAMC,GAAG,GAAI,GAAEC,oBAAqB,GAAEL,eAAgB,EAAC;EACvD,MAAMM,OAAO,GAAGC,aAAa,CAACH,GAAG,EAAEH,IAAI,CAAC;EACxC,MAAMO,SAAS,GAAGD,aAAa,CAACD,OAAO,EAAEJ,MAAM,CAAC;EAChD,MAAMO,UAAU,GAAGF,aAAa,CAACC,SAAS,EAAEL,OAAO,CAAC;EACpD,MAAMO,UAAU,GAAGH,aAAa,CAACE,UAAU,EAAEE,mBAAmB,CAAC;EACjE,OAAOD,UAAU;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}