{"ast":null,"code":"import { Sha256 } from '@aws-crypto/sha256-js';\nimport { toHex } from '@smithy/util-hex-encoding';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// TODO: V6 update to different crypto dependency?\n/**\n * Returns the hashed data a `Uint8Array`.\n *\n * @param key `SourceData` to be used as hashing key.\n * @param data Hashable `SourceData`.\n * @returns `Uint8Array` created from the data as input to a hash function.\n */\nconst getHashedData = (key, data) => {\n  const sha256 = new Sha256(key ?? undefined);\n  sha256.update(data);\n  // TODO: V6 flip to async digest\n  const hashedData = sha256.digestSync();\n  return hashedData;\n};\n/**\n * Returns the hashed data as a hex string.\n *\n * @param key `SourceData` to be used as hashing key.\n * @param data Hashable `SourceData`.\n * @returns String using lowercase hexadecimal characters created from the data as input to a hash function.\n *\n * @internal\n */\nconst getHashedDataAsHex = (key, data) => {\n  const hashedData = getHashedData(key, data);\n  return toHex(hashedData);\n};\nexport { getHashedData, getHashedDataAsHex };","map":{"version":3,"names":["getHashedData","key","data","sha256","Sha256","undefined","update","hashedData","digestSync","getHashedDataAsHex","toHex"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\dataHashHelpers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// TODO: V6 update to different crypto dependency?\nimport { Sha256 } from '@aws-crypto/sha256-js';\nimport { toHex } from '@smithy/util-hex-encoding';\n/**\n * Returns the hashed data a `Uint8Array`.\n *\n * @param key `SourceData` to be used as hashing key.\n * @param data Hashable `SourceData`.\n * @returns `Uint8Array` created from the data as input to a hash function.\n */\nexport const getHashedData = (key, data) => {\n    const sha256 = new Sha256(key ?? undefined);\n    sha256.update(data);\n    // TODO: V6 flip to async digest\n    const hashedData = sha256.digestSync();\n    return hashedData;\n};\n/**\n * Returns the hashed data as a hex string.\n *\n * @param key `SourceData` to be used as hashing key.\n * @param data Hashable `SourceData`.\n * @returns String using lowercase hexadecimal characters created from the data as input to a hash function.\n *\n * @internal\n */\nexport const getHashedDataAsHex = (key, data) => {\n    const hashedData = getHashedData(key, data);\n    return toHex(hashedData);\n};\n"],"mappings":";;;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,aAAa,GAAGA,CAACC,GAAG,EAAEC,IAAI,KAAK;EACxC,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACH,GAAG,IAAII,SAAS,CAAC;EAC3CF,MAAM,CAACG,MAAM,CAACJ,IAAI,CAAC;EACvB;EACI,MAAMK,UAAU,GAAGJ,MAAM,CAACK,UAAU,EAAE;EACtC,OAAOD,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACE,kBAAkB,GAAGA,CAACR,GAAG,EAAEC,IAAI,KAAK;EAC7C,MAAMK,UAAU,GAAGP,aAAa,CAACC,GAAG,EAAEC,IAAI,CAAC;EAC3C,OAAOQ,KAAK,CAACH,UAAU,CAAC;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}