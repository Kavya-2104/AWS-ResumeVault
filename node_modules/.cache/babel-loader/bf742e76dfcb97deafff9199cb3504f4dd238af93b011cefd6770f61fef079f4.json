{"ast":null,"code":"import AuthenticationHelper from './AuthenticationHelper/AuthenticationHelper.mjs';\nimport BigInteger from './BigInteger/BigInteger.mjs';\nimport { calculateA } from './calculate/calculateA.mjs';\nimport { INIT_N } from './constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { getHexFromBytes } from './getHexFromBytes.mjs';\nimport { getRandomBytes } from './getRandomBytes.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns a new {@link AuthenticationHelper} instance with randomly generated BigInteger seed\n *\n * @param userPoolName Cognito user pool name.\n * @returns An {@link AuthenticationHelper} instance.\n *\n * @internal\n */\nconst getAuthenticationHelper = async userPoolName => {\n  const N = new BigInteger(INIT_N, 16);\n  const g = new BigInteger('2', 16);\n  const a = generateRandomBigInteger();\n  const A = await calculateA({\n    a,\n    g,\n    N\n  });\n  return new AuthenticationHelper({\n    userPoolName,\n    a,\n    g,\n    A,\n    N\n  });\n};\n/**\n * Generates a random BigInteger.\n *\n * @returns {BigInteger} a random value.\n */\nconst generateRandomBigInteger = () => {\n  // This will be interpreted as a postive 128-bit integer\n  const hexRandom = getHexFromBytes(getRandomBytes(128));\n  // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n  return new BigInteger(hexRandom, 16);\n};\nexport { getAuthenticationHelper };","map":{"version":3,"names":["getAuthenticationHelper","userPoolName","N","BigInteger","INIT_N","g","a","generateRandomBigInteger","A","calculateA","AuthenticationHelper","hexRandom","getHexFromBytes","getRandomBytes"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\utils\\srp\\getAuthenticationHelper.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthenticationHelper } from './AuthenticationHelper';\nimport { BigInteger } from './BigInteger';\nimport { calculateA } from './calculate';\nimport { INIT_N } from './constants';\nimport { getHexFromBytes } from './getHexFromBytes';\nimport { getRandomBytes } from './getRandomBytes';\n/**\n * Returns a new {@link AuthenticationHelper} instance with randomly generated BigInteger seed\n *\n * @param userPoolName Cognito user pool name.\n * @returns An {@link AuthenticationHelper} instance.\n *\n * @internal\n */\nexport const getAuthenticationHelper = async (userPoolName) => {\n    const N = new BigInteger(INIT_N, 16);\n    const g = new BigInteger('2', 16);\n    const a = generateRandomBigInteger();\n    const A = await calculateA({ a, g, N });\n    return new AuthenticationHelper({ userPoolName, a, g, A, N });\n};\n/**\n * Generates a random BigInteger.\n *\n * @returns {BigInteger} a random value.\n */\nconst generateRandomBigInteger = () => {\n    // This will be interpreted as a postive 128-bit integer\n    const hexRandom = getHexFromBytes(getRandomBytes(128));\n    // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n    return new BigInteger(hexRandom, 16);\n};\n"],"mappings":";;;;;;;;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,uBAAuB,GAAG,MAAOC,YAAY,IAAK;EAC3D,MAAMC,CAAC,GAAG,IAAIC,UAAU,CAACC,MAAM,EAAE,EAAE,CAAC;EACpC,MAAMC,CAAC,GAAG,IAAIF,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC;EACjC,MAAMG,CAAC,GAAGC,wBAAwB,EAAE;EACpC,MAAMC,CAAC,GAAG,MAAMC,UAAU,CAAC;IAAEH,CAAC;IAAED,CAAC;IAAEH;EAAC,CAAE,CAAC;EACvC,OAAO,IAAIQ,oBAAoB,CAAC;IAAET,YAAY;IAAEK,CAAC;IAAED,CAAC;IAAEG,CAAC;IAAEN;EAAC,CAAE,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,wBAAwB,GAAGA,CAAA,KAAM;EACvC;EACI,MAAMI,SAAS,GAAGC,eAAe,CAACC,cAAc,CAAC,GAAG,CAAC,CAAC;EAC1D;EACI,OAAO,IAAIV,UAAU,CAACQ,SAAS,EAAE,EAAE,CAAC;AACxC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}