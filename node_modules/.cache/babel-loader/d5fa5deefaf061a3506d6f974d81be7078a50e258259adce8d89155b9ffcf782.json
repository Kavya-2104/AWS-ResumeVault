{"ast":null,"code":"import { ConsoleLogger } from '../../Logger/ConsoleLogger.mjs';\nimport { isNonRetryableError } from './isNonRetryableError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('retryUtil');\n/**\n * @private\n * Internal use of Amplify only\n */\nasync function retry(functionToRetry, args, delayFn, onTerminate) {\n  if (typeof functionToRetry !== 'function') {\n    throw Error('functionToRetry must be a function');\n  }\n  return new Promise(async (resolve, reject) => {\n    let attempt = 0;\n    let terminated = false;\n    let timeout;\n    let wakeUp = () => {}; // will be replaced with a resolver()\n    // used after the loop if terminated while waiting for a timer.\n    let lastError;\n    onTerminate && onTerminate.then(() => {\n      // signal not to try anymore.\n      terminated = true;\n      // stop sleeping if we're sleeping.\n      clearTimeout(timeout);\n      wakeUp();\n    });\n    while (!terminated) {\n      attempt++;\n      logger.debug(`${functionToRetry.name} attempt #${attempt} with this vars: ${JSON.stringify(args)}`);\n      try {\n        return resolve(await functionToRetry(...args));\n      } catch (err) {\n        lastError = err;\n        logger.debug(`error on ${functionToRetry.name}`, err);\n        if (isNonRetryableError(err)) {\n          logger.debug(`${functionToRetry.name} non retryable error`, err);\n          return reject(err);\n        }\n        const retryIn = delayFn(attempt, args, err);\n        logger.debug(`${functionToRetry.name} retrying in ${retryIn} ms`);\n        // we check `terminated` again here because it could have flipped\n        // in the time it took `functionToRetry` to return.\n        if (retryIn === false || terminated) {\n          return reject(err);\n        } else {\n          await new Promise(r => {\n            wakeUp = r; // export wakeUp for onTerminate handling\n            timeout = setTimeout(wakeUp, retryIn);\n          });\n        }\n      }\n    }\n    // reached if terminated while waiting for a timer.\n    reject(lastError);\n  });\n}\nexport { retry };","map":{"version":3,"names":["logger","ConsoleLogger","retry","functionToRetry","args","delayFn","onTerminate","Error","Promise","resolve","reject","attempt","terminated","timeout","wakeUp","lastError","then","clearTimeout","debug","name","JSON","stringify","err","isNonRetryableError","retryIn","r","setTimeout"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\utils\\retry\\retry.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger } from '../../Logger/ConsoleLogger';\nimport { isNonRetryableError } from './isNonRetryableError';\nconst logger = new ConsoleLogger('retryUtil');\n/**\n * @private\n * Internal use of Amplify only\n */\nexport async function retry(functionToRetry, args, delayFn, onTerminate) {\n    if (typeof functionToRetry !== 'function') {\n        throw Error('functionToRetry must be a function');\n    }\n    return new Promise(async (resolve, reject) => {\n        let attempt = 0;\n        let terminated = false;\n        let timeout;\n        let wakeUp = () => { }; // will be replaced with a resolver()\n        // used after the loop if terminated while waiting for a timer.\n        let lastError;\n        onTerminate &&\n            onTerminate.then(() => {\n                // signal not to try anymore.\n                terminated = true;\n                // stop sleeping if we're sleeping.\n                clearTimeout(timeout);\n                wakeUp();\n            });\n        while (!terminated) {\n            attempt++;\n            logger.debug(`${functionToRetry.name} attempt #${attempt} with this vars: ${JSON.stringify(args)}`);\n            try {\n                return resolve(await functionToRetry(...args));\n            }\n            catch (err) {\n                lastError = err;\n                logger.debug(`error on ${functionToRetry.name}`, err);\n                if (isNonRetryableError(err)) {\n                    logger.debug(`${functionToRetry.name} non retryable error`, err);\n                    return reject(err);\n                }\n                const retryIn = delayFn(attempt, args, err);\n                logger.debug(`${functionToRetry.name} retrying in ${retryIn} ms`);\n                // we check `terminated` again here because it could have flipped\n                // in the time it took `functionToRetry` to return.\n                if (retryIn === false || terminated) {\n                    return reject(err);\n                }\n                else {\n                    await new Promise(r => {\n                        wakeUp = r; // export wakeUp for onTerminate handling\n                        timeout = setTimeout(wakeUp, retryIn);\n                    });\n                }\n            }\n        }\n        // reached if terminated while waiting for a timer.\n        reject(lastError);\n    });\n}\n"],"mappings":";;;AAAA;AACA;AAGA,MAAMA,MAAM,GAAG,IAAIC,aAAa,CAAC,WAAW,CAAC;AAC7C;AACA;AACA;AACA;AACO,eAAeC,KAAKA,CAACC,eAAe,EAAEC,IAAI,EAAEC,OAAO,EAAEC,WAAW,EAAE;EACrE,IAAI,OAAOH,eAAe,KAAK,UAAU,EAAE;IACvC,MAAMI,KAAK,CAAC,oCAAoC,CAAC;EACzD;EACI,OAAO,IAAIC,OAAO,CAAC,OAAOC,OAAO,EAAEC,MAAM,KAAK;IAC1C,IAAIC,OAAO,GAAG,CAAC;IACf,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAIC,OAAO;IACX,IAAIC,MAAM,GAAGA,CAAA,KAAM,EAAG,CAAC;IAC/B;IACQ,IAAIC,SAAS;IACbT,WAAW,IACPA,WAAW,CAACU,IAAI,CAAC,MAAM;MACnC;MACgBJ,UAAU,GAAG,IAAI;MACjC;MACgBK,YAAY,CAACJ,OAAO,CAAC;MACrBC,MAAM,EAAE;IACxB,CAAa,CAAC;IACN,OAAO,CAACF,UAAU,EAAE;MAChBD,OAAO,EAAE;MACTX,MAAM,CAACkB,KAAK,CAAE,GAAEf,eAAe,CAACgB,IAAK,aAAYR,OAAQ,oBAAmBS,IAAI,CAACC,SAAS,CAACjB,IAAI,CAAE,EAAC,CAAC;MACnG,IAAI;QACA,OAAOK,OAAO,CAAC,MAAMN,eAAe,CAAC,GAAGC,IAAI,CAAC,CAAC;MAC9D,CAAa,CACD,OAAOkB,GAAG,EAAE;QACRP,SAAS,GAAGO,GAAG;QACftB,MAAM,CAACkB,KAAK,CAAE,YAAWf,eAAe,CAACgB,IAAK,EAAC,EAAEG,GAAG,CAAC;QACrD,IAAIC,mBAAmB,CAACD,GAAG,CAAC,EAAE;UAC1BtB,MAAM,CAACkB,KAAK,CAAE,GAAEf,eAAe,CAACgB,IAAK,sBAAqB,EAAEG,GAAG,CAAC;UAChE,OAAOZ,MAAM,CAACY,GAAG,CAAC;QACtC;QACgB,MAAME,OAAO,GAAGnB,OAAO,CAACM,OAAO,EAAEP,IAAI,EAAEkB,GAAG,CAAC;QAC3CtB,MAAM,CAACkB,KAAK,CAAE,GAAEf,eAAe,CAACgB,IAAK,gBAAeK,OAAQ,KAAI,CAAC;QACjF;QACA;QACgB,IAAIA,OAAO,KAAK,KAAK,IAAIZ,UAAU,EAAE;UACjC,OAAOF,MAAM,CAACY,GAAG,CAAC;QACtC,CAAiB,MACI;UACD,MAAM,IAAId,OAAO,CAACiB,CAAC,IAAI;YACnBX,MAAM,GAAGW,CAAC,CAAC;YACXZ,OAAO,GAAGa,UAAU,CAACZ,MAAM,EAAEU,OAAO,CAAC;UAC7D,CAAqB,CAAC;QACtB;MACA;IACA;IACA;IACQd,MAAM,CAACK,SAAS,CAAC;EACzB,CAAK,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}