{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { setUserMFAPreference } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates the MFA preference of the user.\n *\n * @param input - The UpdateMFAPreferenceInput object.\n * @throws -{@link SetUserMFAPreferenceException } - Service error thrown when the MFA preference cannot be updated.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function updateMFAPreference(input) {\n  const {\n    sms,\n    totp\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  await setUserMFAPreference({\n    region: getRegion(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.UpdateMFAPreference)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    SMSMfaSettings: getMFASettings(sms),\n    SoftwareTokenMfaSettings: getMFASettings(totp)\n  });\n}\nfunction getMFASettings(mfaPreference) {\n  if (mfaPreference === 'DISABLED') {\n    return {\n      Enabled: false\n    };\n  } else if (mfaPreference === 'PREFERRED') {\n    return {\n      Enabled: true,\n      PreferredMfa: true\n    };\n  } else if (mfaPreference === 'ENABLED') {\n    return {\n      Enabled: true\n    };\n  } else if (mfaPreference === 'NOT_PREFERRED') {\n    return {\n      Enabled: true,\n      PreferredMfa: false\n    };\n  }\n}\nexport { getMFASettings, updateMFAPreference };","map":{"version":3,"names":["updateMFAPreference","input","sms","totp","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","setUserMFAPreference","region","getRegion","userPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","UpdateMFAPreference","AccessToken","accessToken","toString","SMSMfaSettings","getMFASettings","SoftwareTokenMfaSettings","mfaPreference","Enabled","PreferredMfa"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\updateMFAPreference.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { setUserMFAPreference } from '../utils/clients/CognitoIdentityProvider';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { assertAuthTokens } from '../utils/types';\nimport { getAuthUserAgentValue } from '../../../utils';\n/**\n * Updates the MFA preference of the user.\n *\n * @param input - The UpdateMFAPreferenceInput object.\n * @throws -{@link SetUserMFAPreferenceException } - Service error thrown when the MFA preference cannot be updated.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function updateMFAPreference(input) {\n    const { sms, totp } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    await setUserMFAPreference({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.UpdateMFAPreference),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        SMSMfaSettings: getMFASettings(sms),\n        SoftwareTokenMfaSettings: getMFASettings(totp),\n    });\n}\nexport function getMFASettings(mfaPreference) {\n    if (mfaPreference === 'DISABLED') {\n        return {\n            Enabled: false,\n        };\n    }\n    else if (mfaPreference === 'PREFERRED') {\n        return {\n            Enabled: true,\n            PreferredMfa: true,\n        };\n    }\n    else if (mfaPreference === 'ENABLED') {\n        return {\n            Enabled: true,\n        };\n    }\n    else if (mfaPreference === 'NOT_PREFERRED') {\n        return {\n            Enabled: true,\n            PreferredMfa: false,\n        };\n    }\n}\n"],"mappings":";;;;;;;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,mBAAmBA,CAACC,KAAK,EAAE;EAC7C,MAAM;IAAEC,GAAG;IAAEC;EAAI,CAAE,GAAGF,KAAK;EAC3B,MAAMG,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM;EAAM,CAAE,GAAG,MAAMC,gBAAgB,CAAC;IAAEC,YAAY,EAAE;EAAK,CAAE,CAAC;EAClEC,gBAAgB,CAACH,MAAM,CAAC;EACxB,MAAMI,oBAAoB,CAAC;IACvBC,MAAM,EAAEC,SAAS,CAACZ,UAAU,CAACa,UAAU,CAAC;IACxCC,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,mBAAmB;EAC5E,CAAK,EAAE;IACCC,WAAW,EAAEZ,MAAM,CAACa,WAAW,CAACC,QAAQ,EAAE;IAC1CC,cAAc,EAAEC,cAAc,CAACxB,GAAG,CAAC;IACnCyB,wBAAwB,EAAED,cAAc,CAACvB,IAAI;EACrD,CAAK,CAAC;AACN;AACO,SAASuB,cAAcA,CAACE,aAAa,EAAE;EAC1C,IAAIA,aAAa,KAAK,UAAU,EAAE;IAC9B,OAAO;MACHC,OAAO,EAAE;IACrB,CAAS;EACT,CAAK,MACI,IAAID,aAAa,KAAK,WAAW,EAAE;IACpC,OAAO;MACHC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE;IAC1B,CAAS;EACT,CAAK,MACI,IAAIF,aAAa,KAAK,SAAS,EAAE;IAClC,OAAO;MACHC,OAAO,EAAE;IACrB,CAAS;EACT,CAAK,MACI,IAAID,aAAa,KAAK,eAAe,EAAE;IACxC,OAAO;MACHC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE;IAC1B,CAAS;EACT;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}