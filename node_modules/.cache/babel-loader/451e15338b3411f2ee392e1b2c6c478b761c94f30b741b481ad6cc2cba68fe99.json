{"ast":null,"code":"import { BLOCK_SIZE, DIGEST_LENGTH, INIT, KEY, MAX_HASHABLE_LENGTH } from \"./constants\";\n/**\n * @internal\n */\nvar RawSha256 = /** @class */function () {\n  function RawSha256() {\n    this.state = Int32Array.from(INIT);\n    this.temp = new Int32Array(64);\n    this.buffer = new Uint8Array(64);\n    this.bufferLength = 0;\n    this.bytesHashed = 0;\n    /**\n     * @internal\n     */\n    this.finished = false;\n  }\n  RawSha256.prototype.update = function (data) {\n    if (this.finished) {\n      throw new Error(\"Attempted to update an already finished hash.\");\n    }\n    var position = 0;\n    var byteLength = data.byteLength;\n    this.bytesHashed += byteLength;\n    if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {\n      throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n    while (byteLength > 0) {\n      this.buffer[this.bufferLength++] = data[position++];\n      byteLength--;\n      if (this.bufferLength === BLOCK_SIZE) {\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n    }\n  };\n  RawSha256.prototype.digest = function () {\n    if (!this.finished) {\n      var bitsHashed = this.bytesHashed * 8;\n      var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n      var undecoratedLength = this.bufferLength;\n      bufferView.setUint8(this.bufferLength++, 0x80);\n      // Ensure the final block has enough room for the hashed length\n      if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {\n        for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {\n          bufferView.setUint8(i, 0);\n        }\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n      for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {\n        bufferView.setUint8(i, 0);\n      }\n      bufferView.setUint32(BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);\n      bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);\n      this.hashBuffer();\n      this.finished = true;\n    }\n    // The value in state is little-endian rather than big-endian, so flip\n    // each word into a new Uint8Array\n    var out = new Uint8Array(DIGEST_LENGTH);\n    for (var i = 0; i < 8; i++) {\n      out[i * 4] = this.state[i] >>> 24 & 0xff;\n      out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;\n      out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;\n      out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;\n    }\n    return out;\n  };\n  RawSha256.prototype.hashBuffer = function () {\n    var _a = this,\n      buffer = _a.buffer,\n      state = _a.state;\n    var state0 = state[0],\n      state1 = state[1],\n      state2 = state[2],\n      state3 = state[3],\n      state4 = state[4],\n      state5 = state[5],\n      state6 = state[6],\n      state7 = state[7];\n    for (var i = 0; i < BLOCK_SIZE; i++) {\n      if (i < 16) {\n        this.temp[i] = (buffer[i * 4] & 0xff) << 24 | (buffer[i * 4 + 1] & 0xff) << 16 | (buffer[i * 4 + 2] & 0xff) << 8 | buffer[i * 4 + 3] & 0xff;\n      } else {\n        var u = this.temp[i - 2];\n        var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;\n        u = this.temp[i - 15];\n        var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;\n        this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);\n      }\n      var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (KEY[i] + this.temp[i] | 0) | 0) | 0;\n      var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;\n      state7 = state6;\n      state6 = state5;\n      state5 = state4;\n      state4 = state3 + t1 | 0;\n      state3 = state2;\n      state2 = state1;\n      state1 = state0;\n      state0 = t1 + t2 | 0;\n    }\n    state[0] += state0;\n    state[1] += state1;\n    state[2] += state2;\n    state[3] += state3;\n    state[4] += state4;\n    state[5] += state5;\n    state[6] += state6;\n    state[7] += state7;\n  };\n  return RawSha256;\n}();\nexport { RawSha256 };","map":{"version":3,"names":["BLOCK_SIZE","DIGEST_LENGTH","INIT","KEY","MAX_HASHABLE_LENGTH","RawSha256","state","Int32Array","from","temp","buffer","Uint8Array","bufferLength","bytesHashed","finished","prototype","update","data","Error","position","byteLength","hashBuffer","digest","bitsHashed","bufferView","DataView","byteOffset","undecoratedLength","setUint8","i","setUint32","Math","floor","out","_a","state0","state1","state2","state3","state4","state5","state6","state7","u","t1_1","t2_1","t1","t2"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-crypto\\sha256-js\\src\\RawSha256.ts"],"sourcesContent":["import {\n  BLOCK_SIZE,\n  DIGEST_LENGTH,\n  INIT,\n  KEY,\n  MAX_HASHABLE_LENGTH\n} from \"./constants\";\n\n/**\n * @internal\n */\nexport class RawSha256 {\n  private state: Int32Array = Int32Array.from(INIT);\n  private temp: Int32Array = new Int32Array(64);\n  private buffer: Uint8Array = new Uint8Array(64);\n  private bufferLength: number = 0;\n  private bytesHashed: number = 0;\n\n  /**\n   * @internal\n   */\n  finished: boolean = false;\n\n  update(data: Uint8Array): void {\n    if (this.finished) {\n      throw new Error(\"Attempted to update an already finished hash.\");\n    }\n\n    let position = 0;\n    let { byteLength } = data;\n    this.bytesHashed += byteLength;\n\n    if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {\n      throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    while (byteLength > 0) {\n      this.buffer[this.bufferLength++] = data[position++];\n      byteLength--;\n\n      if (this.bufferLength === BLOCK_SIZE) {\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n    }\n  }\n\n  digest(): Uint8Array {\n    if (!this.finished) {\n      const bitsHashed = this.bytesHashed * 8;\n      const bufferView = new DataView(\n        this.buffer.buffer,\n        this.buffer.byteOffset,\n        this.buffer.byteLength\n      );\n\n      const undecoratedLength = this.bufferLength;\n      bufferView.setUint8(this.bufferLength++, 0x80);\n\n      // Ensure the final block has enough room for the hashed length\n      if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {\n        for (let i = this.bufferLength; i < BLOCK_SIZE; i++) {\n          bufferView.setUint8(i, 0);\n        }\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n\n      for (let i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {\n        bufferView.setUint8(i, 0);\n      }\n      bufferView.setUint32(\n        BLOCK_SIZE - 8,\n        Math.floor(bitsHashed / 0x100000000),\n        true\n      );\n      bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);\n\n      this.hashBuffer();\n\n      this.finished = true;\n    }\n\n    // The value in state is little-endian rather than big-endian, so flip\n    // each word into a new Uint8Array\n    const out = new Uint8Array(DIGEST_LENGTH);\n    for (let i = 0; i < 8; i++) {\n      out[i * 4] = (this.state[i] >>> 24) & 0xff;\n      out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n      out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n      out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n    }\n\n    return out;\n  }\n\n  private hashBuffer(): void {\n    const { buffer, state } = this;\n\n    let state0 = state[0],\n      state1 = state[1],\n      state2 = state[2],\n      state3 = state[3],\n      state4 = state[4],\n      state5 = state[5],\n      state6 = state[6],\n      state7 = state[7];\n\n    for (let i = 0; i < BLOCK_SIZE; i++) {\n      if (i < 16) {\n        this.temp[i] =\n          ((buffer[i * 4] & 0xff) << 24) |\n          ((buffer[i * 4 + 1] & 0xff) << 16) |\n          ((buffer[i * 4 + 2] & 0xff) << 8) |\n          (buffer[i * 4 + 3] & 0xff);\n      } else {\n        let u = this.temp[i - 2];\n        const t1 =\n          ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);\n\n        u = this.temp[i - 15];\n        const t2 =\n          ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);\n\n        this.temp[i] =\n          ((t1 + this.temp[i - 7]) | 0) + ((t2 + this.temp[i - 16]) | 0);\n      }\n\n      const t1 =\n        ((((((state4 >>> 6) | (state4 << 26)) ^\n          ((state4 >>> 11) | (state4 << 21)) ^\n          ((state4 >>> 25) | (state4 << 7))) +\n          ((state4 & state5) ^ (~state4 & state6))) |\n          0) +\n          ((state7 + ((KEY[i] + this.temp[i]) | 0)) | 0)) |\n        0;\n\n      const t2 =\n        ((((state0 >>> 2) | (state0 << 30)) ^\n          ((state0 >>> 13) | (state0 << 19)) ^\n          ((state0 >>> 22) | (state0 << 10))) +\n          ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |\n        0;\n\n      state7 = state6;\n      state6 = state5;\n      state5 = state4;\n      state4 = (state3 + t1) | 0;\n      state3 = state2;\n      state2 = state1;\n      state1 = state0;\n      state0 = (t1 + t2) | 0;\n    }\n\n    state[0] += state0;\n    state[1] += state1;\n    state[2] += state2;\n    state[3] += state3;\n    state[4] += state4;\n    state[5] += state5;\n    state[6] += state6;\n    state[7] += state7;\n  }\n}\n"],"mappings":"AAAA,SACEA,UAAU,EACVC,aAAa,EACbC,IAAI,EACJC,GAAG,EACHC,mBAAmB,QACd,aAAa;AAEpB;;;AAGA,IAAAC,SAAA;EAAA,SAAAA,UAAA;IACU,KAAAC,KAAK,GAAeC,UAAU,CAACC,IAAI,CAACN,IAAI,CAAC;IACzC,KAAAO,IAAI,GAAe,IAAIF,UAAU,CAAC,EAAE,CAAC;IACrC,KAAAG,MAAM,GAAe,IAAIC,UAAU,CAAC,EAAE,CAAC;IACvC,KAAAC,YAAY,GAAW,CAAC;IACxB,KAAAC,WAAW,GAAW,CAAC;IAE/B;;;IAGA,KAAAC,QAAQ,GAAY,KAAK;EA8I3B;EA5IET,SAAA,CAAAU,SAAA,CAAAC,MAAM,GAAN,UAAOC,IAAgB;IACrB,IAAI,IAAI,CAACH,QAAQ,EAAE;MACjB,MAAM,IAAII,KAAK,CAAC,+CAA+C,CAAC;;IAGlE,IAAIC,QAAQ,GAAG,CAAC;IACV,IAAAC,UAAU,GAAKH,IAAI,CAAAG,UAAT;IAChB,IAAI,CAACP,WAAW,IAAIO,UAAU;IAE9B,IAAI,IAAI,CAACP,WAAW,GAAG,CAAC,GAAGT,mBAAmB,EAAE;MAC9C,MAAM,IAAIc,KAAK,CAAC,qCAAqC,CAAC;;IAGxD,OAAOE,UAAU,GAAG,CAAC,EAAE;MACrB,IAAI,CAACV,MAAM,CAAC,IAAI,CAACE,YAAY,EAAE,CAAC,GAAGK,IAAI,CAACE,QAAQ,EAAE,CAAC;MACnDC,UAAU,EAAE;MAEZ,IAAI,IAAI,CAACR,YAAY,KAAKZ,UAAU,EAAE;QACpC,IAAI,CAACqB,UAAU,EAAE;QACjB,IAAI,CAACT,YAAY,GAAG,CAAC;;;EAG3B,CAAC;EAEDP,SAAA,CAAAU,SAAA,CAAAO,MAAM,GAAN;IACE,IAAI,CAAC,IAAI,CAACR,QAAQ,EAAE;MAClB,IAAMS,UAAU,GAAG,IAAI,CAACV,WAAW,GAAG,CAAC;MACvC,IAAMW,UAAU,GAAG,IAAIC,QAAQ,CAC7B,IAAI,CAACf,MAAM,CAACA,MAAM,EAClB,IAAI,CAACA,MAAM,CAACgB,UAAU,EACtB,IAAI,CAAChB,MAAM,CAACU,UAAU,CACvB;MAED,IAAMO,iBAAiB,GAAG,IAAI,CAACf,YAAY;MAC3CY,UAAU,CAACI,QAAQ,CAAC,IAAI,CAAChB,YAAY,EAAE,EAAE,IAAI,CAAC;MAE9C;MACA,IAAIe,iBAAiB,GAAG3B,UAAU,IAAIA,UAAU,GAAG,CAAC,EAAE;QACpD,KAAK,IAAI6B,CAAC,GAAG,IAAI,CAACjB,YAAY,EAAEiB,CAAC,GAAG7B,UAAU,EAAE6B,CAAC,EAAE,EAAE;UACnDL,UAAU,CAACI,QAAQ,CAACC,CAAC,EAAE,CAAC,CAAC;;QAE3B,IAAI,CAACR,UAAU,EAAE;QACjB,IAAI,CAACT,YAAY,GAAG,CAAC;;MAGvB,KAAK,IAAIiB,CAAC,GAAG,IAAI,CAACjB,YAAY,EAAEiB,CAAC,GAAG7B,UAAU,GAAG,CAAC,EAAE6B,CAAC,EAAE,EAAE;QACvDL,UAAU,CAACI,QAAQ,CAACC,CAAC,EAAE,CAAC,CAAC;;MAE3BL,UAAU,CAACM,SAAS,CAClB9B,UAAU,GAAG,CAAC,EACd+B,IAAI,CAACC,KAAK,CAACT,UAAU,GAAG,WAAW,CAAC,EACpC,IAAI,CACL;MACDC,UAAU,CAACM,SAAS,CAAC9B,UAAU,GAAG,CAAC,EAAEuB,UAAU,CAAC;MAEhD,IAAI,CAACF,UAAU,EAAE;MAEjB,IAAI,CAACP,QAAQ,GAAG,IAAI;;IAGtB;IACA;IACA,IAAMmB,GAAG,GAAG,IAAItB,UAAU,CAACV,aAAa,CAAC;IACzC,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BI,GAAG,CAACJ,CAAC,GAAG,CAAC,CAAC,GAAI,IAAI,CAACvB,KAAK,CAACuB,CAAC,CAAC,KAAK,EAAE,GAAI,IAAI;MAC1CI,GAAG,CAACJ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAI,IAAI,CAACvB,KAAK,CAACuB,CAAC,CAAC,KAAK,EAAE,GAAI,IAAI;MAC9CI,GAAG,CAACJ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAI,IAAI,CAACvB,KAAK,CAACuB,CAAC,CAAC,KAAK,CAAC,GAAI,IAAI;MAC7CI,GAAG,CAACJ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAI,IAAI,CAACvB,KAAK,CAACuB,CAAC,CAAC,KAAK,CAAC,GAAI,IAAI;;IAG/C,OAAOI,GAAG;EACZ,CAAC;EAEO5B,SAAA,CAAAU,SAAA,CAAAM,UAAU,GAAlB;IACQ,IAAAa,EAAA,GAAoB,IAAI;MAAtBxB,MAAM,GAAAwB,EAAA,CAAAxB,MAAA;MAAEJ,KAAK,GAAA4B,EAAA,CAAA5B,KAAS;IAE9B,IAAI6B,MAAM,GAAG7B,KAAK,CAAC,CAAC,CAAC;MACnB8B,MAAM,GAAG9B,KAAK,CAAC,CAAC,CAAC;MACjB+B,MAAM,GAAG/B,KAAK,CAAC,CAAC,CAAC;MACjBgC,MAAM,GAAGhC,KAAK,CAAC,CAAC,CAAC;MACjBiC,MAAM,GAAGjC,KAAK,CAAC,CAAC,CAAC;MACjBkC,MAAM,GAAGlC,KAAK,CAAC,CAAC,CAAC;MACjBmC,MAAM,GAAGnC,KAAK,CAAC,CAAC,CAAC;MACjBoC,MAAM,GAAGpC,KAAK,CAAC,CAAC,CAAC;IAEnB,KAAK,IAAIuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7B,UAAU,EAAE6B,CAAC,EAAE,EAAE;MACnC,IAAIA,CAAC,GAAG,EAAE,EAAE;QACV,IAAI,CAACpB,IAAI,CAACoB,CAAC,CAAC,GACT,CAACnB,MAAM,CAACmB,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,GAC5B,CAACnB,MAAM,CAACmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAG,GACjC,CAACnB,MAAM,CAACmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAE,GAChCnB,MAAM,CAACmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAK;OAC7B,MAAM;QACL,IAAIc,CAAC,GAAG,IAAI,CAAClC,IAAI,CAACoB,CAAC,GAAG,CAAC,CAAC;QACxB,IAAMe,IAAE,GACN,CAAED,CAAC,KAAK,EAAE,GAAKA,CAAC,IAAI,EAAG,KAAMA,CAAC,KAAK,EAAE,GAAKA,CAAC,IAAI,EAAG,CAAC,GAAIA,CAAC,KAAK,EAAG;QAElEA,CAAC,GAAG,IAAI,CAAClC,IAAI,CAACoB,CAAC,GAAG,EAAE,CAAC;QACrB,IAAMgB,IAAE,GACN,CAAEF,CAAC,KAAK,CAAC,GAAKA,CAAC,IAAI,EAAG,KAAMA,CAAC,KAAK,EAAE,GAAKA,CAAC,IAAI,EAAG,CAAC,GAAIA,CAAC,KAAK,CAAE;QAEhE,IAAI,CAAClC,IAAI,CAACoB,CAAC,CAAC,GACV,CAAEe,IAAE,GAAG,IAAI,CAACnC,IAAI,CAACoB,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,KAAMgB,IAAE,GAAG,IAAI,CAACpC,IAAI,CAACoB,CAAC,GAAG,EAAE,CAAC,GAAI,CAAC,CAAC;;MAGlE,IAAMiB,EAAE,GACL,CAAE,CAAC,CAAEP,MAAM,KAAK,CAAC,GAAKA,MAAM,IAAI,EAAG,KAChCA,MAAM,KAAK,EAAE,GAAKA,MAAM,IAAI,EAAG,CAAC,IAChCA,MAAM,KAAK,EAAE,GAAKA,MAAM,IAAI,CAAE,CAAC,KAC/BA,MAAM,GAAGC,MAAM,GAAK,CAACD,MAAM,GAAGE,MAAO,CAAC,GACxC,CAAC,KACCC,MAAM,IAAKvC,GAAG,CAAC0B,CAAC,CAAC,GAAG,IAAI,CAACpB,IAAI,CAACoB,CAAC,CAAC,GAAI,CAAC,CAAC,GAAI,CAAC,CAAC,GAChD,CAAC;MAEH,IAAMkB,EAAE,GACL,CAAC,CAAEZ,MAAM,KAAK,CAAC,GAAKA,MAAM,IAAI,EAAG,KAC9BA,MAAM,KAAK,EAAE,GAAKA,MAAM,IAAI,EAAG,CAAC,IAChCA,MAAM,KAAK,EAAE,GAAKA,MAAM,IAAI,EAAG,CAAC,KAChCA,MAAM,GAAGC,MAAM,GAAKD,MAAM,GAAGE,MAAO,GAAID,MAAM,GAAGC,MAAO,CAAC,GAC7D,CAAC;MAEHK,MAAM,GAAGD,MAAM;MACfA,MAAM,GAAGD,MAAM;MACfA,MAAM,GAAGD,MAAM;MACfA,MAAM,GAAID,MAAM,GAAGQ,EAAE,GAAI,CAAC;MAC1BR,MAAM,GAAGD,MAAM;MACfA,MAAM,GAAGD,MAAM;MACfA,MAAM,GAAGD,MAAM;MACfA,MAAM,GAAIW,EAAE,GAAGC,EAAE,GAAI,CAAC;;IAGxBzC,KAAK,CAAC,CAAC,CAAC,IAAI6B,MAAM;IAClB7B,KAAK,CAAC,CAAC,CAAC,IAAI8B,MAAM;IAClB9B,KAAK,CAAC,CAAC,CAAC,IAAI+B,MAAM;IAClB/B,KAAK,CAAC,CAAC,CAAC,IAAIgC,MAAM;IAClBhC,KAAK,CAAC,CAAC,CAAC,IAAIiC,MAAM;IAClBjC,KAAK,CAAC,CAAC,CAAC,IAAIkC,MAAM;IAClBlC,KAAK,CAAC,CAAC,CAAC,IAAImC,MAAM;IAClBnC,KAAK,CAAC,CAAC,CAAC,IAAIoC,MAAM;EACpB,CAAC;EACH,OAAArC,SAAC;AAAD,CAAC,CAxJD"},"metadata":{},"sourceType":"module","externalDependencies":[]}