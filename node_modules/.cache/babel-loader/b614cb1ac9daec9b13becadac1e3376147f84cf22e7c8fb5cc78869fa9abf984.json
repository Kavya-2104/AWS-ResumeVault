{"ast":null,"code":"import { Amplify } from 'aws-amplify';\nimport { getCurrentUser, signIn, signUp, confirmSignIn, confirmSignUp, confirmResetPassword, resetPassword } from 'aws-amplify/auth';\nimport 'aws-amplify/utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport '../../types/authenticator/user.mjs';\nimport '../../types/authenticator/attributes.mjs';\nimport { hasSpecialChars } from '../../helpers/authenticator/utils.mjs';\nimport '../../helpers/accountSettings/utils.mjs';\n\n// Cognito does not allow a password length less then 8 characters\nconst DEFAULT_COGNITO_PASSWORD_MIN_LENGTH = 8;\nconst isInvalidUserAtributes = userAttributes => Array.isArray(userAttributes);\nconst parseUserAttributes = userAttributes => {\n  if (!userAttributes) {\n    return undefined;\n  }\n  // `aws-amplify` versions <= 6.0.5 return an array of `userAttributes` rather than an object\n  if (isInvalidUserAtributes(userAttributes)) {\n    return Object.entries(userAttributes).map(([_, value]) => Object.keys(value)[0]);\n  }\n  return Object.keys(userAttributes);\n};\nconst defaultServices = {\n  async getAmplifyConfig() {\n    const result = Amplify.getConfig();\n    const cliConfig = result.Auth?.Cognito;\n    const {\n      loginWith,\n      userAttributes\n    } = result.Auth?.Cognito ?? {};\n    const parsedLoginMechanisms = loginWith ? Object.entries(loginWith).filter(([key, _value]) => key !== 'oauth').filter(([_key, value]) => !!value).map(keyValueArray => {\n      return keyValueArray[0] === 'phone' // the key for phone_number is phone in getConfig but everywhere else we treat is as phone_number\n      ? 'phone_number' : keyValueArray[0];\n    }) : undefined;\n    const parsedSignupAttributes = parseUserAttributes(userAttributes);\n    const parsedSocialProviders = loginWith?.oauth?.providers ? loginWith.oauth.providers?.map(provider => provider.toString().toLowerCase()) : undefined;\n    return {\n      ...cliConfig,\n      loginMechanisms: parsedLoginMechanisms,\n      signUpAttributes: parsedSignupAttributes,\n      socialProviders: parsedSocialProviders\n    };\n  },\n  getCurrentUser,\n  handleSignIn: signIn,\n  handleSignUp: signUp,\n  handleConfirmSignIn: confirmSignIn,\n  handleConfirmSignUp: confirmSignUp,\n  handleForgotPasswordSubmit: confirmResetPassword,\n  handleForgotPassword: resetPassword,\n  // Validation hooks for overriding\n  async validateCustomSignUp(formData, touchData) {},\n  async validateFormPassword(formData, touchData, passwordSettings) {\n    const {\n      password\n    } = formData;\n    const {\n      password: touched_password\n    } = touchData;\n    /**\n     * If the password is not touched,\n     * or if the password settings are not set, we don't need to validate it.\n     */\n    if (!touched_password || !passwordSettings) return null;\n    const password_complexity = [];\n    const policyMinLength = passwordSettings.minLength ?? DEFAULT_COGNITO_PASSWORD_MIN_LENGTH;\n    if (password.length < policyMinLength) {\n      password_complexity.push(`Password must have at least ${policyMinLength} characters`);\n    }\n    if (passwordSettings.requireLowercase && !/[a-z]/.test(password)) password_complexity.push('Password must have lower case letters');\n    if (passwordSettings.requireUppercase && !/[A-Z]/.test(password)) password_complexity.push('Password must have upper case letters');\n    if (passwordSettings.requireNumbers && !/[0-9]/.test(password)) password_complexity.push('Password must have numbers');\n    // https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-policies.html\n    if (passwordSettings.requireSpecialCharacters && !hasSpecialChars(password)) password_complexity.push('Password must have special characters');\n    /**\n     * Only return an error if there is at least one error.\n     */\n    return password_complexity.length !== 0 ? {\n      password: password_complexity\n    } : null;\n  },\n  async validateConfirmPassword(formData, touchData) {\n    const {\n      password,\n      confirm_password\n    } = formData;\n    const {\n      confirm_password: touched_confirm_password,\n      password: touched_password\n    } = touchData;\n    if (!password && !confirm_password) {\n      // these inputs are clean, don't complain yet\n      return null;\n    } else if ((password || confirm_password) && password !== confirm_password && (touched_confirm_password && touched_password || password?.length >= 6 && confirm_password?.length >= 6)) {\n      // Only return an error if both fields have text entered,\n      // the passwords do not match, and the fields have been\n      // touched or the password and confirm password is longer then or equal to 6.\n      return {\n        confirm_password: 'Your passwords must match'\n      };\n    }\n  },\n  async validatePreferredUsername(formData, touchData) {}\n};\nexport { defaultServices };","map":{"version":3,"names":["Amplify","getCurrentUser","signIn","signUp","confirmSignIn","confirmSignUp","confirmResetPassword","resetPassword","hasSpecialChars","DEFAULT_COGNITO_PASSWORD_MIN_LENGTH","isInvalidUserAtributes","userAttributes","Array","isArray","parseUserAttributes","undefined","Object","entries","map","_","value","keys","defaultServices","getAmplifyConfig","result","getConfig","cliConfig","Auth","Cognito","loginWith","parsedLoginMechanisms","filter","key","_value","_key","keyValueArray","parsedSignupAttributes","parsedSocialProviders","oauth","providers","provider","toString","toLowerCase","loginMechanisms","signUpAttributes","socialProviders","handleSignIn","handleSignUp","handleConfirmSignIn","handleConfirmSignUp","handleForgotPasswordSubmit","handleForgotPassword","validateCustomSignUp","formData","touchData","validateFormPassword","passwordSettings","password","touched_password","password_complexity","policyMinLength","minLength","length","push","requireLowercase","test","requireUppercase","requireNumbers","requireSpecialCharacters","validateConfirmPassword","confirm_password","touched_confirm_password","validatePreferredUsername"],"sources":["E:/CSC-PROJECT/amplify-react-app/node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/defaultServices.mjs"],"sourcesContent":["import { Amplify } from 'aws-amplify';\nimport { getCurrentUser, signIn, signUp, confirmSignIn, confirmSignUp, confirmResetPassword, resetPassword } from 'aws-amplify/auth';\nimport 'aws-amplify/utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport '../../types/authenticator/user.mjs';\nimport '../../types/authenticator/attributes.mjs';\nimport { hasSpecialChars } from '../../helpers/authenticator/utils.mjs';\nimport '../../helpers/accountSettings/utils.mjs';\n\n// Cognito does not allow a password length less then 8 characters\nconst DEFAULT_COGNITO_PASSWORD_MIN_LENGTH = 8;\nconst isInvalidUserAtributes = (userAttributes) => Array.isArray(userAttributes);\nconst parseUserAttributes = (userAttributes) => {\n    if (!userAttributes) {\n        return undefined;\n    }\n    // `aws-amplify` versions <= 6.0.5 return an array of `userAttributes` rather than an object\n    if (isInvalidUserAtributes(userAttributes)) {\n        return Object.entries(userAttributes).map(([_, value]) => Object.keys(value)[0]);\n    }\n    return Object.keys(userAttributes);\n};\nconst defaultServices = {\n    async getAmplifyConfig() {\n        const result = Amplify.getConfig();\n        const cliConfig = result.Auth?.Cognito;\n        const { loginWith, userAttributes } = result.Auth?.Cognito ?? {};\n        const parsedLoginMechanisms = loginWith\n            ? Object.entries(loginWith)\n                .filter(([key, _value]) => key !== 'oauth')\n                .filter(([_key, value]) => !!value)\n                .map((keyValueArray) => {\n                return keyValueArray[0] === 'phone' // the key for phone_number is phone in getConfig but everywhere else we treat is as phone_number\n                    ? 'phone_number'\n                    : keyValueArray[0];\n            })\n            : undefined;\n        const parsedSignupAttributes = parseUserAttributes(userAttributes);\n        const parsedSocialProviders = loginWith?.oauth?.providers\n            ? loginWith.oauth.providers?.map((provider) => provider.toString().toLowerCase())\n            : undefined;\n        return {\n            ...cliConfig,\n            loginMechanisms: parsedLoginMechanisms,\n            signUpAttributes: parsedSignupAttributes,\n            socialProviders: parsedSocialProviders,\n        };\n    },\n    getCurrentUser,\n    handleSignIn: signIn,\n    handleSignUp: signUp,\n    handleConfirmSignIn: confirmSignIn,\n    handleConfirmSignUp: confirmSignUp,\n    handleForgotPasswordSubmit: confirmResetPassword,\n    handleForgotPassword: resetPassword,\n    // Validation hooks for overriding\n    async validateCustomSignUp(formData, touchData) { },\n    async validateFormPassword(formData, touchData, passwordSettings) {\n        const { password } = formData;\n        const { password: touched_password } = touchData;\n        /**\n         * If the password is not touched,\n         * or if the password settings are not set, we don't need to validate it.\n         */\n        if (!touched_password || !passwordSettings)\n            return null;\n        const password_complexity = [];\n        const policyMinLength = passwordSettings.minLength ?? DEFAULT_COGNITO_PASSWORD_MIN_LENGTH;\n        if (password.length < policyMinLength) {\n            password_complexity.push(`Password must have at least ${policyMinLength} characters`);\n        }\n        if (passwordSettings.requireLowercase && !/[a-z]/.test(password))\n            password_complexity.push('Password must have lower case letters');\n        if (passwordSettings.requireUppercase && !/[A-Z]/.test(password))\n            password_complexity.push('Password must have upper case letters');\n        if (passwordSettings.requireNumbers && !/[0-9]/.test(password))\n            password_complexity.push('Password must have numbers');\n        // https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-policies.html\n        if (passwordSettings.requireSpecialCharacters && !hasSpecialChars(password))\n            password_complexity.push('Password must have special characters');\n        /**\n         * Only return an error if there is at least one error.\n         */\n        return password_complexity.length !== 0\n            ? { password: password_complexity }\n            : null;\n    },\n    async validateConfirmPassword(formData, touchData) {\n        const { password, confirm_password } = formData;\n        const { confirm_password: touched_confirm_password, password: touched_password, } = touchData;\n        if (!password && !confirm_password) {\n            // these inputs are clean, don't complain yet\n            return null;\n        }\n        else if ((password || confirm_password) &&\n            password !== confirm_password &&\n            ((touched_confirm_password && touched_password) ||\n                (password?.length >= 6 && confirm_password?.length >= 6))) {\n            // Only return an error if both fields have text entered,\n            // the passwords do not match, and the fields have been\n            // touched or the password and confirm password is longer then or equal to 6.\n            return {\n                confirm_password: 'Your passwords must match',\n            };\n        }\n    },\n    async validatePreferredUsername(formData, touchData) { },\n};\n\nexport { defaultServices };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}