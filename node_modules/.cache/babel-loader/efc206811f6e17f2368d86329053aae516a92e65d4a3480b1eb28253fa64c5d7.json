{"ast":null,"code":"import { getUploadsCacheKey, findCachedUploadParts, cacheMultipartUpload } from './uploadCache.mjs';\nimport '../../../utils/client/base.mjs';\nimport '../../../utils/client/getObject.mjs';\nimport '../../../utils/client/listObjectsV2.mjs';\nimport '../../../utils/client/putObject.mjs';\nimport { createMultipartUpload } from '../../../utils/client/createMultipartUpload.mjs';\nimport '../../../utils/client/uploadPart.mjs';\nimport '../../../utils/client/completeMultipartUpload.mjs';\nimport '../../../utils/client/listParts.mjs';\nimport '../../../utils/client/abortMultipartUpload.mjs';\nimport '../../../utils/client/copyObject.mjs';\nimport '../../../utils/client/headObject.mjs';\nimport '../../../utils/client/deleteObject.mjs';\nimport '../../../../../errors/types/validation.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport { logger } from '../../../../../utils/logger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Load the in-progress multipart upload from local storage or async storage(RN) if it exists, or create a new multipart\n * upload.\n *\n * @internal\n */\nconst loadOrCreateMultipartUpload = async ({\n  s3Config,\n  data,\n  size,\n  contentType,\n  bucket,\n  accessLevel,\n  keyPrefix,\n  key,\n  contentDisposition,\n  contentEncoding,\n  metadata,\n  abortSignal\n}) => {\n  const finalKey = keyPrefix + key;\n  let cachedUpload;\n  if (size === undefined) {\n    logger.debug('uploaded data size cannot be determined, skipping cache.');\n    cachedUpload = undefined;\n  } else {\n    const uploadCacheKey = getUploadsCacheKey({\n      size,\n      contentType,\n      file: data instanceof File ? data : undefined,\n      bucket,\n      accessLevel,\n      key\n    });\n    const cachedUploadParts = await findCachedUploadParts({\n      s3Config,\n      cacheKey: uploadCacheKey,\n      bucket,\n      finalKey\n    });\n    cachedUpload = cachedUploadParts ? {\n      ...cachedUploadParts,\n      uploadCacheKey\n    } : undefined;\n  }\n  if (cachedUpload) {\n    return {\n      uploadId: cachedUpload.uploadId,\n      cachedParts: cachedUpload.parts\n    };\n  } else {\n    const {\n      UploadId\n    } = await createMultipartUpload({\n      ...s3Config,\n      abortSignal\n    }, {\n      Bucket: bucket,\n      Key: finalKey,\n      ContentType: contentType,\n      ContentDisposition: contentDisposition,\n      ContentEncoding: contentEncoding,\n      Metadata: metadata\n    });\n    if (size === undefined) {\n      logger.debug('uploaded data size cannot be determined, skipping cache.');\n      return {\n        uploadId: UploadId,\n        cachedParts: []\n      };\n    }\n    const uploadCacheKey = getUploadsCacheKey({\n      size,\n      contentType,\n      file: data instanceof File ? data : undefined,\n      bucket,\n      accessLevel,\n      key\n    });\n    await cacheMultipartUpload(uploadCacheKey, {\n      uploadId: UploadId,\n      bucket,\n      key,\n      fileName: data instanceof File ? data.name : ''\n    });\n    return {\n      uploadId: UploadId,\n      cachedParts: []\n    };\n  }\n};\nexport { loadOrCreateMultipartUpload };","map":{"version":3,"names":["loadOrCreateMultipartUpload","s3Config","data","size","contentType","bucket","accessLevel","keyPrefix","key","contentDisposition","contentEncoding","metadata","abortSignal","finalKey","cachedUpload","undefined","logger","debug","uploadCacheKey","getUploadsCacheKey","file","File","cachedUploadParts","findCachedUploadParts","cacheKey","uploadId","cachedParts","parts","UploadId","createMultipartUpload","Bucket","Key","ContentType","ContentDisposition","ContentEncoding","Metadata","cacheMultipartUpload","fileName","name"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\uploadData\\multipart\\initialUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { cacheMultipartUpload, findCachedUploadParts, getUploadsCacheKey, } from './uploadCache';\nimport { createMultipartUpload } from '../../../utils/client';\nimport { logger } from '../../../../../utils';\n/**\n * Load the in-progress multipart upload from local storage or async storage(RN) if it exists, or create a new multipart\n * upload.\n *\n * @internal\n */\nexport const loadOrCreateMultipartUpload = async ({ s3Config, data, size, contentType, bucket, accessLevel, keyPrefix, key, contentDisposition, contentEncoding, metadata, abortSignal, }) => {\n    const finalKey = keyPrefix + key;\n    let cachedUpload;\n    if (size === undefined) {\n        logger.debug('uploaded data size cannot be determined, skipping cache.');\n        cachedUpload = undefined;\n    }\n    else {\n        const uploadCacheKey = getUploadsCacheKey({\n            size,\n            contentType,\n            file: data instanceof File ? data : undefined,\n            bucket,\n            accessLevel,\n            key,\n        });\n        const cachedUploadParts = await findCachedUploadParts({\n            s3Config,\n            cacheKey: uploadCacheKey,\n            bucket,\n            finalKey,\n        });\n        cachedUpload = cachedUploadParts\n            ? { ...cachedUploadParts, uploadCacheKey }\n            : undefined;\n    }\n    if (cachedUpload) {\n        return {\n            uploadId: cachedUpload.uploadId,\n            cachedParts: cachedUpload.parts,\n        };\n    }\n    else {\n        const { UploadId } = await createMultipartUpload({\n            ...s3Config,\n            abortSignal,\n        }, {\n            Bucket: bucket,\n            Key: finalKey,\n            ContentType: contentType,\n            ContentDisposition: contentDisposition,\n            ContentEncoding: contentEncoding,\n            Metadata: metadata,\n        });\n        if (size === undefined) {\n            logger.debug('uploaded data size cannot be determined, skipping cache.');\n            return {\n                uploadId: UploadId,\n                cachedParts: [],\n            };\n        }\n        const uploadCacheKey = getUploadsCacheKey({\n            size,\n            contentType,\n            file: data instanceof File ? data : undefined,\n            bucket,\n            accessLevel,\n            key,\n        });\n        await cacheMultipartUpload(uploadCacheKey, {\n            uploadId: UploadId,\n            bucket,\n            key,\n            fileName: data instanceof File ? data.name : '',\n        });\n        return {\n            uploadId: UploadId,\n            cachedParts: [],\n        };\n    }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,2BAA2B,GAAG,MAAAA,CAAO;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,IAAI;EAAEC,WAAW;EAAEC,MAAM;EAAEC,WAAW;EAAEC,SAAS;EAAEC,GAAG;EAAEC,kBAAkB;EAAEC,eAAe;EAAEC,QAAQ;EAAEC;AAAW,CAAG,KAAK;EAC1L,MAAMC,QAAQ,GAAGN,SAAS,GAAGC,GAAG;EAChC,IAAIM,YAAY;EAChB,IAAIX,IAAI,KAAKY,SAAS,EAAE;IACpBC,MAAM,CAACC,KAAK,CAAC,0DAA0D,CAAC;IACxEH,YAAY,GAAGC,SAAS;EAChC,CAAK,MACI;IACD,MAAMG,cAAc,GAAGC,kBAAkB,CAAC;MACtChB,IAAI;MACJC,WAAW;MACXgB,IAAI,EAAElB,IAAI,YAAYmB,IAAI,GAAGnB,IAAI,GAAGa,SAAS;MAC7CV,MAAM;MACNC,WAAW;MACXE;IACZ,CAAS,CAAC;IACF,MAAMc,iBAAiB,GAAG,MAAMC,qBAAqB,CAAC;MAClDtB,QAAQ;MACRuB,QAAQ,EAAEN,cAAc;MACxBb,MAAM;MACNQ;IACZ,CAAS,CAAC;IACFC,YAAY,GAAGQ,iBAAiB,GAC1B;MAAE,GAAGA,iBAAiB;MAAEJ;IAAc,CAAE,GACxCH,SAAS;EACvB;EACI,IAAID,YAAY,EAAE;IACd,OAAO;MACHW,QAAQ,EAAEX,YAAY,CAACW,QAAQ;MAC/BC,WAAW,EAAEZ,YAAY,CAACa;IACtC,CAAS;EACT,CAAK,MACI;IACD,MAAM;MAAEC;IAAQ,CAAE,GAAG,MAAMC,qBAAqB,CAAC;MAC7C,GAAG5B,QAAQ;MACXW;IACZ,CAAS,EAAE;MACCkB,MAAM,EAAEzB,MAAM;MACd0B,GAAG,EAAElB,QAAQ;MACbmB,WAAW,EAAE5B,WAAW;MACxB6B,kBAAkB,EAAExB,kBAAkB;MACtCyB,eAAe,EAAExB,eAAe;MAChCyB,QAAQ,EAAExB;IACtB,CAAS,CAAC;IACF,IAAIR,IAAI,KAAKY,SAAS,EAAE;MACpBC,MAAM,CAACC,KAAK,CAAC,0DAA0D,CAAC;MACxE,OAAO;QACHQ,QAAQ,EAAEG,QAAQ;QAClBF,WAAW,EAAE;MAC7B,CAAa;IACb;IACQ,MAAMR,cAAc,GAAGC,kBAAkB,CAAC;MACtChB,IAAI;MACJC,WAAW;MACXgB,IAAI,EAAElB,IAAI,YAAYmB,IAAI,GAAGnB,IAAI,GAAGa,SAAS;MAC7CV,MAAM;MACNC,WAAW;MACXE;IACZ,CAAS,CAAC;IACF,MAAM4B,oBAAoB,CAAClB,cAAc,EAAE;MACvCO,QAAQ,EAAEG,QAAQ;MAClBvB,MAAM;MACNG,GAAG;MACH6B,QAAQ,EAAEnC,IAAI,YAAYmB,IAAI,GAAGnB,IAAI,CAACoC,IAAI,GAAG;IACzD,CAAS,CAAC;IACF,OAAO;MACHb,QAAQ,EAAEG,QAAQ;MAClBF,WAAW,EAAE;IACzB,CAAS;EACT;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}