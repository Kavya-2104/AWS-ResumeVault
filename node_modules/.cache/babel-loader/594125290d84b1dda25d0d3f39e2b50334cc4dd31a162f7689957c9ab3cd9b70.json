{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { signUp as signUp$1 } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { toAttributeType } from '../utils/apiHelpers.mjs';\nimport { setUsernameUsedForAutoSignIn, setAutoSignInStarted, isSignUpComplete, isAutoSignInStarted, autoSignInUserConfirmed, handleCodeAutoSignIn, autoSignInWhenUserIsConfirmedWithLink } from '../utils/signUpHelpers.mjs';\nimport { setAutoSignIn } from './autoSignIn.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Creates a user\n *\n * @param input - The SignUpInput object\n * @returns SignUpOutput\n * @throws service: {@link SignUpException } - Cognito service errors thrown during the sign-up process.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signUp(input) {\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const signUpVerificationMethod = authConfig?.signUpVerificationMethod ?? 'code';\n  const {\n    clientMetadata,\n    validationData,\n    autoSignIn\n  } = input.options ?? {};\n  assertTokenProviderConfig(authConfig);\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n  assertValidationError(!!password, AuthValidationErrorCode.EmptySignUpPassword);\n  const signInServiceOptions = typeof autoSignIn !== 'boolean' ? autoSignIn : undefined;\n  const signInInput = {\n    username,\n    options: signInServiceOptions\n  };\n  // if the authFlowType is 'CUSTOM_WITHOUT_SRP' then we don't include the password\n  if (signInServiceOptions?.authFlowType !== 'CUSTOM_WITHOUT_SRP') {\n    signInInput['password'] = password;\n  }\n  if (signInServiceOptions || autoSignIn === true) {\n    setUsernameUsedForAutoSignIn(username);\n    setAutoSignInStarted(true);\n  }\n  const clientOutput = await signUp$1({\n    region: getRegion(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignUp)\n  }, {\n    Username: username,\n    Password: password,\n    UserAttributes: options?.userAttributes && toAttributeType(options?.userAttributes),\n    ClientMetadata: clientMetadata,\n    ValidationData: validationData && toAttributeType(validationData),\n    ClientId: authConfig.userPoolClientId\n  });\n  const {\n    UserSub,\n    CodeDeliveryDetails\n  } = clientOutput;\n  if (isSignUpComplete(clientOutput) && isAutoSignInStarted()) {\n    setAutoSignIn(autoSignInUserConfirmed(signInInput));\n    return {\n      isSignUpComplete: true,\n      nextStep: {\n        signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n      }\n    };\n  } else if (isSignUpComplete(clientOutput) && !isAutoSignInStarted()) {\n    return {\n      isSignUpComplete: true,\n      nextStep: {\n        signUpStep: 'DONE'\n      }\n    };\n  } else if (!isSignUpComplete(clientOutput) && isAutoSignInStarted() && signUpVerificationMethod === 'code') {\n    handleCodeAutoSignIn(signInInput);\n  } else if (!isSignUpComplete(clientOutput) && isAutoSignInStarted() && signUpVerificationMethod === 'link') {\n    setAutoSignIn(autoSignInWhenUserIsConfirmedWithLink(signInInput));\n    return {\n      isSignUpComplete: false,\n      nextStep: {\n        signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n        codeDeliveryDetails: {\n          deliveryMedium: CodeDeliveryDetails?.DeliveryMedium,\n          destination: CodeDeliveryDetails?.Destination,\n          attributeName: CodeDeliveryDetails?.AttributeName\n        }\n      },\n      userId: UserSub\n    };\n  }\n  return {\n    isSignUpComplete: false,\n    nextStep: {\n      signUpStep: 'CONFIRM_SIGN_UP',\n      codeDeliveryDetails: {\n        deliveryMedium: CodeDeliveryDetails?.DeliveryMedium,\n        destination: CodeDeliveryDetails?.Destination,\n        attributeName: CodeDeliveryDetails?.AttributeName\n      }\n    },\n    userId: UserSub\n  };\n}\nexport { signUp };","map":{"version":3,"names":["signUp","input","username","password","options","authConfig","Amplify","getConfig","Auth","Cognito","signUpVerificationMethod","clientMetadata","validationData","autoSignIn","assertTokenProviderConfig","assertValidationError","AuthValidationErrorCode","EmptySignUpUsername","EmptySignUpPassword","signInServiceOptions","undefined","signInInput","authFlowType","setUsernameUsedForAutoSignIn","setAutoSignInStarted","clientOutput","signUp$1","region","getRegion","userPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SignUp","Username","Password","UserAttributes","userAttributes","toAttributeType","ClientMetadata","ValidationData","ClientId","userPoolClientId","UserSub","CodeDeliveryDetails","isSignUpComplete","isAutoSignInStarted","setAutoSignIn","autoSignInUserConfirmed","nextStep","signUpStep","handleCodeAutoSignIn","autoSignInWhenUserIsConfirmedWithLink","codeDeliveryDetails","deliveryMedium","DeliveryMedium","destination","Destination","attributeName","AttributeName","userId"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\signUp.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction, } from '@aws-amplify/core/internals/utils';\nimport { signUp as signUpClient } from '../utils/clients/CognitoIdentityProvider';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { toAttributeType } from '../utils/apiHelpers';\nimport { handleCodeAutoSignIn, isAutoSignInStarted, setAutoSignInStarted, isSignUpComplete, autoSignInUserConfirmed, autoSignInWhenUserIsConfirmedWithLink, setUsernameUsedForAutoSignIn, } from '../utils/signUpHelpers';\nimport { setAutoSignIn } from './autoSignIn';\nimport { getAuthUserAgentValue } from '../../../utils';\n/**\n * Creates a user\n *\n * @param input - The SignUpInput object\n * @returns SignUpOutput\n * @throws service: {@link SignUpException } - Cognito service errors thrown during the sign-up process.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signUp(input) {\n    const { username, password, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const signUpVerificationMethod = authConfig?.signUpVerificationMethod ?? 'code';\n    const { clientMetadata, validationData, autoSignIn } = input.options ?? {};\n    assertTokenProviderConfig(authConfig);\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n    assertValidationError(!!password, AuthValidationErrorCode.EmptySignUpPassword);\n    const signInServiceOptions = typeof autoSignIn !== 'boolean' ? autoSignIn : undefined;\n    const signInInput = {\n        username,\n        options: signInServiceOptions,\n    };\n    // if the authFlowType is 'CUSTOM_WITHOUT_SRP' then we don't include the password\n    if (signInServiceOptions?.authFlowType !== 'CUSTOM_WITHOUT_SRP') {\n        signInInput['password'] = password;\n    }\n    if (signInServiceOptions || autoSignIn === true) {\n        setUsernameUsedForAutoSignIn(username);\n        setAutoSignInStarted(true);\n    }\n    const clientOutput = await signUpClient({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignUp),\n    }, {\n        Username: username,\n        Password: password,\n        UserAttributes: options?.userAttributes && toAttributeType(options?.userAttributes),\n        ClientMetadata: clientMetadata,\n        ValidationData: validationData && toAttributeType(validationData),\n        ClientId: authConfig.userPoolClientId,\n    });\n    const { UserSub, CodeDeliveryDetails } = clientOutput;\n    if (isSignUpComplete(clientOutput) && isAutoSignInStarted()) {\n        setAutoSignIn(autoSignInUserConfirmed(signInInput));\n        return {\n            isSignUpComplete: true,\n            nextStep: {\n                signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n            },\n        };\n    }\n    else if (isSignUpComplete(clientOutput) && !isAutoSignInStarted()) {\n        return {\n            isSignUpComplete: true,\n            nextStep: {\n                signUpStep: 'DONE',\n            },\n        };\n    }\n    else if (!isSignUpComplete(clientOutput) &&\n        isAutoSignInStarted() &&\n        signUpVerificationMethod === 'code') {\n        handleCodeAutoSignIn(signInInput);\n    }\n    else if (!isSignUpComplete(clientOutput) &&\n        isAutoSignInStarted() &&\n        signUpVerificationMethod === 'link') {\n        setAutoSignIn(autoSignInWhenUserIsConfirmedWithLink(signInInput));\n        return {\n            isSignUpComplete: false,\n            nextStep: {\n                signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n                codeDeliveryDetails: {\n                    deliveryMedium: CodeDeliveryDetails?.DeliveryMedium,\n                    destination: CodeDeliveryDetails?.Destination,\n                    attributeName: CodeDeliveryDetails?.AttributeName,\n                },\n            },\n            userId: UserSub,\n        };\n    }\n    return {\n        isSignUpComplete: false,\n        nextStep: {\n            signUpStep: 'CONFIRM_SIGN_UP',\n            codeDeliveryDetails: {\n                deliveryMedium: CodeDeliveryDetails?.DeliveryMedium,\n                destination: CodeDeliveryDetails?.Destination,\n                attributeName: CodeDeliveryDetails?.AttributeName,\n            },\n        },\n        userId: UserSub,\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}