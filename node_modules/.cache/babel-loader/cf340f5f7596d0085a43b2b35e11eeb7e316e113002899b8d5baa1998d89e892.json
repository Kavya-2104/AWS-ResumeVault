{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { forgotPassword } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nasync function resetPassword(input) {\n  const username = input.username;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolClientId,\n    userPoolId\n  } = authConfig;\n  const clientMetadata = input.options?.clientMetadata;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const res = await forgotPassword({\n    region: getRegion(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword)\n  }, {\n    Username: username,\n    ClientMetadata: clientMetadata,\n    ClientId: authConfig.userPoolClientId,\n    UserContextData\n  });\n  const codeDeliveryDetails = res.CodeDeliveryDetails;\n  return {\n    isPasswordReset: false,\n    nextStep: {\n      resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n      codeDeliveryDetails: {\n        deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n        destination: codeDeliveryDetails?.Destination,\n        attributeName: codeDeliveryDetails?.AttributeName\n      }\n    }\n  };\n}\nexport { resetPassword };","map":{"version":3,"names":["resetPassword","input","username","assertValidationError","AuthValidationErrorCode","EmptyResetPasswordUsername","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","clientMetadata","options","UserContextData","getUserContextData","res","forgotPassword","region","getRegion","userAgentValue","getAuthUserAgentValue","AuthAction","ResetPassword","Username","ClientMetadata","ClientId","codeDeliveryDetails","CodeDeliveryDetails","isPasswordReset","nextStep","resetPasswordStep","deliveryMedium","DeliveryMedium","destination","Destination","attributeName","AttributeName"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\resetPassword.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { forgotPassword } from '../utils/clients/CognitoIdentityProvider';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nexport async function resetPassword(input) {\n    const username = input.username;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const res = await forgotPassword({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n        isPasswordReset: false,\n        nextStep: {\n            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n            codeDeliveryDetails: {\n                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n                destination: codeDeliveryDetails?.Destination,\n                attributeName: codeDeliveryDetails?.AttributeName,\n            },\n        },\n    };\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,aAAaA,CAACC,KAAK,EAAE;EACvC,MAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;EAC/BC,qBAAqB,CAAC,CAAC,CAACD,QAAQ,EAAEE,uBAAuB,CAACC,0BAA0B,CAAC;EACrF,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC;EAAU,CAAE,GAAGP,UAAU;EACnD,MAAMQ,cAAc,GAAGb,KAAK,CAACc,OAAO,EAAED,cAAc;EACpD,MAAME,eAAe,GAAGC,kBAAkB,CAAC;IACvCf,QAAQ;IACRW,UAAU;IACVD;EACR,CAAK,CAAC;EACF,MAAMM,GAAG,GAAG,MAAMC,cAAc,CAAC;IAC7BC,MAAM,EAAEC,SAAS,CAACf,UAAU,CAACO,UAAU,CAAC;IACxCS,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,aAAa;EACtE,CAAK,EAAE;IACCC,QAAQ,EAAExB,QAAQ;IAClByB,cAAc,EAAEb,cAAc;IAC9Bc,QAAQ,EAAEtB,UAAU,CAACM,gBAAgB;IACrCI;EACR,CAAK,CAAC;EACF,MAAMa,mBAAmB,GAAGX,GAAG,CAACY,mBAAmB;EACnD,OAAO;IACHC,eAAe,EAAE,KAAK;IACtBC,QAAQ,EAAE;MACNC,iBAAiB,EAAE,kCAAkC;MACrDJ,mBAAmB,EAAE;QACjBK,cAAc,EAAEL,mBAAmB,EAAEM,cAAc;QACnDC,WAAW,EAAEP,mBAAmB,EAAEQ,WAAW;QAC7CC,aAAa,EAAET,mBAAmB,EAAEU;MACpD;IACA;EACA,CAAK;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}