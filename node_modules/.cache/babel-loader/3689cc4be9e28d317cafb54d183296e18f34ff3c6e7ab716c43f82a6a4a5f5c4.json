{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { listDevices } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Cognito Documentation for max device\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nconst MAX_DEVICES = 60;\n/**\n * Fetches devices that have been remembered using {@link rememberDevice}\n * for the currently authenticated user.\n *\n * @returns FetchDevicesOutput\n * @throws {@link ListDevicesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function fetchDevices() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const response = await listDevices({\n    region: getRegion(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.FetchDevices)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    Limit: MAX_DEVICES\n  });\n  return parseDevicesResponse(response.Devices ?? []);\n}\nconst parseDevicesResponse = async devices => {\n  return devices.map(({\n    DeviceKey: id = '',\n    DeviceAttributes = [],\n    DeviceCreateDate,\n    DeviceLastModifiedDate,\n    DeviceLastAuthenticatedDate\n  }) => {\n    const attributes = DeviceAttributes.reduce((attrs, {\n      Name,\n      Value\n    }) => {\n      if (Name && Value) {\n        attrs[Name] = Value;\n      }\n      return attrs;\n    }, {});\n    return {\n      id,\n      attributes,\n      createDate: DeviceCreateDate ? new Date(DeviceCreateDate * 1000) : undefined,\n      lastModifiedDate: DeviceLastModifiedDate ? new Date(DeviceLastModifiedDate * 1000) : undefined,\n      lastAuthenticatedDate: DeviceLastAuthenticatedDate ? new Date(DeviceLastAuthenticatedDate * 1000) : undefined\n    };\n  });\n};\nexport { fetchDevices };","map":{"version":3,"names":["MAX_DEVICES","fetchDevices","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","tokens","fetchAuthSession","assertAuthTokens","response","listDevices","region","getRegion","userPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","FetchDevices","AccessToken","accessToken","toString","Limit","parseDevicesResponse","Devices","devices","map","DeviceKey","id","DeviceAttributes","DeviceCreateDate","DeviceLastModifiedDate","DeviceLastAuthenticatedDate","attributes","reduce","attrs","Name","Value","createDate","Date","undefined","lastModifiedDate","lastAuthenticatedDate"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\auth\\src\\providers\\cognito\\apis\\fetchDevices.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { listDevices } from '../utils/clients/CognitoIdentityProvider';\nimport { assertAuthTokens } from '../utils/types';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { getAuthUserAgentValue } from '../../../utils';\n// Cognito Documentation for max device\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nconst MAX_DEVICES = 60;\n/**\n * Fetches devices that have been remembered using {@link rememberDevice}\n * for the currently authenticated user.\n *\n * @returns FetchDevicesOutput\n * @throws {@link ListDevicesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function fetchDevices() {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { tokens } = await fetchAuthSession();\n    assertAuthTokens(tokens);\n    const response = await listDevices({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.FetchDevices),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        Limit: MAX_DEVICES,\n    });\n    return parseDevicesResponse(response.Devices ?? []);\n}\nconst parseDevicesResponse = async (devices) => {\n    return devices.map(({ DeviceKey: id = '', DeviceAttributes = [], DeviceCreateDate, DeviceLastModifiedDate, DeviceLastAuthenticatedDate, }) => {\n        const attributes = DeviceAttributes.reduce((attrs, { Name, Value }) => {\n            if (Name && Value) {\n                attrs[Name] = Value;\n            }\n            return attrs;\n        }, {});\n        return {\n            id,\n            attributes,\n            createDate: DeviceCreateDate\n                ? new Date(DeviceCreateDate * 1000)\n                : undefined,\n            lastModifiedDate: DeviceLastModifiedDate\n                ? new Date(DeviceLastModifiedDate * 1000)\n                : undefined,\n            lastAuthenticatedDate: DeviceLastAuthenticatedDate\n                ? new Date(DeviceLastAuthenticatedDate * 1000)\n                : undefined,\n        };\n    });\n};\n"],"mappings":";;;;;;;AAAA;AACA;AAOA;AACA;AACA,MAAMA,WAAW,GAAG,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeC,YAAYA,CAAA,EAAG;EACjC,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM;EAAM,CAAE,GAAG,MAAMC,gBAAgB,EAAE;EAC3CC,gBAAgB,CAACF,MAAM,CAAC;EACxB,MAAMG,QAAQ,GAAG,MAAMC,WAAW,CAAC;IAC/BC,MAAM,EAAEC,SAAS,CAACZ,UAAU,CAACa,UAAU,CAAC;IACxCC,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,YAAY;EACrE,CAAK,EAAE;IACCC,WAAW,EAAEZ,MAAM,CAACa,WAAW,CAACC,QAAQ,EAAE;IAC1CC,KAAK,EAAEvB;EACf,CAAK,CAAC;EACF,OAAOwB,oBAAoB,CAACb,QAAQ,CAACc,OAAO,IAAI,EAAE,CAAC;AACvD;AACA,MAAMD,oBAAoB,GAAG,MAAOE,OAAO,IAAK;EAC5C,OAAOA,OAAO,CAACC,GAAG,CAAC,CAAC;IAAEC,SAAS,EAAEC,EAAE,GAAG,EAAE;IAAEC,gBAAgB,GAAG,EAAE;IAAEC,gBAAgB;IAAEC,sBAAsB;IAAEC;EAA2B,CAAG,KAAK;IAC1I,MAAMC,UAAU,GAAGJ,gBAAgB,CAACK,MAAM,CAAC,CAACC,KAAK,EAAE;MAAEC,IAAI;MAAEC;IAAK,CAAE,KAAK;MACnE,IAAID,IAAI,IAAIC,KAAK,EAAE;QACfF,KAAK,CAACC,IAAI,CAAC,GAAGC,KAAK;MACnC;MACY,OAAOF,KAAK;IACxB,CAAS,EAAE,EAAE,CAAC;IACN,OAAO;MACHP,EAAE;MACFK,UAAU;MACVK,UAAU,EAAER,gBAAgB,GACtB,IAAIS,IAAI,CAACT,gBAAgB,GAAG,IAAI,CAAC,GACjCU,SAAS;MACfC,gBAAgB,EAAEV,sBAAsB,GAClC,IAAIQ,IAAI,CAACR,sBAAsB,GAAG,IAAI,CAAC,GACvCS,SAAS;MACfE,qBAAqB,EAAEV,2BAA2B,GAC5C,IAAIO,IAAI,CAACP,2BAA2B,GAAG,IAAI,CAAC,GAC5CQ;IAClB,CAAS;EACT,CAAK,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}