{"ast":null,"code":"import { getSignedHeaders } from './utils/getSignedHeaders.mjs';\nimport { getSigningValues } from './utils/getSigningValues.mjs';\nimport { HOST_HEADER, AMZ_DATE_HEADER, TOKEN_HEADER, AUTH_HEADER, SHA256_ALGORITHM_IDENTIFIER } from './constants.mjs';\nimport { getSignature } from './utils/getSignature.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nconst signRequest = (request, options) => {\n  const signingValues = getSigningValues(options);\n  const {\n    accessKeyId,\n    credentialScope,\n    longDate,\n    sessionToken\n  } = signingValues;\n  // create the request to sign\n  const headers = {\n    ...request.headers\n  };\n  headers[HOST_HEADER] = request.url.host;\n  headers[AMZ_DATE_HEADER] = longDate;\n  if (sessionToken) {\n    headers[TOKEN_HEADER] = sessionToken;\n  }\n  const requestToSign = {\n    ...request,\n    headers\n  };\n  // calculate and add the signature to the request\n  const signature = getSignature(requestToSign, signingValues);\n  const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;\n  const signedHeadersEntry = `SignedHeaders=${getSignedHeaders(headers)}`;\n  const signatureEntry = `Signature=${signature}`;\n  headers[AUTH_HEADER] = `${SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;\n  return requestToSign;\n};\nexport { signRequest };","map":{"version":3,"names":["signRequest","request","options","signingValues","getSigningValues","accessKeyId","credentialScope","longDate","sessionToken","headers","HOST_HEADER","url","host","AMZ_DATE_HEADER","TOKEN_HEADER","requestToSign","signature","getSignature","credentialEntry","signedHeadersEntry","getSignedHeaders","signatureEntry","AUTH_HEADER","SHA256_ALGORITHM_IDENTIFIER"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\signRequest.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getSignedHeaders } from './utils/getSignedHeaders';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { AMZ_DATE_HEADER, AUTH_HEADER, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, TOKEN_HEADER, } from './constants';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nexport const signRequest = (request, options) => {\n    const signingValues = getSigningValues(options);\n    const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;\n    // create the request to sign\n    const headers = { ...request.headers };\n    headers[HOST_HEADER] = request.url.host;\n    headers[AMZ_DATE_HEADER] = longDate;\n    if (sessionToken) {\n        headers[TOKEN_HEADER] = sessionToken;\n    }\n    const requestToSign = { ...request, headers };\n    // calculate and add the signature to the request\n    const signature = getSignature(requestToSign, signingValues);\n    const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;\n    const signedHeadersEntry = `SignedHeaders=${getSignedHeaders(headers)}`;\n    const signatureEntry = `Signature=${signature}`;\n    headers[AUTH_HEADER] =\n        `${SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;\n    return requestToSign;\n};\n"],"mappings":";;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,WAAW,GAAGA,CAACC,OAAO,EAAEC,OAAO,KAAK;EAC7C,MAAMC,aAAa,GAAGC,gBAAgB,CAACF,OAAO,CAAC;EAC/C,MAAM;IAAEG,WAAW;IAAEC,eAAe;IAAEC,QAAQ;IAAEC;EAAY,CAAE,GAAGL,aAAa;EAClF;EACI,MAAMM,OAAO,GAAG;IAAE,GAAGR,OAAO,CAACQ;EAAO,CAAE;EACtCA,OAAO,CAACC,WAAW,CAAC,GAAGT,OAAO,CAACU,GAAG,CAACC,IAAI;EACvCH,OAAO,CAACI,eAAe,CAAC,GAAGN,QAAQ;EACnC,IAAIC,YAAY,EAAE;IACdC,OAAO,CAACK,YAAY,CAAC,GAAGN,YAAY;EAC5C;EACI,MAAMO,aAAa,GAAG;IAAE,GAAGd,OAAO;IAAEQ;EAAO,CAAE;EACjD;EACI,MAAMO,SAAS,GAAGC,YAAY,CAACF,aAAa,EAAEZ,aAAa,CAAC;EAC5D,MAAMe,eAAe,GAAI,cAAab,WAAY,IAAGC,eAAgB,EAAC;EACtE,MAAMa,kBAAkB,GAAI,iBAAgBC,gBAAgB,CAACX,OAAO,CAAE,EAAC;EACvE,MAAMY,cAAc,GAAI,aAAYL,SAAU,EAAC;EAC/CP,OAAO,CAACa,WAAW,CAAC,GACf,GAAEC,2BAA4B,IAAGL,eAAgB,KAAIC,kBAAmB,KAAIE,cAAe,EAAC;EACjG,OAAON,aAAa;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}