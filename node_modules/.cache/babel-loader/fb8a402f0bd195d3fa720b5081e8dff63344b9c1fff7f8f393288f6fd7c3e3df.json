{"ast":null,"code":"import { EMPTY_HASH, UNSIGNED_PAYLOAD } from '../constants.mjs';\nimport { getHashedDataAsHex } from './dataHashHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns the hashed payload.\n *\n * @param body `body` (payload) from the request.\n * @returns String created using the payload in the body of the HTTP request as input to a hash function. This string\n * uses lowercase hexadecimal characters. If the payload is empty, return precalculated result of an empty hash.\n *\n * @internal\n */\nconst getHashedPayload = body => {\n  // return precalculated empty hash if body is undefined or null\n  if (body == null) {\n    return EMPTY_HASH;\n  }\n  if (isSourceData(body)) {\n    const hashedData = getHashedDataAsHex(null, body);\n    return hashedData;\n  }\n  // Defined body is not signable. Return unsigned payload which may or may not be accepted by the service.\n  return UNSIGNED_PAYLOAD;\n};\nconst isSourceData = body => typeof body === 'string' || ArrayBuffer.isView(body) || isArrayBuffer(body);\nconst isArrayBuffer = arg => typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === '[object ArrayBuffer]';\nexport { getHashedPayload };","map":{"version":3,"names":["getHashedPayload","body","EMPTY_HASH","isSourceData","hashedData","getHashedDataAsHex","UNSIGNED_PAYLOAD","ArrayBuffer","isView","isArrayBuffer","arg","Object","prototype","toString","call"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getHashedPayload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { EMPTY_HASH, UNSIGNED_PAYLOAD } from '../constants';\nimport { getHashedDataAsHex } from './dataHashHelpers';\n/**\n * Returns the hashed payload.\n *\n * @param body `body` (payload) from the request.\n * @returns String created using the payload in the body of the HTTP request as input to a hash function. This string\n * uses lowercase hexadecimal characters. If the payload is empty, return precalculated result of an empty hash.\n *\n * @internal\n */\nexport const getHashedPayload = (body) => {\n    // return precalculated empty hash if body is undefined or null\n    if (body == null) {\n        return EMPTY_HASH;\n    }\n    if (isSourceData(body)) {\n        const hashedData = getHashedDataAsHex(null, body);\n        return hashedData;\n    }\n    // Defined body is not signable. Return unsigned payload which may or may not be accepted by the service.\n    return UNSIGNED_PAYLOAD;\n};\nconst isSourceData = (body) => typeof body === 'string' || ArrayBuffer.isView(body) || isArrayBuffer(body);\nconst isArrayBuffer = (arg) => (typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer) ||\n    Object.prototype.toString.call(arg) === '[object ArrayBuffer]';\n"],"mappings":";;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,gBAAgB,GAAIC,IAAI,IAAK;EAC1C;EACI,IAAIA,IAAI,IAAI,IAAI,EAAE;IACd,OAAOC,UAAU;EACzB;EACI,IAAIC,YAAY,CAACF,IAAI,CAAC,EAAE;IACpB,MAAMG,UAAU,GAAGC,kBAAkB,CAAC,IAAI,EAAEJ,IAAI,CAAC;IACjD,OAAOG,UAAU;EACzB;EACA;EACI,OAAOE,gBAAgB;AAC3B;AACA,MAAMH,YAAY,GAAIF,IAAI,IAAK,OAAOA,IAAI,KAAK,QAAQ,IAAIM,WAAW,CAACC,MAAM,CAACP,IAAI,CAAC,IAAIQ,aAAa,CAACR,IAAI,CAAC;AAC1G,MAAMQ,aAAa,GAAIC,GAAG,IAAM,OAAOH,WAAW,KAAK,UAAU,IAAIG,GAAG,YAAYH,WAAW,IAC3FI,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,GAAG,CAAC,KAAK,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}