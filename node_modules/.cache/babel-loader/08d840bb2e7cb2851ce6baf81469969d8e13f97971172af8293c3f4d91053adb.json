{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport '../runtime/s3TransferHandler/fetch.mjs';\nimport { parser } from '../runtime/xmlParser/pureJs.mjs';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst parseXmlError = async response => {\n  if (!response || response.statusCode < 300) {\n    return;\n  }\n  const {\n    statusCode\n  } = response;\n  const body = await parseXmlBody(response);\n  const code = body?.Code ? body.Code : statusCode === 404 ? 'NotFound' : statusCode.toString();\n  const message = body?.message ?? body?.Message ?? code;\n  const error = new Error(message);\n  return Object.assign(error, {\n    name: code,\n    $metadata: parseMetadata(response)\n  });\n};\nconst parseXmlBody = async response => {\n  if (!response.body) {\n    // S3 can return 200 without a body indicating failure.\n    throw new Error('S3 aborted request.');\n  }\n  const data = await response.body.text();\n  if (data?.length > 0) {\n    try {\n      return parser.parse(data);\n    } catch (error) {\n      throw new Error('Failed to parse XML response.');\n    }\n  }\n  return {};\n};\nexport { parseXmlBody, parseXmlError };","map":{"version":3,"names":["parseXmlError","response","statusCode","body","parseXmlBody","code","Code","toString","message","Message","error","Error","Object","assign","name","$metadata","parseMetadata","data","text","length","parser","parse"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\utils\\parsePayload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { parser } from '../runtime';\nexport const parseXmlError = async (response) => {\n    if (!response || response.statusCode < 300) {\n        return;\n    }\n    const { statusCode } = response;\n    const body = await parseXmlBody(response);\n    const code = body?.Code\n        ? body.Code\n        : statusCode === 404\n            ? 'NotFound'\n            : statusCode.toString();\n    const message = body?.message ?? body?.Message ?? code;\n    const error = new Error(message);\n    return Object.assign(error, {\n        name: code,\n        $metadata: parseMetadata(response),\n    });\n};\nexport const parseXmlBody = async (response) => {\n    if (!response.body) {\n        // S3 can return 200 without a body indicating failure.\n        throw new Error('S3 aborted request.');\n    }\n    const data = await response.body.text();\n    if (data?.length > 0) {\n        try {\n            return parser.parse(data);\n        }\n        catch (error) {\n            throw new Error('Failed to parse XML response.');\n        }\n    }\n    return {};\n};\n"],"mappings":";;;;;;AAAA;AACA;AAGY,MAACA,aAAa,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACC,UAAU,GAAG,GAAG,EAAE;IACxC;EACR;EACI,MAAM;IAAEA;EAAU,CAAE,GAAGD,QAAQ;EAC/B,MAAME,IAAI,GAAG,MAAMC,YAAY,CAACH,QAAQ,CAAC;EACzC,MAAMI,IAAI,GAAGF,IAAI,EAAEG,IAAI,GACjBH,IAAI,CAACG,IAAI,GACTJ,UAAU,KAAK,GAAG,GACd,UAAU,GACVA,UAAU,CAACK,QAAQ,EAAE;EAC/B,MAAMC,OAAO,GAAGL,IAAI,EAAEK,OAAO,IAAIL,IAAI,EAAEM,OAAO,IAAIJ,IAAI;EACtD,MAAMK,KAAK,GAAG,IAAIC,KAAK,CAACH,OAAO,CAAC;EAChC,OAAOI,MAAM,CAACC,MAAM,CAACH,KAAK,EAAE;IACxBI,IAAI,EAAET,IAAI;IACVU,SAAS,EAAEC,aAAa,CAACf,QAAQ;EACzC,CAAK,CAAC;AACN;AACY,MAACG,YAAY,GAAG,MAAOH,QAAQ,IAAK;EAC5C,IAAI,CAACA,QAAQ,CAACE,IAAI,EAAE;IACxB;IACQ,MAAM,IAAIQ,KAAK,CAAC,qBAAqB,CAAC;EAC9C;EACI,MAAMM,IAAI,GAAG,MAAMhB,QAAQ,CAACE,IAAI,CAACe,IAAI,EAAE;EACvC,IAAID,IAAI,EAAEE,MAAM,GAAG,CAAC,EAAE;IAClB,IAAI;MACA,OAAOC,MAAM,CAACC,KAAK,CAACJ,IAAI,CAAC;IACrC,CAAS,CACD,OAAOP,KAAK,EAAE;MACV,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAC5D;EACA;EACI,OAAO,EAAE;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}