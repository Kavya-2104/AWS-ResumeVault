{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base.mjs';\nimport { parseXmlError, parseXmlBody } from './utils/parsePayload.mjs';\nimport { s3TransferHandler } from './runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport './runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map } from './utils/deserializeHelpers.mjs';\nimport { validateS3RequiredParameter, serializePathnameObjectKey } from './utils/serializeHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst INVALID_PARAMETER_ERROR_MSG = 'Invalid parameter for ComplteMultipartUpload API';\nconst completeMultipartUploadSerializer = async (input, endpoint) => {\n  const headers = {\n    'content-type': 'application/xml'\n  };\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n  url.search = new AmplifyUrlSearchParams({\n    uploadId: input.UploadId\n  }).toString();\n  validateS3RequiredParameter(!!input.MultipartUpload, 'MultipartUpload');\n  return {\n    method: 'POST',\n    headers,\n    url,\n    body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + serializeCompletedMultipartUpload(input.MultipartUpload)\n  };\n};\nconst serializeCompletedMultipartUpload = input => {\n  if (!input.Parts?.length) {\n    throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${input}`);\n  }\n  return `<CompleteMultipartUpload xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">${input.Parts.map(serializeCompletedPartList).join('')}</CompleteMultipartUpload>`;\n};\nconst serializeCompletedPartList = input => {\n  if (!input.ETag || input.PartNumber == null) {\n    throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${input}`);\n  }\n  return `<Part><ETag>${input.ETag}</ETag><PartNumber>${input.PartNumber}</PartNumber></Part>`;\n};\n/**\n * Parse CompleteMultipartUpload API response payload, which may be empty or error indicating internal\n * server error, even when the status code is 200.\n *\n * Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\n */\nconst parseXmlBodyOrThrow = async response => {\n  const parsed = await parseXmlBody(response); // Handles empty body case\n  if (parsed.Code !== undefined && parsed.Message !== undefined) {\n    const error = await parseXmlError({\n      ...response,\n      statusCode: 500 // To workaround the >=300 status code check common to other APIs.\n    });\n    throw buildStorageServiceError(error, response.statusCode);\n  }\n  return parsed;\n};\nconst completeMultipartUploadDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseXmlError(response);\n    throw buildStorageServiceError(error, response.statusCode);\n  } else {\n    const parsed = await parseXmlBodyOrThrow(response);\n    const contents = map(parsed, {\n      ETag: 'ETag',\n      Key: 'Key',\n      Location: 'Location'\n    });\n    return {\n      $metadata: parseMetadata(response),\n      ...contents\n    };\n  }\n};\n// CompleteMultiPartUpload API returns 200 status code with empty body or error message.\n// This indicates internal server error after the response has been sent to the client.\n// Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\nconst retryWhenErrorWith200StatusCode = async (response, error) => {\n  if (!response) {\n    return false;\n  }\n  if (response.statusCode === 200) {\n    if (!response.body) {\n      return true;\n    }\n    const parsed = await parseXmlBody(response);\n    if (parsed.Code !== undefined && parsed.Message !== undefined) {\n      return true;\n    }\n    return false;\n  }\n  const defaultRetryDecider = defaultConfig.retryDecider;\n  return defaultRetryDecider(response, error);\n};\nconst completeMultipartUpload = composeServiceApi(s3TransferHandler, completeMultipartUploadSerializer, completeMultipartUploadDeserializer, {\n  ...defaultConfig,\n  responseType: 'text',\n  retryDecider: retryWhenErrorWith200StatusCode\n});\nexport { completeMultipartUpload };","map":{"version":3,"names":["INVALID_PARAMETER_ERROR_MSG","completeMultipartUploadSerializer","input","endpoint","headers","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","UploadId","search","AmplifyUrlSearchParams","uploadId","MultipartUpload","method","body","serializeCompletedMultipartUpload","Parts","length","Error","map","serializeCompletedPartList","join","ETag","PartNumber","parseXmlBodyOrThrow","response","parsed","parseXmlBody","Code","undefined","Message","error","parseXmlError","statusCode","buildStorageServiceError","completeMultipartUploadDeserializer","contents","Location","$metadata","parseMetadata","retryWhenErrorWith200StatusCode","defaultRetryDecider","defaultConfig","retryDecider","completeMultipartUpload","composeServiceApi","s3TransferHandler","responseType"],"sources":["E:\\CSC-PROJECT\\amplify-react-app\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\completeMultipartUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { defaultConfig } from './base';\nimport { buildStorageServiceError, map, parseXmlBody, parseXmlError, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from './utils';\nconst INVALID_PARAMETER_ERROR_MSG = 'Invalid parameter for ComplteMultipartUpload API';\nconst completeMultipartUploadSerializer = async (input, endpoint) => {\n    const headers = {\n        'content-type': 'application/xml',\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        uploadId: input.UploadId,\n    }).toString();\n    validateS3RequiredParameter(!!input.MultipartUpload, 'MultipartUpload');\n    return {\n        method: 'POST',\n        headers,\n        url,\n        body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +\n            serializeCompletedMultipartUpload(input.MultipartUpload),\n    };\n};\nconst serializeCompletedMultipartUpload = (input) => {\n    if (!input.Parts?.length) {\n        throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${input}`);\n    }\n    return `<CompleteMultipartUpload xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">${input.Parts.map(serializeCompletedPartList).join('')}</CompleteMultipartUpload>`;\n};\nconst serializeCompletedPartList = (input) => {\n    if (!input.ETag || input.PartNumber == null) {\n        throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${input}`);\n    }\n    return `<Part><ETag>${input.ETag}</ETag><PartNumber>${input.PartNumber}</PartNumber></Part>`;\n};\n/**\n * Parse CompleteMultipartUpload API response payload, which may be empty or error indicating internal\n * server error, even when the status code is 200.\n *\n * Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\n */\nconst parseXmlBodyOrThrow = async (response) => {\n    const parsed = await parseXmlBody(response); // Handles empty body case\n    if (parsed.Code !== undefined && parsed.Message !== undefined) {\n        const error = (await parseXmlError({\n            ...response,\n            statusCode: 500, // To workaround the >=300 status code check common to other APIs.\n        }));\n        throw buildStorageServiceError(error, response.statusCode);\n    }\n    return parsed;\n};\nconst completeMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = (await parseXmlError(response));\n        throw buildStorageServiceError(error, response.statusCode);\n    }\n    else {\n        const parsed = await parseXmlBodyOrThrow(response);\n        const contents = map(parsed, {\n            ETag: 'ETag',\n            Key: 'Key',\n            Location: 'Location',\n        });\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\n// CompleteMultiPartUpload API returns 200 status code with empty body or error message.\n// This indicates internal server error after the response has been sent to the client.\n// Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\nconst retryWhenErrorWith200StatusCode = async (response, error) => {\n    if (!response) {\n        return false;\n    }\n    if (response.statusCode === 200) {\n        if (!response.body) {\n            return true;\n        }\n        const parsed = await parseXmlBody(response);\n        if (parsed.Code !== undefined && parsed.Message !== undefined) {\n            return true;\n        }\n        return false;\n    }\n    const defaultRetryDecider = defaultConfig.retryDecider;\n    return defaultRetryDecider(response, error);\n};\nexport const completeMultipartUpload = composeServiceApi(s3TransferHandler, completeMultipartUploadSerializer, completeMultipartUploadDeserializer, {\n    ...defaultConfig,\n    responseType: 'text',\n    retryDecider: retryWhenErrorWith200StatusCode,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}